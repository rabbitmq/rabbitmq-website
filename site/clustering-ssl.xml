<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html [
<!ENTITY % entities SYSTEM "rabbit.ent">
%entities;
]>
<!--
Copyright (c) 2007-2019 Pivotal Software, Inc.

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License,
Version 2.0 (the "License”); you may not use this file except in compliance
with the License. You may obtain a copy of the License at

https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Securing Cluster (Inter-node) and CLI Tool Communication with TLS (SSL)</title>
  </head>
  <body>
      <doc:section name="intro">
        <p class="intro">Sometimes is desirable to make the Erlang
        nodes talk to each other using TLS (SSL), and thus make the whole RabbitMQ
        cluster communication via TLS. To achieve that we need to configure the
        Erlang distribution mechanism to use TLS. In this document we are
        going to review the steps to make this possible.</p>
      </doc:section>

      <doc:section name="how-to-linux">
        <doc:heading>Linux</doc:heading>
        <p>First we need to create the TLS certificate that's going to
        be used by the Erlang distribution mechanism. We assume you have done
        that already, otherwise follow the main <a href="/ssl.html">TLS guide</a>.
        Once we have our certificates ready we need to concatenate the server
        certificate and key into one file, for example, assuming we have the
        files <code>server_certificate.pem</code> and
        <code>server_key.pem</code> we can do the following:</p>

<pre class="lang-bash">
cat server_certificate.pem server_key.pem &gt; rabbit.pem
</pre>

        <p>
          Then we have to tell Erlang where to find the
          <code>ssl</code> library during startup. We can create a variable like
          this:
        </p>

<pre class="lang-bash">
# NOTE: these commands ensure that ERL_SSL_PATH is the first line in
# /etc/rabbitmq/rabbitmq-env.conf and will preserve the existing
# contents of that file if it already exists

erl -noinput -eval 'io:format("ERL_SSL_PATH=~s~n", [filename:dirname(code:which(inet_tls_dist))])' -s init stop &gt; /tmp/ssl-path.txt
cat /tmp/ssl-path.txt /etc/rabbitmq/rabbitmq-env.conf &gt; /tmp/new-rabbitmq-env.conf
mv -f /tmp/new-rabbitmq-env.conf /etc/rabbitmq/rabbitmq-env.conf
</pre>

      <p>First we find where Erlang has the <code>inet_tls_dist</code> library, and then the
        variable <code>ERL_SSL_PATH</code> is set with the result from that command.</p>

        <p>By using the previous information now is time to craft the
        <code>SERVER_ADDITIONAL_ERL_ARGS</code> environment variable
        so RabbitMQ is able to start Erlang using TLS for distribution. We do
        that by setting the <code>proto_dist</code> argument to
        <code>inet_tls</code> and then telling Erlang what certificate to use
        (in our case that's the <code>rabbit.pem</code> file we just
        created). Finally we set secure renegotiation to
        <code>true</code>. Here is the line that should be added to
        <code>/etc/rabbitmq/rabbitmq-env.conf</code> following the
        <code>ERL_SSL_PATH</code> line that the above commands added.
        Please note that the double quotes <b>must</b> be present:</p>

<pre class="lang-bash">
SERVER_ADDITIONAL_ERL_ARGS="-pa $ERL_SSL_PATH \
  -proto_dist inet_tls \
  -ssl_dist_opt server_certfile /path/to/rabbit.pem \
  -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true"
</pre>

        <p>Once our initial ("seed") node has inter-node connection configured with
        TLS, CLI tools such as <code>rabbitmqctl</code> also must use TLS
        to talk to the node. This means we have to do what we just did for
        <code>SERVER_ADDITIONAL_ERL_ARGS</code> but this time for
        the environment variable <code>CTL_ERL_ARGS</code>. Here is the complete
        <code>/etc/rabbitmq/rabbitmq-env.conf</code> file:</p>

<pre class="lang-bash">
# NOTE: the following path is **system dependent** (will
#       change depending on Erlang version, distribution used
#       installation method used). Please double check it before
#       proceeding.
ERL_SSL_PATH="/usr/lib64/erlang/lib/ssl-8.2.4/ebin"

SERVER_ADDITIONAL_ERL_ARGS="-pa $ERL_SSL_PATH \
  -proto_dist inet_tls \
  -ssl_dist_opt server_certfile /path/to/rabbit.pem \
  -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true"

CTL_ERL_ARGS="-pa $ERL_SSL_PATH \
  -proto_dist inet_tls \
  -ssl_dist_opt server_certfile /path/to/rabbit.pem \
  -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true"
</pre>

        <p>Now that we have this in place, it's just a matter of
        starting RabbitMQ as we usually do to get the Erlang distribution to
        use TLS for internode communication. Just like CLI tools, all other nodes in
        the cluster that want to join our initial node must have inter-node connection TLS
        configured using <code>SERVER_ADDITIONAL_ERL_ARGS</code> in their
        <code>/etc/rabbitmq/rabbitmq-env.conf</code> file.</p>

        <p>
          All nodes and CLI tools must use certificate/key pairs and
          TLS settings that allow inter-node TCP connections perform
          TLS handshake and peer verification successfully.  For
          example, certificate/key pairs used by other nodes and CLI
          tools must be signed by the same CA as the initial node or a
          different CA that is trusted on the initial node's machine.
          This is no different from how <a href="/ssl.html">client and plugin TLS connections</a>
          work.
        </p>

        <p>
          It is possible to reuse a single certificate/key pair for all nodes and CLI tools
          if it uses a wildcard Common Name, e.g. <code>*.rabbitmq.example.local</code> and
          all host names RabbitMQ nodes plus CLI tools are started on match the wildcard pattern.
        </p>
      </doc:section>

      <doc:section name="how-to-linux-ssl_dist_optfile">
        <doc:heading>Linux (Erlang 20.2 and later)</doc:heading>
        <p>Starting with <a href="http://www.erlang.org/news/116">version 20.2</a>,
          Erlang supports the <code>-ssl_dist_optfile</code>
          argument that allows configuring TLS for distributed Erlang in a file. This greatly simplifies
          the arguments passed on the command line itself.
        </p>
        <p>
          Here is a complete <code>/etc/rabbitmq/rabbitmq-env.conf</code> file using this setting.
          Note that the name of the <code>-ssl_dist_optfile</code> file is not significant, it just
          must be saved in a location readable by the <code>rabbitmq</code> user:
        </p>

<pre class="lang-bash">
# NOTE: the following path is **system dependent**
ERL_SSL_PATH="/usr/lib64/erlang/lib/ssl-8.2.4/ebin"

SERVER_ADDITIONAL_ERL_ARGS="-pa $ERL_SSL_PATH
  -proto_dist inet_tls
  -ssl_dist_optfile /etc/rabbitmq/ssl_dist.config"

CTL_ERL_ARGS="-pa $ERL_SSL_PATH
  -proto_dist inet_tls
  -ssl_dist_optfile /etc/rabbitmq/ssl_dist.config"
</pre>

        <p>
          Here is an example <code>/etc/rabbitmq/ssl_dist.config</code> file:
        </p>

<pre class="lang-bash">
[
  {server, [
    {cacertfile, "/full/path/to/ca_certificate.pem"},
    {certfile, "/full/path/to/server_certificate.pem"},
    {keyfile,  "/full/path/to/server_key.pem"},
    {secure_renegotiate, true},
    {verify, verify_peer},
    {fail_if_no_peer_cert, true}
  ]},
  {client, [
    {cacertfile, "/full/path/to/ca_certificate.pem"},
    {certfile, "/full/path/to/client_certificate.pem"},
    {keyfile, "/full/path/to/client_key.pem"},
    {secure_renegotiate, true},
    {verify, verify_peer},
    {fail_if_no_peer_cert, true}
  ]}
].
</pre>
        <p>
          The file contains many of the most common options enabled to fully validate certificates.
          These options are documented further in the Erlang/OTP documentation:
          <a href="http://erlang.org/doc/apps/ssl/ssl_distribution.html">Using TLS for Erlang Distribution</a>
          as well as in the <a href="http://erlang.org/doc/man/ssl.html">ssl library documentation</a>.
        </p>

      </doc:section>

      <doc:section name="how-to-macos">
        <doc:heading>MacOS</doc:heading>
        <p>With the <a href="/install-standalone-mac.html#standalone-mac">MacOS standalone distribution</a> it is necessary
        to add some extra arguments in order to run the <code>erl</code>
        command to find the path of Erlang's TLS library.  Assuming you are
        inside the folder where you installed the standalone release, the
        commands will look like these:</p>

<pre class="lang-bash">
erl -boot releases/3.4.3/start_clean \
-eval 'io:format("ERL_SSL_PATH=~s~n", [filename:dirname(code:which(inet_tls_dist))])' -s init stop
"/path/to/erl/lib/ssl-5.3.5/ebin"
export ERL_SSL_PATH=/path/to/erl/lib/ssl-5.3.5/ebin
</pre>

        <p>
          The difference is that the path to the
          <code>erl</code> executable and boot file has to be explicitly specified.
          In RabbitMQ's case the boot file will be inside the releases folder of our standalone
          installation.
        </p>

        <p>
          After executing the previous commands,
          proceed to create the environment variables as explained above on the
          <a href="/clustering-ssl.html#how-to-linux">Linux section</a>
        </p>

      </doc:section>

      <doc:section name="how-to-windows">
        <doc:heading>Windows</doc:heading>
        <p>
          There are some minor differences when configuring TLS for distributed Erlang on Windows.
          First, the command to find the location of the <code>inet_tls_dist</code> module is
          different due to shell parsing rules:
        </p>

<pre class="lang-bash">
erl -noinput -eval "io:format(""ERL_SSL_PATH=~s~n"", [filename:dirname(code:which(inet_tls_dist))])" -s init stop
</pre>

        <p>
          Next, the file containing the custom environment variables is named <code>rabbitmq-env-conf.bat</code> on Windows.
          This file <em>must</em> be saved to the <code>%AppData%\RabbitMQ</code> directory of the administrative
          user that installed RabbitMQ.
        </p>
        <p>
          Here is a complete <code>rabbitmq-env-conf.bat</code> file using the <code>-ssl_dist_opfile</code> setting.
          Note the use of forward-slash directory delimiters.
        </p>

<pre class="lang-bash">
@echo off
rem NOTE: If spaces are present in any of these paths,
rem double quotes must be used.

rem NOTE: the following path is **system dependent**.
set SSL_PATH="C:/Program Files/erl10.0.1/lib/ssl-9.0/ebin"

rem NOTE: pre-RabbitMQ 3.7.8 variable names:
set RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-pa %SSL_PATH% ^
    -proto_dist inet_tls ^
    -ssl_dist_optfile C:/Users/rmq_user/AppData/Roaming/RabbitMQ/ssl_dist.config

set RABBITMQ_CTL_ERL_ARGS=-pa %SSL_PATH% ^
    -proto_dist inet_tls ^
    -ssl_dist_optfile C:/Users/rmq_user/AppData/Roaming/RabbitMQ/ssl_dist.config

rem NOTE: post-RabbitMQ 3.7.8 variable names:
rem set SERVER_ADDITIONAL_ERL_ARGS=...
rem set CTL_ERL_ARGS=...

rem See this PR for details
rem https://github.com/rabbitmq/rabbitmq-server/pull/1666
</pre>

        <p>
          Below is an example <code>ssl_dist.config</code> file.
          Note that, as with UNIX-like systems, more <a href="/ssl.html">TLS options</a> are available
          to be set if necessary.</p>

<pre class="lang-bash">
[
    {server, [
        {cacertfile, "C:/Path/To/ca_certificate.pem"},
        {certfile, "C:/Path/To/server_certificate.pem"},
        {keyfile, "C:/Path/To/server_key.pem"},
        {secure_renegotiate, true},
        {verify, verify_peer},
        {fail_if_no_peer_cert, true}
    ]},
    {client, [
        {cacertfile, "C:/Path/To/ca_certificate.pem"},
        {certfile, "C:/Path/To/client_certificate.pem"},
        {keyfile, "C:/Path/To/client_key.pem"},
        {secure_renegotiate, true},
        {verify, verify_peer},
        {fail_if_no_peer_cert, true}
    ]}
].
</pre>
      </doc:section>
  </body>
</html>
