<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
]>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Federated Queues</title>
  </head>
  <body show-in-this-page="true">
    <doc:section name="what-does-it-do">
      <doc:heading>What do they do?</doc:heading>
      <dl>
        <dt>
          <b>What does a federated queue do?</b>
        </dt>
        <dd>
          <p>
            A federated queue links to other queues (called <i>upstream</i>
            queues). It will retrieve messages from upstream queues in order
            to satisfy demand for messages from local consumers.  The upstream
            queues do not need to be reconfigured and they do not have to be
            on the same broker or in the same cluster.
          </p>
          <p>
            All of the configuration needed to establish the upstream links
            and the federated queue is in the broker with the federated queue.
          </p>
        </dd>

        <dt>
          <b>When will it retrieve messages from the upstream queue?</b>
        </dt>
        <dd>
          <p>
            The federated queue will only retrieve messages when it has run
            out of messages locally, it has consumers that need messages, and
            the upstream queue has "spare" messages that are not being
            consumed. The intent is to ensure that messages are only
            transferred between federated queues when needed.
          </p>
        </dd>

        <dt>
          <b>How does a federated queue link to its upstream queues?</b>
        </dt>
        <dd>
          <p>
            The federated queue will connect to all its upstream queues using
            AMQP. When declaring or configuring the federated queue each
            upstream queue is listed with the connection properties to be used
            to establish the link.
          </p>
        </dd>

        <dt>
          <b>What does this mean for message ordering?</b>
        </dt>
        <dd>
          <p>
            TODO.
          </p>
        </dd>

        <dt>
          <b>Can I federate a federated queue?</b>
        </dt>
        <dd>
          <p>
            There is nothing to prevent a federated queue being 'upstream'
            from another federated queue. One can even form 'loops', for
            example, queue A declares queue B to be upstream from it, and
            queue B declares queue A to be upstream from it. More complex
            multiply-connected arrangements are allowed.
          </p>
          <p>
            However, TODO.
          </p>
        </dd>

        <dt>
          <b>What are typical uses for federated queues?</b>
        </dt>
        <dd>
          <p>
            One typical use would be to have the same "logical" queue
            distributed over many brokers. Each broker would declare a federated
            queue with all the other federated queues upstream. (The links
            would form a complete bi-directional graph on <i>n</i> queues.)
          </p>
          <p>
            TODO bipartite graph example
          </p>
        </dd>
      </dl>

      <doc:subsection name="details">
        <doc:heading>Implementation</doc:heading>
          <p>
            Inter-broker communication is implemented using AMQP (optionally
            secured with SSL). When a federated queue is empty and has active
            consumers with a <a href="consumer-priority.html">priority</a> of
            0 or greater, it consumes from all upstream queues. As soon as it
            is non-empty, or its consumers are no longer active, it stops
            consuming.
          </p>

          <p>
            Since it consumes from the upstreams with a priority of -1, each
            upstream is able to prioritise delivering messages to its "own"
            consumers before delivering to another queue. We therefore ensure
            that messages are not forwarded between federated queues
            needlessly.
          </p>

          <p>
            However, unlike with federated exchanges, there is no limit to how
            many times a message can be forwarded between federated queues. In
            a set of mutually-federated queues, messages will move to where
            the spare consuming capacity is - so if the spare consuming
            capacity keeps moving around then so will the messages.
          </p>
      </doc:subsection>
    </doc:section>
  </body>
</html>
