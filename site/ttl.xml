<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!--
Copyright (C) 2007-2015 Pivotal Software, Inc. 

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License, 
Version 2.0 (the "License”); you may not use this file except in compliance 
with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Time-To-Live Extensions</title>
  </head>
  <body show-in-this-page="true">
    <p class="intro">
      RabbitMQ allows you to set Time To Live for both messages and queues.
    </p>
    <doc:section name="per-queue-message-ttl">
      <doc:heading>Per-Queue Message TTL</doc:heading>
      <p>
        TTL can be set for a given queue by setting the
        <code>x-message-ttl</code> argument to
        <code>queue.declare</code>, or by setting the
        <code>message-ttl</code> <a
        href="parameters.html#policies">policy</a>. A message that has
        been in the queue for longer than the configured TTL is said to
        be <em>dead</em>. Note that a message routed to multiple queues
        can die at different times, or not at all, in each queue in
        which it resides. The death of a message in one queue has no
        impact on the life of the same message in other queues.
      </p>

      <p>
        The server guarantees that dead messages will not be included
        in any <code>basic.get-ok</code> or <code>basic.deliver</code>
        methods. Further, the server will try to reap messages at or
        shortly after their TTL-based expiry.
      </p>

      <p>
        The value of the TTL argument or policy must be a
        non-negative integer (0 &lt;= n),
        describing the TTL period in milliseconds. Thus a value of
        1000 means that a message added to the queue will live in the
        queue for 1 second or until it is delivered to a consumer. The
        argument can be of AMQP type short-short-int, short-int,
        long-int, or long-long-int.
      </p>

      <p>
        This example in Java creates a queue in which messages may
        reside for at most 60 seconds:
      </p>
      <pre class="sourcecode">
Map&lt;String, Object&gt; args = new HashMap&lt;String, Object&gt;();
args.put("x-message-ttl", 60000);
channel.queueDeclare("myqueue", false, false, false, args);</pre>

      <p>
        To specify a TTL using policy, add the key "message-ttl" to a
        policy definition. For example:
      </p>

      <table>
        <tr>
          <th>rabbitmqctl</th>
          <td>
            <pre>rabbitmqctl set_policy TTL ".*" '{"message-ttl":60000}' --apply-to queues</pre>
          </td>
        </tr>
        <tr>
          <th>rabbitmqctl (Windows)</th>
          <td>
            <pre>rabbitmqctl set_policy TTL ".*" "{""message-ttl"":60000}" --apply-to queues</pre>
          </td>
        </tr>
      </table>

      <p>
        This applies a TTL of 60 seconds to all queues.
      </p>

      <p>
        The original expiry time of a message is preserved if it
        is requeued (for example due to the use of an AMQP method
        that features a requeue parameter, or due to a channel
        closure).
      </p>

      <p>
        Setting the TTL to 0 causes messages to be expired upon reaching
        a queue unless they can be delivered to a consumer
        immediately. Thus this provides an alternative to
        <code>basic.publish</code>'s <code>immediate</code> flag, which
        the RabbitMQ server does not support. Unlike that flag, no
        <code>basic.return</code>s are issued, and if a dead letter
        exchange is set then messages will be dead-lettered.
      </p>

    </doc:section>
    <doc:section name="per-message-ttl">
      <doc:heading>Per-Message TTL</doc:heading>
      <p>
        A TTL can be specified on a per-message basis, by setting the
        <code>expiration</code> field in the
        <a href="amqp-0-9-1-reference.html#class.basic">
          <code>basic</code></a> AMQP class when sending a
        <a href="amqp-0-9-1-reference.html#basic.publish">
          <code>basic.publish</code></a>.
      </p>
      <p>
        The value of the <code>expiration</code> field describes the
        TTL period in milliseconds. The same constraints as for
        <code>x-message-ttl</code> apply. Since the
        <code>expiration</code> field must be a string, the broker
        will (only) accept the string representation of the number.
      </p>
      <p>
        When both a per-queue and a per-message TTL are specified, the
        lower value between the two will be chosen.
      </p>

      <p>
        This example in Java publishes a message which can reside in the queue
        for at most 60 seconds:
      </p>
      <pre class="sourcecode">
byte[] messageBodyBytes = "Hello, world!".getBytes();
AMQP.BasicProperties properties = new AMQP.BasicProperties();
properties.setExpiration("60000");
channel.basicPublish("my-exchange", "routing-key", properties, messageBodyBytes);</pre>

      <doc:subsection name="per-message-ttl-caveats">
        <doc:heading>Caveats</doc:heading>
        <p>
          While consumers never see expired messages, only when
          expired messages reach the head of a queue will they
          actually be discarded (or dead-lettered).  When setting a
          per-queue TTL this is not a problem, since expired messages
          are always at the head of the queue. When setting
          per-message TTL however, expired messages can queue up
          behind non-expired ones until the latter are consumed or
          expired. Hence resources used by such expired messages will
          not be freed, and they will be counted in queue statistics
          (e.g. the number of messages in the queue).
        </p>
      </doc:subsection>
    </doc:section>
    <doc:section name="queue-ttl">
      <doc:heading>Queue TTL</doc:heading>

      <p>
        Expiry time can be set for a given queue by setting the
        <code>x-expires</code> argument to <code>queue.declare</code>,
        or by setting the <code>expires</code> <a
        href="parameters.html#policies">policy</a>. This controls for
        how long a queue can be unused before it is automatically
        deleted. <em>Unused</em> means the queue has no consumers, the
        queue has not been redeclared, and <code>basic.get</code> has
        not been invoked for a duration of at least the expiration
        period. This can be used, for example, for RPC-style reply
        queues, where many queues can be created which may never be
        drained.
      </p>

      <p>
        The server guarantees that the queue will be deleted, if
        unused for at least the expiration period. No guarantee is
        given as to how promptly the queue will be removed after the
        expiration period has elapsed. Leases of durable queues
        restart when the server restarts.
      </p>

      <p>
        The value of the <code>x-expires</code> argument or
        <code>expires</code> policy describes the expiration period in
        milliseconds. It must be a positive integer (unlike message
        TTL it cannot be 0). Thus a value of 1000 means a queue which
        is unused for 1 second will be deleted.
      </p>

      <p>
        This example in Java creates a queue which expires after
        it has been unused for 30 minutes.
      </p>
      <pre class="sourcecode">
Map&lt;String, Object&gt; args = new HashMap&lt;String, Object&gt;();
args.put("x-expires", 1800000);
channel.queueDeclare("myqueue", false, false, false, args);</pre>

      <p>
        The following policy does the same thing for all queues:
      </p>

      <table>
        <tr>
          <th>rabbitmqctl</th>
          <td>
            <pre>rabbitmqctl set_policy expiry ".*" '{"expires":1800000}' --apply-to queues</pre>
          </td>
        </tr>
        <tr>
          <th>rabbitmqctl (Windows)</th>
          <td>
            <pre>rabbitmqctl set_policy expiry ".*" "{""expires"":1800000}" --apply-to queues</pre>
          </td>
        </tr>
      </table>
    </doc:section>
  </body>
</html>
