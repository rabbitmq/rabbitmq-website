<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2007-2015 Pivotal Software, Inc. 

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License, 
Version 2.0 (the "License”); you may not use this file except in compliance 
with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<?xml-stylesheet type="text/xml" href="page.xsl"?>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Negative Acknowledgements</title>
  </head>
  <body>
    <p>
      The AMQP specification defines the <code>basic.reject</code>
      method that allows clients to reject individual, delivered
      messages, instructing the broker to either discard them or
      requeue them. Unfortunately, <code>basic.reject</code>
      provides no support for negatively acknowledging messages in
      bulk.
    </p>

    <p>
      To solve this, RabbitMQ supports the <code>basic.nack</code>
      method that provides all the functionality of
      <code>basic.reject</code> whilst also allowing for bulk
      processing of messages.
    </p>

    <p>
      To reject messages in bulk, clients set the
      <code>multiple</code> flag of the <code>basic.nack</code>
      method to <code>true</code>. The broker will then reject all
      unacknowledged, delivered messages up to and including the
      message specified in the <code>delivery_tag</code> field of
      the <code>basic.nack</code> method. In this respect,
      <code>basic.nack</code> complements the bulk acknowledgement
      semantics of <code>basic.ack</code>.
    </p>

    <p>
      This example rejects a single message, asking the broker to requeue it:
    </p>
    <pre class="sourcecode">
GetResponse gr = channel.basicGet("some.queue", false);
channel.basicNack(gr.getEnvelope().getDeliveryTag(), false, true);</pre>
    <p>
      This example rejects two messages with a single call to
      the broker (the second argument on
      <code>basicNack</code> is the <code>multiple</code> flag):
    </p>
    <pre class="sourcecode">
GetResponse gr1 = channel.basicGet("some.queue", false);
GetResponse gr2 = channel.basicGet("some.queue", false);
channel.basicNack(gr2.getEnvelope().getDeliveryTag(), true, true);</pre>
  </body>
</html>
