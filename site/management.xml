<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
]>
<!--
Copyright (C) 2007-2015 Pivotal Software, Inc. 

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License, 
Version 2.0 (the "License”); you may not use this file except in compliance 
with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Management Plugin</title>
  </head>
  <body show-in-this-page="true">
      <doc:section name="features">
        <p>
          The rabbitmq-management plugin provides an HTTP-based API
          for management and monitoring of your RabbitMQ server, along
          with a browser-based UI and a command line tool, <a
          href="management-cli.html">rabbitmqadmin</a>. Features
          include:
        </p>
        <ul>
          <li>
            Declare, list and delete exchanges, queues, bindings,
            users, virtual hosts and permissions.
          </li>
          <li>
            Monitor queue length, message rates globally and per
            channel, data rates per connection, etc.
          </li>
          <li>
            Send and receive messages.
          </li>
          <li>
            Monitor Erlang processes, file descriptors, memory use.
          </li>
          <li>
            Export / import object definitions to JSON.
          </li>
          <li>
            Force close connections, purge queues.
          </li>
        </ul>
        <doc:subsection name="screenshots">
          <doc:heading>Screenshots</doc:heading>
          <table class="screenshots">
            <tr>
              <th>Overview</th>
              <th>Import / Export</th>
            </tr>
            <tr>
              <td>
                <a href="/img/management/overview.png">
                  <img src="/img/management/thumbs/overview.png"/>
                </a>
              </td>
              <td>
                <a href="/img/management/import-export.png">
                  <img src="/img/management/thumbs/import-export.png"/>
                </a>
              </td>
            </tr>
            <tr>
              <th>Channel List</th>
              <th>Queue Details</th>
            </tr>
            <tr>
              <td>
                <a href="/img/management/channels.png">
                  <img src="/img/management/thumbs/channels.png"/>
                </a>
              </td>
              <td>
                <a href="/img/management/queue.png">
                  <img src="/img/management/thumbs/queue.png"/>
                </a>
              </td>
            </tr>
          </table>
        </doc:subsection>
      </doc:section>

      <doc:section name="getting-started">
        <doc:heading>Getting started</doc:heading>

        <p>
          The management plugin is included in the RabbitMQ
          distribution.  To enable it, use <a
          href="man/rabbitmq-plugins.1.man.html">rabbitmq-plugins</a>:
        </p>
        <pre class="example">rabbitmq-plugins enable rabbitmq_management</pre>
        <p>
          If you wish to build the plugin from source, it can be built
          like any other. See
          the <a href="plugin-development.html">plugin development</a>
          page for more information.
        </p>

        <ul>
          <li>
            The web UI is located at:
            http://<i>server-name</i>:15672/
          </li>
          <li>
            The HTTP API and its documentation are both located at:
            http://<i>server-name</i>:15672/api/ (or view
            our <a href="https://raw.githack.com/rabbitmq/rabbitmq-management/&version-server-tag;/priv/www/api/index.html">
            latest HTTP API documentation here</a>).
          </li>
          <li>
            Download <a href="management-cli.html">rabbitmqadmin</a>
            at: http://<i>server-name</i>:15672/cli/
          </li>
        </ul>
        <p>
          NB: The port for RabbitMQ versions prior to 3.0 is 55672.
        </p>
        <p>
          To use the web UI you will need to authenticate as a
          RabbitMQ user (on a fresh installation the user "guest" is
          created with password "guest"). From here you can manage
          exchanges, queues, bindings, virtual hosts, users and
          permissions. Hopefully the UI is fairly self-explanatory.
        </p>
        <p>
          The management UI is implemented as a single static HTML
          page which makes background queries to the HTTP API. As such
          it makes heavy use of Javascript. It has been tested with
          recent versions of Firefox, Chromium and Safari, and with
          versions of Microsoft Internet Explorer back to 6.0.
        </p>
      </doc:section>

      <doc:section name="permissions">
        <doc:heading>Permissions</doc:heading>
        <p>
          The management plugin extends the existing <a
          href="access-control.html">permissions model</a> somewhat. Users can
          be given arbitrary tags within RabbitMQ. The management plugin makes
          use of tags called "management", "policymaker", "monitoring" and
          "administrator". The following table shows what the different types
          of user can do:
        </p>
        <table>
          <tr>
            <th>Tag</th>
            <th>Capabilities</th>
          </tr>
          <tr>
            <td>(None)</td>
            <td>
              No access to the management plugin
            </td>
          </tr>
          <tr>
            <td>management</td>
            <td>
              Anything the user could do via AMQP plus:
              <ul>
                <li>List virtual hosts to which they can log in via AMQP</li>
                <li>
                  View all queues, exchanges and bindings in "their"
                  virtual hosts
                </li>
                <li>View and close their own channels and connections</li>
                <li>
                  View "global" statistics covering all their
                  virtual hosts, including activity by other users
                  within them
                </li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>policymaker</td>
            <td>
              Everything "management" can plus:
              <ul>
                <li>
                  View, create and delete policies and parameters for virtual
                  hosts to which they can log in via AMQP
                </li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>monitoring</td>
            <td>
              Everything "management" can plus:
              <ul>
                <li>
                  List all virtual hosts, including ones they could
                  not log in to via AMQP
                </li>
                <li>View other users's connections and channels</li>
                <li>View node-level data such as memory use and clustering</li>
                <li>View truly global statistics for all virtual hosts</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>administrator</td>
            <td>
              Everything "policymaker" and "monitoring" can plus:
              <ul>
                <li>Create and delete virtual hosts</li>
                <li>View, create and delete users</li>
                <li>View, create and delete permissions</li>
                <li>Close other users's connections</li>
              </ul>
            </td>
          </tr>
        </table>
        <p>
          Note that since "administrator" does everything "monitoring"
          does, and "monitoring" does everything "management" does,
          you frequently only need to give each user a maximum of one tag.
        </p>
        <p>
          Normal RabbitMQ permissions still apply to monitors and
          administrators; just because a user is a monitor or
          administrator does not give them full access to exchanges,
          queues and bindings through either AMQP or the management
          plugin.
        </p>
        <p>
          All users can only list objects within a particular virtual
          host if they have any permissions for that virtual host.
        </p>
        <p>
          If you get locked out due to only having non-administrator
          users, or no users at all, you can use <a
          href="/man/rabbitmqctl.1.man.html#">rabbitmqctl add_user</a>
          to create a non-administrator user and <a
          href="/man/rabbitmqctl.1.man.html#set_user_tags">rabbitmqctl
          set_user_tags</a> to promote a user to administrator.
        </p>
      </doc:section>


      <doc:section name="http-api">
        <doc:heading>HTTP API</doc:heading>
        <p>
          The management plugin will create an HTTP-based API at
          http://<i>server-name</i>:15672/api/. Browse to that
          location for more information on the API.
          For convenience you can read the
          <a href="https://cdn.rawgit.com/rabbitmq/rabbitmq-management/&version-server-tag;/priv/www/api/index.html">
          latest HTTP API documentation</a> on GitHub.
        </p>
        <p>
          For HTTP API clients in several languages,
          see <a href="/devtools.html">Developer Tools</a>.
        </p>
      </doc:section>

      <doc:section name="configuration">
        <doc:heading>Configuration</doc:heading>
        <p>
          There are several configuration options which affect the
          management plugin. These are managed through the main
          RabbitMQ
          <a href="configure.html#configuration-file">configuration file</a>.
        </p>
        <doc:subsection name="load-definitions">
          <doc:heading>Load definitions at startup</doc:heading>
          <p>
            The management plugin lets you export a JSON file
            containing definitions of all broker objects (queues,
            exchanges, bindings, users, virtual hosts, permissions and
            parameters). In some scenarios it may be useful to ensure
            the existence of these objects at every startup.
          </p>
          <p>
            To do this, set the <code>load_definitions</code> variable
            to the path of a previously exported JSON file containing
            the definitions you want.
          </p>
          <p>
            Note that the definitions in the file will overwrite
            anything already in the broker; using this option will not
            delete anything that is already there. However, if you
            start from a completely reset broker, use of this
            option <b>will</b> prevent the usual default user /
            virtual host / permissions from being created.
          </p>
        </doc:subsection>
        <doc:subsection name="fine-stats">
          <doc:heading>Message rates</doc:heading>
          <p>
            The management plugin by default shows message rates
            globally, and for each queue, channel, exchange, and
            vhost. These are known as the <i>basic</i> message rates.
          </p>
          <p>
            It can also show message rates for all the combinations of
            channel to exchange, exchange to queue, and queue to
            channel. These are known as <i>detailed</i> message rates.
            Detailed message rates are disabled by default as they can
            have a large memory footprint when there are a large
            number of combinations of channels, queues and exchanges.
          </p>
          <p>
            Alternatively, the message rates can be disabled
            altogether. This can help get the best possible
            performance out of a CPU-bound server.
          </p>
          <p>
            The message rate mode is controlled by the
            <code>rates_mode</code> configuration variable in
            <code>rabbitmq_management</code>. This can be one of
            <code>basic</code> (the default), <code>detailed</code> or
            <code>none</code>.
          </p>
        </doc:subsection>
        <doc:subsection name="statistics-interval">
          <doc:heading>Statistics interval</doc:heading>
          <p>
            By default the server will emit statistics events every
            5000ms. The message rate values shown in the management
            plugin are calculated over this period. You may therefore
            want to increase this value in order to sample rates over
            a longer period, or to reduce the statistics load on a
            server with a very large number of queues or channels.
          </p>
          <p>
            In order to do so, set the value of
            the <code>collect_statistics_interval</code> variable for
            the <code>rabbit</code> application to the desired
            interval in milliseconds and restart RabbitMQ.
          </p>
        </doc:subsection>
        <doc:subsection name="http-logging">
          <doc:heading>HTTP request logging</doc:heading>
          <p>
            To create simple access logs of requests to the HTTP API,
            set the value of the <code>http_log_dir</code> variable in
            the <code>rabbitmq_management</code> application to the name
            of a directory in which logs can be created and restart
            RabbitMQ. Note that only requests to the API
            at <code>/api</code> are logged, not requests to the static
            files which make up the browser-based GUI.
          </p>
        </doc:subsection>
        <doc:subsection name="example-config">
          <doc:heading>Example</doc:heading>
          <p>
            An example configuration file for RabbitMQ that switches
            on request logging, increases the statistics interval to
            10000ms and explicitly sets some other relevant parameters
            to their default values, would look like this:
          </p>
          <pre class="example">[
  {rabbit,                    [ {tcp_listeners,               [5672]},
                                {collect_statistics_interval, 10000} ] },
  {rabbitmq_management,       [ {http_log_dir,  "/tmp/rabbit-mgmt"},
                                {rates_mode,    basic}] }
].</pre>
        </doc:subsection>
        <doc:subsection name="mochiweb-config">
          <doc:heading>Configuring the HTTP listener</doc:heading>
          <p>
            It is possible to configure rabbitmq-mochiweb to serve the
            management plugin on a different port or network
            interface, with SSL, etc. To do so, you should configure the
            <code>listener</code> configuration item; for example to
            change the port:
          </p>
          <pre class="example">[
  ...
  {rabbitmq_management, [{listener, [{port, 12345}]}]},
  ...
].</pre>

          <p>
            or to make the management plugin use HTTPS:
          </p>
          <pre class="example">
[{rabbitmq_management,
  [{listener, [{port,     15671},
               {ssl,      true},
               {ssl_opts, [{cacertfile, "/path/to/cacert.pem"},
                           {certfile,   "/path/to/cert.pem"},
                           {keyfile,    "/path/to/key.pem"}]}
              ]}
  ]}
].</pre>
          <p>
            See the <a href="mochiweb.html">rabbitmq-mochiweb</a>
            guide for more details.
          </p>
        </doc:subsection>

        <doc:subsection name="sample-retention">
          <doc:heading>Sample retention policies</doc:heading>
          <p>
            The management plugin will retain samples of some data
            such as message rates and queue lengths. You can
            configure how long such data is retained.
          </p>
          <pre class="example">[
  ...
  {rabbitmq_management, 
    %% List of {MaxAgeInSeconds, SampleEveryNSeconds}
    [{global,   [{605, 5}, {3660, 60}, {29400, 600}, {86400, 1800}]},
     {basic,    [{605, 5}, {3600, 60}]},
     {detailed, [{10, 5}]}],
  ...
].</pre>
          <p>
            There are three policies:
            <ul>
              <li><code>global</code> - how long to retain data for the overview and virtual host pages</li>
              <li><code>basic</code> - how long to retain data for individual connections, channels, exchanges and queues</li>
              <li><code>detailed</code> - how long to retain data for message rates between pairs of connections, channels, exchanges and queues (as shown under "Message rates breakdown")</li>
            </ul>

            This configuration (which is the default) retains global
            data at a 5 second resolution (sampling happens every 5 seconds) for 10 minutes and 5 seconds,
            then at a 1 minute resolution for 1 hour and 1 minute, then at a 10 minute
            resolution for about 8 hours. It retains basic data at a 5 second
            resolution for 1 minute and 5 seconds, then at a 1 minute resolution for
            1 hour, and detailed data only for 10 seconds.
          </p>
        </doc:subsection>

      </doc:section>

      <doc:section name="clustering">
        <doc:heading>Note on clustering</doc:heading>
        <p>
          The management plugin is aware of clusters. You can enable
          it on one or more nodes in a cluster, and see information
          pertaining to the entire cluster no matter which node you
          connect to.
        </p>
        <p>
          If you want to deploy cluster nodes which do not have the
          full management plugin enabled, you will still need to
          enable the <code>rabbitmq-management-agent</code> plugin on
          each node.
        </p>
      </doc:section>

      <doc:section name="proxy">
        <doc:heading>Proxy setup</doc:heading>
        <p>
          It is possible to make the web UI available via any proxy that
          conforms with RFC 1738. The following sample Apache configuration
          illustrates the minimum necessary directives to coax Apache into
          conformance. It assumes a management web UI on the default port of 15672:
          <pre class="example">
AllowEncodedSlashes On
ProxyPass        /api http://localhost:15672/api nocanon
ProxyPass        /    http://localhost:15672/
ProxyPassReverse /    http://localhost:15672/</pre>
        </p>
      </doc:section>
  </body>
</html>
