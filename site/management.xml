<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
]>
<!--
Copyright (c) 2007-2019 Pivotal Software, Inc.

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License,
Version 2.0 (the "License”); you may not use this file except in compliance
with the License. You may obtain a copy of the License at

https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Management Plugin</title>
  </head>
  <body show-in-this-page="true">
      <doc:section name="intro">
        <doc:heading>Introduction</doc:heading>
        <p>
          The RabbitMQ management plugin provides an HTTP-based API
          for management and monitoring of RabbitMQ nodes and clusters, along
          with a browser-based UI and a command line tool, <a
          href="management-cli.html">rabbitmqadmin</a>.
        </p>

        <p>
          It periodically collects and aggregates data about many aspects of the system. Those metrics
          are exposed to both operators in the UI and <a href="/monitoring.html">monitoring systems</a> for
          long term storage, alerting, visualisation, chart analysis and so on.
        </p>

        <p>
          The plugin can be <a href="#configuration">configured</a> to <a href="#single-listener-https">use HTTPS</a>,
          a non-standard port, path prefix, HTTP server options, custom <a href="#hsts">strict transport security</a> settings,
          <a href="#cors">cross-origin resource sharing</a>, and more.
        </p>

        <p>
          It also provides tools for <a href="#memory">analyse memory usage</a> of the node,
          for <a href="#load-definitions">preconfiguring the node</a> using an exported schema definitions file, and a few
          other features related to monitoring, metrics and node management.
        </p>

        <p>
          In a multi-node cluster, management plugin is most commonly <a href="#clustering">enabled on every node</a>.
        </p>

        <p>
          The plugin also provides extension points that other plugins, such as
          <a href="https://github.com/rabbitmq/rabbitmq-top">rabbitmq-top</a> or
          <a href="https://github.com/rabbitmq/rabbitmq-shovel-management">rabbitmq-shovel-management</a>
          use to extend the UI.
        </p>
      </doc:section>

      <doc:section name="getting-started">
        <doc:heading>Getting Started</doc:heading>

        <p>
          The management plugin is included in the RabbitMQ
          distribution. Like any other <a href="/plugins.html">plugin</a>, it must
          be enabled before it can be used. That's done using <a
          href="man/rabbitmq-plugins.8.html">rabbitmq-plugins</a>:

<pre class="lang-bash">
rabbitmq-plugins enable rabbitmq_management
</pre>

          Node restart is not required after plugin activation.
        </p>

        <p>
          During automated deployments, the plugin can be enabled via
          <a href="/plugins.html#enabled-plugins-file">enabled plugin file</a>.
        </p>
      </doc:section>

      <doc:section name="usage">
        <doc:heading>Usage</doc:heading>

        <doc:subsection name="usage-ui">
          <doc:heading>Management UI Access</doc:heading>
          <p>
            The management UI can be accessed using a Web browser at <code>http://<i>{node-hostname}</i>:15672/</code>. For example,
            for a node running on a machine with the hostname of <code>warp10.local</code>,
            it can be accessed at either <code>http://warp10.local:15672/</code>
            or <code>http://localhost:15672/</code> (provided that <code>localhost</code> resolves correctly).
          </p>

          <p>
            Note that the UI and HTTP API port — typically 15672 — does not support AMQP 0-9-1, AMQP 1.0, STOMP or MQTT connections.
            <a href="/networking.html#ports">Separate ports</a> should be used by those clients.
          </p>

          <p>
            Users must be <a href="#permissions">granted permissions</a> for management UI access.
          </p>
        </doc:subsection>

        <doc:subsection name="usage-highlights">
          <doc:heading>Notable Features</doc:heading>
          <p>
            The management UI is implemented as a single page application which relies on the the <a href="#http-api">HTTP API</a>.
            Some of the features include:

            <ul>
              <li>
                Declare, list and delete exchanges, <a href="/queues.html">queues</a>, bindings,
                users, <a href="/vhosts.html">virtual hosts</a> and <a href="/access-control.html">user permissions</a>.
              </li>
              <li>
                Monitor queue length, message rates (globally and per
                queue, exchange or channel), resource usage of queue,
                node GC activity, data rates of client connections, and more.
              </li>
              <li>
                Monitor node resource use: <a href="/networking.html#open-file-handle-limit">sockets and file descriptors</a>,
                <a href="/memory-use.html">memory usage breakdown</a>, available disk space and bandwidth usage on inter-node communication
                links.
              </li>
              <li>
                Manage users (provided administrative permissions of the current user).
              </li>
              <li>
                Manage <a href="/parameters.html">policies and runtime parameters</a> (provided sufficient permissions of the current user).
              </li>
              <li>
                <a href="/backup.html">Export schema</a> (vhosts, users,
                permissions, queues, exchanges, bindings, parameters,
                policies) and <a href="#load-definitions">import it on node start</a>. This can be used for <a href="/backup.html">recovery
                purposes</a> or setup automation of new nodes and clusters.
              </li>
              <li>
                Force close client connections, purge queues.
              </li>
              <li>
                Send and receive messages (useful in development environments
                and for troubleshooting).
              </li>
            </ul>
          </p>

          <p>
            The UI application supports recent versions of Google Chrome Safari, Firefox, and Microsoft Edge browsers.
          </p>
        </doc:subsection>

        <doc:subsection name="usage-ui-clusters">
          <doc:heading>Management UI Access in Clusters</doc:heading>
          <p>
            Any cluster node with <code>rabbitmq-management</code> plugin enabled can be
            used for management UI access or data collection by monitoring tools.
            It will reach out to other nodes and collect their stats, then aggregate and return a response
            to the client.
          </p>
        </doc:subsection>

        <p>
          To access management UI the user has to authenticate and have certain permissions (be authorised).
          This is covered in the <a href="#permissions">following section</a>.
        </p>
      </doc:section>

      <doc:section name="permissions">
        <doc:heading>Access and Permissions</doc:heading>
        <p>
          The management UI requires  <a
          href="access-control.html">authentication and authorisation</a>, much like RabbitMQ requires
          it from connecting clients. In addition to successful authentication, management UI access
          is controlled by user tags. The tags are managed using <a href="/rabbitmqctl.8.html#set_user_tags">rabbitmqctl</a>.
          Newly created users do not have any tags set on them by default.
        </p>
        <table>
          <tr>
            <th>Tag</th>
            <th>Capabilities</th>
          </tr>
          <tr>
            <td>(None)</td>
            <td>
              No access to the management plugin
            </td>
          </tr>
          <tr>
            <td>management</td>
            <td>
              Anything the user could do via messaging protocols plus:
              <ul>
                <li>List virtual hosts to which they can log in via AMQP</li>
                <li>
                  View all queues, exchanges and bindings in "their"
                  virtual hosts
                </li>
                <li>View and close their own channels and connections</li>
                <li>
                  View "global" statistics covering all their
                  virtual hosts, including activity by other users
                  within them
                </li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>policymaker</td>
            <td>
              Everything "management" can plus:
              <ul>
                <li>
                  View, create and delete policies and parameters for virtual
                  hosts to which they can log in via AMQP
                </li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>monitoring</td>
            <td>
              Everything "management" can plus:
              <ul>
                <li>
                  List all virtual hosts, including ones they could
                  not access using messaging protocols
                </li>
                <li>View other users's connections and channels</li>
                <li>View node-level data such as memory use and clustering</li>
                <li>View truly global statistics for all virtual hosts</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>administrator</td>
            <td>
              Everything "policymaker" and "monitoring" can plus:
              <ul>
                <li>Create and delete virtual hosts</li>
                <li>View, create and delete users</li>
                <li>View, create and delete permissions</li>
                <li>Close other users's connections</li>
              </ul>
            </td>
          </tr>
        </table>
        <p>
          Note that since "administrator" does everything "monitoring"
          does, and "monitoring" does everything "management" does,
          each user often needs a maximum of one tag.
        </p>
        <p>
          Normal RabbitMQ <a href="/access-control.html">permissions to resources</a> still apply to monitors and
          administrators; just because a user is a monitor or
          administrator does not grant them full access to exchanges,
          queues and bindings through the management
          plugin or other means.
        </p>
        <p>
          All users can only list objects within the virtual
          hosts they have any permissions for.
        </p>
        <p>
          If access to management UI is impossible to due the lack of users
          with sufficient permissions or forgotten/incorrect permissions, <a href="/cli.html">CLI tools</a> must
          be used to manage the users and their credentials. <a href="/man/rabbitmqctl.8.html#">rabbitmqctl add_user</a>
          should be used to create a user, <a href="/man/rabbitmqctl.8.html#">rabbitmqctl set_permissions</a> to grant the
          user the desired permissions and finally, <a href="/man/rabbitmqctl.8.html#set_user_tags">rabbitmqctl
          set_user_tags</a> should be used to give the user management UI access permissions.
        </p>
      </doc:section>

      <doc:section name="http-api">
        <doc:heading>HTTP API</doc:heading>

        <doc:subsection name="http-api-endpoints">
          <doc:heading>API Endpoints</doc:heading>
          <p>
            When activated, the management plugin provides an HTTP API at
            <code>http://<i>server-name</i>:15672/api/</code> by default. Browse to that
            location for more information on the API. For convenience the same API reference is
            <a href="https://cdn.rawgit.com/rabbitmq/rabbitmq-management/&version-server-tag;/priv/www/api/index.html">
            available from GitHub</a>.
          </p>
        </doc:subsection>

        <doc:subsection name="http-api-monitoring">
          <doc:heading>HTTP API and Monitoring</doc:heading>
          <p>
            The API is intended to be used for monitoring and alerting purposes. It provides
            access to detailed information about the state of nodes, connections, channels, queues,
            consumers, and so on.
          </p>

          <p>
            Any cluster node with <code>rabbitmq-management</code> plugin enabled can be
            used for management UI access or data collection by monitoring tools.
            It will reach out to other nodes and collect their stats, then aggregate and return a response
            to the client.
          </p>
          <p>
            When monitoring a cluster of nodes, there is no need to contact each node via HTTP API
            individually. Instead, contact a random node or a load balancer that sits in front
            of the cluster.
          </p>
        </doc:subsection>

        <doc:subsection name="http-api-clients">
          <doc:heading>HTTP API Clients and Tooling</doc:heading>

          <p>
            <a href="management-cli.html">rabbitmqadmin</a> is a Python command  line tool
            that interacts with the HTTP API. It can be downloaded from any RabbitMQ node that
            has the management plugin enabled at <code>http://<i>{node-hostname}</i>:15672/cli/</code>.
          </p>

          <p>
            For HTTP API clients in several languages,
            see <a href="/devtools.html">Developer Tools</a>.
          </p>
        </doc:subsection>

        <p>
          Some API endpoints return a lot of information. The volume can be reduced
          by filtering what columns are returned by `HTTP GET` requests. See
          <a href="https://cdn.rawgit.com/rabbitmq/rabbitmq-management/&version-server-tag;/priv/www/api/index.html">
          latest HTTP API documentation</a> for details.
        </p>
      </doc:section>


      <doc:section name="configuration">
        <doc:heading>Configuration</doc:heading>
        <p>
          There are several configuration options which affect the
          management plugin. These are managed through the main
          RabbitMQ <a href="configure.html#configuration-file">configuration file</a>.
        </p>

        <p>
          It is possible to configure HTTP API and management UI to
          use a different port or network interface, enable HTTPS
          and so on.
        </p>

        <p>
          While rarely needed, it is possible to configure multiple listeners (ports), e.g. to both enable HTTPS and
          retain support for clients that can only use HTTP (without TLS). This uses an alternative
          set of configuration keys and available starting with RabbitMQ 3.7.9.
        </p>

        <doc:subsection name="single-listener-port">
          <doc:heading>Port</doc:heading>
          <p>
            The port is configured using the <code>management.listener.port</code> key:
          </p>
<pre class="lang-ini">
management.listener.port = 15672
</pre>

        Or, using the <a href="/configure.html#erlang-term-config-file">classic config format</a>:

<pre class="lang-erlang">
[
  {rabbitmq_management, [{listener, [{port, 15672}]}]},
].
</pre>
        </doc:subsection>

        <doc:subsection name="single-listener-https">
          <doc:heading>HTTPS</doc:heading>

          <p>
            The management plugin can be configured to use HTTPS. See the guide <a href="/ssl.html">on TLS</a>
            to learn more about certificate authorities, certificates and private key files.

<pre class="lang-ini">
management.ssl.port       = 15671
management.ssl.cacertfile = /path/to/ca_certificate.pem
management.ssl.certfile   = /path/to/server_certificate.pem
management.ssl.keyfile    = /path/to/server_key.pem
</pre>
          </p>


          <p>
            HTTP listener can also be configured using the <a href="/configure.html#erlang-term-config-file">classic config format</a>:

<pre class="lang-erlang">
[{rabbitmq_management,
  [{listener, [{port,     15671},
               {ssl,      true},
               {ssl_opts, [{cacertfile, "/path/to/cacert.pem"},
                           {certfile,   "/path/to/cert.pem"},
                           {keyfile,    "/path/to/key.pem"}]}
              ]}
  ]}
].</pre>
          </p>

          <p>
            More <a href="/ssl.html">TLS options</a> can be configured for the HTTPS listener. In new
            style config format they are available as of RabbitMQ 3.7.10:

<pre class="lang-ini">
management.ssl.port       = 15671
management.ssl.cacertfile = /path/to/ca_certificate.pem
management.ssl.certfile   = /path/to/server_certificate.pem
management.ssl.keyfile    = /path/to/server_key.pem

# For RabbitMQ 3.7.10 and later versions
management.ssl.honor_cipher_order   = true
management.ssl.honor_ecc_order      = true
management.ssl.client_renegotiation = false
management.ssl.secure_renegotiate   = true

management.ssl.versions.1 = tlsv1.2
management.ssl.versions.2 = tlsv1.1

management.ssl.ciphers.1 = ECDHE-ECDSA-AES256-GCM-SHA384
management.ssl.ciphers.2 = ECDHE-RSA-AES256-GCM-SHA384
management.ssl.ciphers.3 = ECDHE-ECDSA-AES256-SHA384
management.ssl.ciphers.4 = ECDHE-RSA-AES256-SHA384
management.ssl.ciphers.5 = ECDH-ECDSA-AES256-GCM-SHA384
management.ssl.ciphers.6 = ECDH-RSA-AES256-GCM-SHA384
management.ssl.ciphers.7 = ECDH-ECDSA-AES256-SHA384
management.ssl.ciphers.8 = ECDH-RSA-AES256-SHA384
management.ssl.ciphers.9 = DHE-RSA-AES256-GCM-SHA384
</pre>
          </p>


          <p>
            The above example in the <a href="/configure.html#erlang-term-config-file">classic config format</a>:

<pre class="lang-erlang">
  [
   {rabbitmq_management,
    [
     {listener, [{port,     15671},
                 {ssl,      true},
                 {ssl_opts, [{cacertfile, "/path/to/ca_certificate_bundle.pem"},
                             {certfile,   "/path/to/server_certificate.pem"},
                             {keyfile,    "/path/to/server_key.pem"},

                             %% don't do peer verification to HTTPS clients
                             {verify,               verify_none},
                             {fail_if_no_peer_cert, false},

                             {client_renegotiation, false},
                             {secure_renegotiate,   true},
                             {honor_ecc_order,      true},
                             {honor_cipher_order,   true},

                             {versions,['tlsv1.1', 'tlsv1.2']},
                             {ciphers, ["ECDHE-ECDSA-AES256-GCM-SHA384",
                                        "ECDHE-RSA-AES256-GCM-SHA384",
                                        "ECDHE-ECDSA-AES256-SHA384",
                                        "ECDHE-RSA-AES256-SHA384",
                                        "ECDH-ECDSA-AES256-GCM-SHA384",
                                        "ECDH-RSA-AES256-GCM-SHA384",
                                        "ECDH-ECDSA-AES256-SHA384",
                                        "ECDH-RSA-AES256-SHA384",
                                        "DHE-RSA-AES256-GCM-SHA384"
                                        ]}
                             ]}
                ]}
    ]}
  ].

</pre>
          </p>
        </doc:subsection>


        <doc:subsection name="multiple-listeners">
          <doc:heading>Using HTTP and HTTPS Together</doc:heading>

          <p>
            As of RabbitMQ 3.7.9 it is possible to use both HTTP and HTTPS on different ports:

<pre class="lang-ini">
management.tcp.port       = 15672

management.ssl.port       = 15671
management.ssl.cacertfile = /path/to/cacert.pem
management.ssl.certfile   = /path/to/cert.pem
management.ssl.keyfile    = /path/to/key.pem
</pre>
          </p>

          <p>
            The same configuration keys can be used to configure a single listener (just HTTP or HTTPS)
            and match those used by the <a href="/web-stomp.html">Web STOMP</a> and <a href="/web-mqtt.html">Web MQTT</a>.
          </p>
        </doc:subsection>


        <doc:subsection name="advanced-options">
          <doc:heading>Advanced HTTP Options</doc:heading>

          <p>
            <a href="https://github.com/ninenines/cowboy">Cowboy</a>, the embedded Web server used by
            the management plugin, provides a number of options that can be used to customize the behavior of the server.
            Most of the options were introduced in RabbitMQ 3.7.9.
          </p>

          <h4>Response Compression</h4>
          <p>
            Response compression is enabled by default. To enable it explicitly, use <code>management.tcp.compress</code>
            (RabbitMQ 3.7.9 or later) or <code>management.listener.server.compress</code>:

<pre class="lang-ini">
# For RabbitMQ 3.7.9 and later versions
management.tcp.compress = true
</pre>

<pre class="lang-ini">
# For versions older than 3.7.9
management.listener.server.compress = true
</pre>

            Using the classic config format:

<pre class="lang-erlang">
%% For RabbitMQ 3.7.9 and later versions
[{rabbitmq_management,
  [{tcp_config, [{port,        15672},
                 {cowboy_opts, [{compress, true}]}
                ]}
  ]}
].
</pre>
          </p>

          <h4>Client Inactivity Timeouts</h4>
          <p>
            Some HTTP API endpoints respond quickly, others may need to return or stream
            a sizeable data set to the client (e.g. many thousands of connections) or perform
            an operation that takes time proportionally to the input (e.g. <a href="http://www.rabbitmq.com/management.html#load-definitions">import a large definitions file</a>).
            In those cases the amount of time it takes to process the request can exceed certain
            timeouts in the Web server as well as HTTP client.

            It is possible to bump Cowboy timeouts using the <code>management.tcp.idle_timeout</code>,
            <code>management.tcp.inactivity_timeout</code>, <code>management.tcp.request_timeout</code> options:

<pre class="lang-ini">
# For RabbitMQ 3.7.9 and later versions.
#
# Configures HTTP (non-encrypted) listener,
# sets all types of timeouts to 120 seconds
management.tcp.idle_timeout       = 120000
management.tcp.inactivity_timeout = 120000
management.tcp.request_timeout    = 120000
</pre>

<pre class="lang-ini">
# For RabbitMQ 3.7.9 and later versions.
#
# Configures HTTPS (TLS-enabled) listener,
# sets all types of timeouts to 120 seconds
management.ssl.idle_timeout       = 120000
management.ssl.inactivity_timeout = 120000
management.ssl.request_timeout    = 120000
</pre>

            In the classic config format:

<pre class="lang-erlang">
%% For RabbitMQ 3.7.9 and later versions.
%%
%% Configures HTTP (non-encrypted) listener,
%% sets all types of timeouts to 120 seconds
[{rabbitmq_management,
  [{tcp_config, [{port,        15672},
                 {cowboy_opts, [{idle_timeout,      120000},
                                {inactivity_timeout,120000},
                                {request_timeout,   120000}]}
                ]}
  ]}
].
</pre>

<pre class="lang-erlang">
%% For RabbitMQ 3.7.9 and later versions.
%%
%% Configures HTTPS (TLS-enabled) listener,
%% sets all types of timeouts to 120 seconds
[{rabbitmq_management,
  [{ssl_config, [{port,        15672},
                 {cowboy_opts, [{idle_timeout,      120000},
                                {inactivity_timeout,120000},
                                {request_timeout,   120000}]}
                ]}
  ]}
].
</pre>

          All values are in milliseconds and default to `60000` (1 minute). It is recommended that
          if timeouts need to be changed, all of them are increased at the same time.
        </p>
        </doc:subsection>


        <doc:subsection name="http-logging">
          <doc:heading>HTTP Request Logging</doc:heading>
          <p>
            To create simple access logs of requests to the HTTP API,
            set the value of the <code>http_log_dir</code> variable in
            the <code>rabbitmq_management</code> application to the name
            of a directory in which logs can be created and restart
            RabbitMQ.
          </p>
<pre class="lang-ini">
management.http_log_dir = /path/to/folder
</pre>
          <p>
            Or using the <a href="/configure.html#erlang-term-config-file">classic config format</a>:
          </p>
<pre class="lang-erlang">
[
  {rabbitmq_management, [{http_log_dir, "/path/to/folder"}]}
].
</pre>
        </doc:subsection>

        <doc:subsection name="statistics-interval">
          <doc:heading>Statistics Interval</doc:heading>
          <p>
            By default the server will emit statistics events every
            5000ms. The message rate values shown in the management
            plugin are calculated over this period. You may therefore
            want to increase this value in order to sample rates over
            a longer period, or to reduce the statistics load on a
            server with a very large number of queues or channels.
          </p>
          <p>
            In order to do so, set the value of
            the <code>collect_statistics_interval</code> variable for
            the <code>rabbit</code> application to the desired
            interval in milliseconds and restart RabbitMQ.
          </p>
        </doc:subsection>

        <doc:subsection name="fine-stats">
          <doc:heading>Message Rates</doc:heading>
          <p>
            The management plugin by default shows message rates
            globally, and for each queue, channel, exchange, and
            vhost. These are known as the <i>basic</i> message rates.
          </p>
          <p>
            It can also show message rates for all the combinations of
            channel to exchange, exchange to queue, and queue to
            channel. These are known as <i>detailed</i> message rates.
            Detailed message rates are disabled by default as they can
            have a large memory footprint when there are a large
            number of combinations of channels, queues and exchanges.
          </p>
          <p>
            Alternatively, the message rates can be disabled
            altogether. This can help get the best possible
            performance out of a CPU-bound server.
          </p>
          <p>
            The message rate mode is controlled by the
            <code>rates_mode</code> configuration variable in
            <code>rabbitmq_management</code>. This can be one of
            <code>basic</code> (the default), <code>detailed</code> or
            <code>none</code>.
          </p>
        </doc:subsection>


        <doc:subsection name="max-backlog">
          <doc:heading>Event Backlog</doc:heading>
          <p>
            Under heavy load, the processing of statistics events can
            increase the memory consumption. To reduce this,
            the maximum backlog size of the channel and queue statistics
            collectors can be regulated. The value of the
            <code>stats_event_max_backlog</code> variable in
            the <code>rabbitmq_management</code> application sets
            the maximum size of both backlogs. Defaults to 250.
          </p>
        </doc:subsection>

        <doc:subsection name="sample-retention">
          <doc:heading>Sample (Data Point) Retention</doc:heading>
          <p>
            The management plugin will retain samples of some data
            such as message rates and queue lengths. Depending on how long the
            data is retained, some time
            range options on UI charts may be incomplete or unavailable.
          </p>
          <p>
            There are three policies:

            <ul>
              <li><code>global</code>: how long to retain data for the overview and virtual host pages</li>
              <li><code>basic</code>: how long to retain data for individual connections, channels, exchanges and queues</li>
              <li><code>detailed</code>: how long to retain data for message rates between pairs of connections, channels, exchanges and queues (as shown under "Message rates breakdown")</li>
            </ul>

            Below is a configuration example:

            <pre class="lang-ini">
management.sample_retention_policies.global.minute  = 5
management.sample_retention_policies.global.hour    = 60
management.sample_retention_policies.global.day = 1200

management.sample_retention_policies.basic.minute = 5
management.sample_retention_policies.basic.hour   = 60

management.sample_retention_policies.detailed.10 = 5
            </pre>
          </p>

          <p>
            The configuration in the example above retains global
            data at a 5 second resolution (sampling happens every 5 seconds) for a minute,
            then at a 1 minute (60 second) resolution for 1 hour, then at a 20 minute
            resolution for one day. It retains basic data at a 5 second
            resolution for 1 minute, at a 1 minute (60 second) resolution for
            1 hour, and detailed data only for 10 seconds.
          </p>

          <p>
            All three policies are mandatory, and must contain
            at least one retention setting (period).
          </p>
        </doc:subsection>


        <doc:subsection name="csp">
          <doc:heading>Content Security Policy (CSP)</doc:heading>
          <p>
            It is possible to configure what <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP">CSP header</a> value
            is used by HTTP API responses. The default value is <code>default-src 'self'</code>:

<pre class="lang-ini">
management.csp.policy = default-src 'self'
</pre>
          </p>

          <p>
            The value can be any valid CSP header string:

<pre class="lang-ini">
management.csp.policy = default-src https://rabbitmq.eng.example.local
</pre>

        In the <a href="/configure.html#erlang-term-config-file">classic config format</a>:

<pre class="lang-erlang">
{rabbitmq_management, [
  {content_security_policy,
    "management.csp.policy = default-src https://rabbitmq.eng.example.local"}
]}.</pre>
        </p>

        <p>
          Wildcards are also allowed:

<pre class="lang-ini">
management.csp.policy = default-src 'self' *.eng.example.local
</pre>

          In the <a href="/configure.html#erlang-term-config-file">classic config format</a>:

<pre class="lang-erlang">
{rabbitmq_management, [
  {content_security_policy,
    "management.csp.policy = default-src 'self' *.eng.example.local"}
]}.</pre>
        </p>
        </doc:subsection>


        <doc:subsection name="hsts">
          <doc:heading>Strict Transport Security (HSTS)</doc:heading>
          <p>
            It is possible to configure what <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security">Strict Transport Security header</a> value
            is used by HTTP API responses:

<pre class="lang-ini">
management.hsts.policy = max-age=31536000; includeSubDomains
</pre>

            In the <a href="/configure.html#erlang-term-config-file">classic config format</a>:

<pre class="lang-erlang">
rabbitmq_management, [
  {strict_transport_security, "max-age=31536000; includeSubDomains"}
]}.</pre>
          </p>
        </doc:subsection>


        <doc:subsection name="cors">
          <doc:heading>Cross-origin Resource Sharing (CORS)</doc:heading>
          <p>
            The management UI application will by default refuse access to
            websites hosted on origins different from its own using the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">Cross-Origin Resource Sharing</a> mechanism,
            also known as CORS. It is possible to white list origins:
          </p>

<pre class="lang-ini">
management.cors.allow_origins.1 = https://origin1.org
management.cors.allow_origins.2 = https://origin2.org
</pre>

        In the <a href="/configure.html#erlang-term-config-file">classic config format</a>:

<pre class="lang-erlang">
[
  {rabbitmq_management,
    [{cors_allow_origins, ["https://origin1.org", "https://origin2.org"]}]},
].</pre>
        <p>
          It is possible to allow any origin to use the API using a wildcard.
          This is <strong>highly discouraged</strong> for deployments where the UI
          application may be exposed to the public.

<pre class="lang-ini">
management.cors.allow_origins.1 = *
</pre>

        In the <a href="/configure.html#erlang-term-config-file">classic config format</a>:

<pre class="lang-erlang">
[
  {rabbitmq_management,
    [{cors_allow_origins, ["*"]}]},
].</pre>
        </p>

        <p>
          The CORS pre-flight requests are cached by the browser.
          The management plugin defines a timeout of 30 minutes
          by default. The value can be changes. It is configured in seconds:

<pre class="lang-ini">
management.cors.allow_origins.1 = https://origin1.org
management.cors.allow_origins.2 = https://origin2.org
management.cors.max_age         = 3600
</pre>

          In the <a href="/configure.html#erlang-term-config-file">classic config format</a>:

<pre class="lang-erlang">
[
  {rabbitmq_management,
    [{cors_allow_origins, ["https://origin1.org", "https://origin2.org"]},
     {cors_max_age, 3600}]},
].</pre>
        </p>
      </doc:subsection>

        <doc:subsection name="login-session-timeout">
          <doc:heading>Login Session Timeout</doc:heading>
          <p>
            After the user logs in, her web UI login session will expire after 8 hours by default.
            It is possible to configure a different timeout using the
            <code>login_session_timeout</code> setting.
          </p>
          <p>
            The value should be an integer: it controls the length of login
            session in minutes. When the time is up, the user will be signed out.
          </p>
          <p>
            The following example sets the session timeout to 1 hour:
          </p>
<pre class="lang-ini">
management.login_session_timeout = 60
</pre>

          Or, using the <a href="/configure.html#erlang-term-config-file">classic config format</a>:

<pre class="lang-erlang">[
  %% ...
  {rabbitmq_management,
    [{login_session_timeout, 60}]},
  %% ...
].</pre>
        </doc:subsection>


        <doc:subsection name="path-prefix">
          <doc:heading>Path Prefix</doc:heading>
          <p>
            Some environments require the use of a custom prefix for
            all HTTP requests to the management plugin. The
            <code>path_prefix</code> setting allows an arbitrary
            prefix to be set for all HTTP request handlers in the
            management plugin.
          </p>
          <p>
            Setting <code>path_prefix</code> to <code>/my-prefix</code>
            specifies all API requests to use the URI
            <code>host:port/my-prefix/api/[...]</code>
          </p>
          <p>
            The management UI login page will have the URI
            <code>host:port/my-prefix/</code> - note that the
            trailing slash is <em>required</em> in this case.
          </p>
          <pre class="lang-erlang">[
  %% ...
  {rabbitmq_management,
    [{path_prefix, "/my-prefix"}]},
  %% ...
].</pre>
        </doc:subsection>

      <doc:subsection name="example-config">
        <doc:heading>Example</doc:heading>
        <p>
          An example configuration file for RabbitMQ that switches
          on request logging, increases the statistics interval to
          10 seconds and explicitly sets some other relevant parameters
          to their default values, would look like this:
        </p>
        <pre class="lang-ini">
listeners.tcp.default = 5672

collect_statistics_interval = 10000

# management.load_definitions = /path/to/exported/definitions.json

management.listener.port = 15672
management.listener.ip   = 0.0.0.0
management.listener.ssl  = true

management.listener.ssl_opts.cacertfile = /path/to/cacert.pem
management.listener.ssl_opts.certfile   = /path/to/cert.pem
management.listener.ssl_opts.keyfile    = /path/to/key.pem

management.http_log_dir = /path/to/rabbit/logs/http

management.rates_mode = basic

# Configure how long aggregated data (such as message rates and queue
# lengths) is retained.
# Your can use 'minute', 'hour' and 'day' keys or integer key (in seconds)
management.sample_retention_policies.global.minute    = 5
management.sample_retention_policies.global.hour  = 60
management.sample_retention_policies.global.day = 1200

management.sample_retention_policies.basic.minute   = 5
management.sample_retention_policies.basic.hour = 60

management.sample_retention_policies.detailed.10 = 5
</pre>

        Or, using the <a href="/configure.html#erlang-term-config-file">classic config format</a>:

        <pre class="lang-erlang">[
{rabbit, [{tcp_listeners,               [5672]},
          {collect_statistics_interval, 10000}]},

{rabbitmq_management,
  [
   %% Pre-Load schema definitions from the following JSON file.
   %%
   %% {load_definitions, "/path/to/definitions.json"},

   %% Log all requests to the management HTTP API to a directory.
   %%
   {http_log_dir, "/path/to/rabbit/logs/http"},

   %% Change the port on which the HTTP listener listens,
   %% specifying an interface for the HTTP server to bind to.
   %% Also set the listener to use TLS and provide TLS options.
   %%
   %% {listener, [{port,     15672},
   %%             {ip,       "0.0.0.0"},
   %%             {ssl,      true},
   %%             {ssl_opts, [{cacertfile, "/path/to/cacert.pem"},
   %%                         {certfile,   "/path/to/cert.pem"},
   %%                         {keyfile,    "/path/to/key.pem"}]}]},

   %% One of 'basic', 'detailed' or 'none'.
   {rates_mode, basic},

   %% increasing this parameter will make HTTP API cache data retrieved
   %% from other cluster peers more aggressively
   %% {management_db_cache_multiplier, 5},

   %% If event collection falls back behind stats emission,
   %% up to this many events will be kept in the backlog, the rest
   %% will be dropped to avoid runaway memory consumption growth.
   %% This setting is per-node. Unless there is evidence of
   %% a stats collector backlog, you don't need to change this value.
   %% {stats_event_max_backlog, 250},

   %% CORS settings for HTTP API
   %% {cors_allow_origins, ["https://rabbitmq.eng.megacorp.local", "https://monitoring.eng.megacorp.local"]},
   %% {cors_max_age, 1800},

   %% Configure how long aggregated data (such as message rates and queue
   %% lengths) is retained.
   %%
   %% {sample_retention_policies,
   %%  [{global,   [{60, 5}, {3600, 60}, {86400, 1200}]},
   %%   {basic,    [{60, 5}, {3600, 60}]},
   %%   {detailed, [{10, 5}]}]}
  ]}
].</pre>
        </doc:subsection>
      </doc:section>


      <doc:section name="load-definitions">
        <doc:heading>Loading Definitions (Schema) at Startup</doc:heading>
        <p>
          It is possible to export a definitions file over HTTP API or in management UI.
          A definition file contains definitions of all broker objects (queues,
          exchanges, bindings, users, virtual hosts, permissions and
          parameters). Then the file can be imported on node start, providing a way
          to preconfigure the node with virtual hosts, users, permissions, policies, queues,
          exchanges, bindings and so on.
        </p>
        <p>
          To import definitions from a local file on node boot,
          set the <code>management.load_definitions</code> (<code>rabbitmq_management.load_definitions</code>
          in the classic config format) config key
          to the path of a previously exported JSON file containing
          the definitions you want:

<pre class="lang-ini">
management.load_definitions = /path/to/definitions/file.json
</pre>

            Using the <a href="/configure.html#erlang-term-config-file">classic config format</a>:
          <pre class="lang-erlang">[
{rabbitmq_management, [
  {load_definitions, "/path/to/definitions/file.json"}
  ]}
].</pre>
        </p>
        <p>
          Note that the definitions in the file will overwrite
          anything already in the broker; using this option will not
          delete anything that is already there. However, if you
          start from a completely reset broker, use of this
          option <strong>will</strong> prevent the usual default user /
          virtual host / permissions from being created.
        </p>
      </doc:section>


      <doc:section name="clustering">
        <doc:heading>Metrics Collection and HTTP API in Clusters</doc:heading>

        <doc:subsection name="clustering-client-requests">
          <doc:heading>Client Requests</doc:heading>

          <p>
            The management plugin is aware of clusters. It can be enabled
            on one or more nodes in a cluster, and see information
            pertaining to the entire cluster no matter which node you
            connect to.
          </p>
        </doc:subsection>

        <doc:subsection name="clustering-subset-of-nodes">
          <doc:heading>Running Management Plugin on a Subset of Nodes</doc:heading>

          <p>
            It is possible deploy management plugin only on a subset of cluster nodes.
            In that case only the nodes running the plugin would be able to serve client HTTP API requests.
            For every cluster node to have its metrics collected, it is still required that the
            <code>rabbitmq-management-agent</code> plugin is enabled on each node, otherwise
            the metrics from the node won't be available.
          </p>
        </doc:subsection>

        <doc:subsection name="clustering-inter-node-connectivity">
          <doc:heading>Client Requests</doc:heading>

          <p>
            In cluster, HTTP API performs cluster-wide queries when handling client
            requests, which means it can be affected by network partitions and slow downs.
            Timeouts for inter-node aggregation queries are controlled via the
            <a href="nettick.html">net tick mechanism</a>.
          </p>
        </doc:subsection>
      </doc:section>

      <doc:section name="proxy">
        <doc:heading>(Reverse HTTP) Proxy Setup</doc:heading>
        <p>
          It is possible to make the web UI available via any proxy that
          conforms with RFC 1738. The following sample Apache configuration
          illustrates the minimum necessary directives to coax Apache into
          conformance. It assumes a management web UI on the default port of 15672:
          <pre class="lang-apache">
AllowEncodedSlashes On
ProxyPass        /api http://localhost:15672/api nocanon
ProxyPass        /    http://localhost:15672/
ProxyPassReverse /    http://localhost:15672/</pre>
        </p>
      </doc:section>

      <doc:section name="stats-db">
        <doc:heading>Restarting Statistics Database</doc:heading>

        <p>
          Statistics database is stored entirely in memory. All of its contents
          is transient and should be treated as such.

          Prior to version 3.6.7 stats database is stored on a single node.

          Starting from version 3.6.7, each node has its own statistics database
          containing a fraction of stats recorded on this node.

          It is possible to restart the stats database.
        </p>
        <p>
          The statistics database is stored in the memory of the stats process
          previously to RabbitMQ 3.6.2, and stored in ETS tables from RabbitMQ
          3.6.2. To restart the database with versions earlier than 3.6.2, use

<pre class="lang-bash">
rabbitmqctl eval 'exit(erlang:whereis(rabbit_mgmt_db), please_terminate).'
</pre>

Starting with RabbitMQ 3.6.7, the database can be reset per node using
<pre class="lang-bash">
rabbitmqctl eval 'rabbit_mgmt_storage:reset().'
</pre>

To reset entire management database on all nodes
<pre class="lang-bash">
rabbitmqctl eval 'rabbit_mgmt_storage:reset_all().'
</pre>

There is also HTTP API endpoints to reset a database
For entire database
<pre class="sourcecode">
DELETE /api/reset
</pre>

For a single node
<pre class="sourcecode">
DELETE /api/reset/:node
</pre>

        </p>
      </doc:section>

      <doc:section name="memory">
        <doc:heading>Memory Usage Analysis and Memory Management</doc:heading>
        <p>
          Management UI can be used to inspect node's memory use, including displaying
          a per-category breakdown. See the <a href="/memory-use.html">Memory Use Analysis</a> guide
          for details.
        </p>

        <p>
          Management database builds around periodically emitted stats,
          regulated by the statistics interval described above, or when certain components are
          created/declared (e.g. a new connection or channel is
          opened, or a queue declared) or closed/deleted.  Message
          rates do not directly affect management database memory
          usage.
        </p>
        <p>
          Total amount of memory consumed by the stats database
          depends on the topology size (e.g. the number of queues), number of concurrent connections
          and channels, event emission interval, effective rates mode and
          retention policies.
        </p>
        <p>
          Increasing the <code>rabbit.collect_statistics_interval</code> value to 30-60s (note: the value should
          be set in milliseconds, e.g. <code>30000</code>) will reduce memory
          comsuption for systems with large amounts of queues/channels/connections.
          Adjusting retention policies to retain less data will also help.
        </p>
        <p>
          The memory usage of the channel and stats collector processes can be limited
          by setting the maximum backlog queue size using the parameter
          <code>stats_event_max_backlog</code>. If the backlog queue is full, new channel
          and queue stats will be dropped until the previous ones have been processed.
        </p>
        <p>
          The statistics interval can also be changed at runtime. Doing so will have no
          effect on existing connections, channels or queues. Only new stats
          emitting entities are affected.

<pre class="lang-bash">
rabbitmqctl eval 'application:set_env(rabbit, collect_statistics_interval, 60000).'
</pre>
        </p>

        <p>
          The statistics database can be restarted (see above) and thus forced to release all memory.
          Management UI's Overview page contains buttons that reset stats database for individual nodes as well as
          all nodes in the cluster.
        </p>
      </doc:section>


      <doc:section name="publishing-consuming">
        <doc:heading>Publishing and Consuming over HTTP API</doc:heading>
        <p>
          It is possible to publish and consume messages using the <a href="#http-api">HTTP API</a>.
          This ways of messaging is discouraged: prefer one of the binary messaging protocols supported
          by RabbitMQ. Publishing and consuming that way will be significantly more efficient and will
          provide access to various messaging protocol features such as <a href="/confirms.html">confirmations</a>.
        </p>

        <p>
          Publishing over HTTP API can be useful in environments where
          <a href="/connections.html">long lived messaging protocol connections</a> is not an option.
        </p>
      </doc:section>
  </body>
</html>
