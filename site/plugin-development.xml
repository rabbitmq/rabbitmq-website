<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
<!ENTITY metronome_repo "https://github.com/rabbitmq/rabbitmq-metronome/blob/master">
]>
<!--
Copyright (c) 2007-2016 Pivotal Software, Inc.

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License,
Version 2.0 (the "License”); you may not use this file except in compliance
with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Plugin Development Guide</title>
  </head>
  <body show-in-this-page="true">
      <p class="intro">
        This is the RabbitMQ Server Plugin Development Guide. It is expected that
        before reading this guide, the reader has a basic understanding of the RabbitMQ
        plugin mechanism. Readers are also expected to have a basic
        understanding of Erlang OTP
        <a href="http://www.erlang.org/doc/system_principles/users_guide.html">system</a> and
        <a href="http://www.erlang.org/doc/design_principles/users_guide.html">design</a> principles.
      </p>

      <doc:section name="why">
        <doc:heading>Why Write A Plugin?</doc:heading>

        <p>
          Writing a RabbitMQ plugin provides a number of appealing possibilities:
        </p>
        <ul>
          <li>
            Enable your application to access internal RabbitMQ functionality that is not exposed
            via one of the supported protocols.
          </li>
          <li>
            Running in the same Erlang VM as the broker may increase performance for certain applications.
          </li>
          <li>
            Plugins provide an easy deployment model, since they allow for a single &quot;RabbitMQ Appliance&quot;
            to be built that acts in a self-contained manner. This can be useful both for easing production
            deployments, and for producing all-in-one infrastructure for use during development.
          </li>
        </ul>
      </doc:section>

      <doc:section name="why-not">
        <doc:heading>Why To Not Write A Plugin</doc:heading>

        <p>
          As with any plugin mechanism, consideration should be given when developing functionality as to whether
          embedding it as a plugin is the most appropriate path to take. Some reasons that you might not want to
          develop your functionality as a plugin:
        </p>

        <ul>
          <li>
            Depending on undocumented internal Rabbit APIs can result in your application requiring changes when
            RabbitMQ is updated. If you can do what you need to do without using RabbitMQ internals, then your
            application will be far more compatible in the future.
          </li>
          <li>
            As mentioned in the Admin Guide, a poorly written plugin can result in the entire broker crashing!
          </li>
        </ul>
      </doc:section>

      <doc:section name="getting-started">
        <doc:heading>Getting Started</doc:heading>

        <p>
          To develop a RabbitMQ plugin, first make sure the following
          requirements are met:
        </p>
        <ul>
          <li>
            Ensure that you have a working installation of <a href="http://git-scm.com/">Git</a>.
          </li>
          <li>
            Ensure that the dependencies detailed in the <a href="build-server.html#prerequisites">Server Build</a>
            documentation are installed and functional.
          </li>
        </ul>

        <p>
          <a href="http://erlang.mk">Erlang.mk</a> is used to
          build RabbitMQ and its plugins. The easiest way to start on
          a new plugin is probably to copy an existing plugin such as
          <tt>rabbitmq-metronome</tt>, <a href="#plugin-hello-world">used
          as an example below</a>.
        </p>
      </doc:section>

      <doc:section name="installing-plugins-during-development">
        <doc:heading>Activating Plugins During Development</doc:heading>

        <p>
          To test your plugin while you're working on it, you can start
          a broker with your plugin enabled:
          <pre class="sourcecode">$ make run-broker</pre>
        </p>
      </doc:section>

      <doc:section name="plugin-quality-tips">
        <doc:heading>Plugin Quality Tips</doc:heading>

        <p>
          As highlighted in the Administration Guide, badly-written plugins can pose a risk to the stability of the
          broker. The following tips aim to provide a series of best-practices for ensuring that your plugin
          can safely co-exist with Rabbit.
        </p>

        <ul>
          <li>
            Always install a Supervisor above your application. You should never start your application directly,
            instead opting to create a (possibly quite trivial) supervisor that will prevent the Erlang VM from
            shutting down due to a crashed top-level application.
          </li>
        </ul>
      </doc:section>
      <doc:section name="plugin-version-constraints">
        <doc:heading>Broker and Dependency Version Constraints</doc:heading>
        <p>
            It's possible to specify broker and dependency version
            requirements for a plugin using the
            <code>broker_version_requirements</code> key in plugin's
            <code>.app.src</code> file. The requirements are specified as a list of
            minimum version in each release series.
            Consider the following example:

            <pre class="sourcecode">
{application, my_plugin,[
            ...
            {broker_version_requirements, ["3.5.2", "3.6.1", "3.7.0"]}
]}</pre>

            The above requires RabbitMQ
            3.5.x starting with 3.5.2, 3.6.x starting with 3.6.1 and
            all versions in the 3.7.x series. Note that when new major and minor (feature) RabbitMQ versions
            come out, <strong>it is necessary for plugin maintainers to update the list</strong>.
        </p>
        <p>
            Plugins can have dependencies. It is possible to specify supported
            version series for dependencies, too. This is quite similar
            to the above but uses a dictionary-like data structure (proplist).

            For example:

<pre class="sourcecode">
{application, my_plugin, [
            ...
            {dependency_version_requirements, [{rabbitmq_management, ["3.6.1", "3.7.0"]}]}
]}
</pre>

            means the plugin depends on <code>rabbitmq_management</code> 3.6.x starting
            with 3.6.1 and all versions in the 3.7.x series.
        </p>
      </doc:section>

      <doc:section name="plugin-hello-world">
        <doc:heading>Example Plugin: Metronome</doc:heading>

        <p>
          Seeing as no development guide would be complete without a Hello World example, the following tries to
          provide the basics of how your would build your very own RabbitMQ plugin. The following example details
          how you might build a simple plugin that acts like a metronome. Every second, it fires a message that has
          a routing key in the form yyyy.MM.dd.dow.hh.mm.ss to a topic exchange called &quot;metronome&quot; by default.
          Applications can attach queues to this exchange with various routing keys in order to be invoked at regular intervals.
          For example, to receive a message every second, a binding of &quot;*.*.*.*.*.*.*&quot; could be applied. To recieve
          a message every minute, a binding of &quot;*.*.*.*.*.*.00&quot; could be applied instead.
        </p>
        <p>
          The <a href="https://github.com/rabbitmq/rabbitmq-metronome">rabbitmq-metronome</a> repository on GitHub
          contains a copy of the code for this plugin.
        </p>
        <p>
          The following table should explain the purpose of the various files in the repository.
        </p>
        <table>
          <tr>
            <th>Filename</th>
            <th>Purpose</th>
          </tr>
          <tr>
            <td><a href="&metronome_repo;/Makefile"><code>Makefile</code></a></td>
            <td>
              This top-level Makefile defines the name
              of your plugin and its dependencies. The
              name must match the Erlang application name.
              Dependencies are declared using erlang.mk's
              variables. Just after that, the Makefile includes
              <tt>rabbitmq-components.mk</tt> and <tt>erlang.mk</tt>,
              as well as <tt>rabbitmq-plugins.mk</tt> using erlang.mk
              plugins facility. See below for a description of those
              files.
            </td>
          </tr>
          <tr>
            <td><a href="&metronome_repo;/erlang.mk"><code>erlang.mk</code></a></td>
            <td>
              A local copy of <tt>erlang.mk</tt>. This is not a vanilla
              copy because RabbitMQ relies on a few modifications
              which have not been merged upstream at the time of
              this writing. That's why <tt>ERLANG_MK_REPO</tt> and
              <tt>ERLANG_MK_COMMIT</tt> are overridden for now.
            </td>
          </tr>
          <tr>
            <td><a href="&metronome_repo;/build.config"><code>build.config</code></a></td>
            <td>
              This file configures which features of erlang.mk should be
              enabled. In most of RabbitMQ's plugins, EUnit is disabled,
              because they depend on a running broker. Our erlang.mk
              extensions take care of starting a node and run the EUnit
              tests when you type <tt>make tests</tt>.
            </td>
          </tr>
          <tr>
            <td><a href="&metronome_repo;/rabbitmq-components.mk"><code>rabbitmq-components.mk</code></a></td>
            <td>
              A local copy of <tt>rabbitmq-components.mk</tt>. The
              original file is in <tt>rabbitmq-common</tt> which your
              plugin will depend on automatically. It contains other
              erlang.mk extensions and helpers which must be defined
              before <tt>erlang.mk</tt> inclusion. This file must be
              kept up-to-date w.r.t. <tt>rabbitmq-common</tt>: when it
              is out-of-date, you will get the following error:
              <pre>error: rabbitmq-components.mk must be updated!</pre>
              In this case, just run the following command to update
              your copy:
              <pre>make rabbitmq-components-mk</pre>
            </td>
          </tr>
          <tr>
            <td><a href="&metronome_repo;/priv/schema/rabbitmq_metronome.schema"><code>rabbitmq_metronome.schema</code></a></td>
            <td>
              A <a href="https://github.com/basho/cuttlefish/">Cuttlefish</a>
              configrution schema.
              Used to translate <a href="/configure.html#configuration-file">configuration file</a>
              to the internal format used by RabbitMQ and its runtime.

              Metronome schema contains mappings for the <code>metronome.exchange</code> setting,
              setting the exchange used by the plugin. Default value is defined in <code>rabbitmq_metronome.app.src</code>.

              Configuration will be regenerated when the plugin is
              enabled. Plugin-specific values in the config will cause error if
              plugin has not been enabled.

              More information about writing schema files can be found
              <a href="https://github.com/basho/cuttlefish/wiki/Cuttlefish-for-Erlang-Developers">in the Cuttlefish docs</a>.

            </td>
          </tr>
          <tr>
            <td><a href="&metronome_repo;/src/rabbitmq_metronome.app.src"><code>src/rabbitmq_metronome.app.src</code></a></td>
            <td>
              This file declares the dependencies required by the plugin
              (<code>rabbit</code> and <code>amqp_client</code>). These
              applications will be available and started before starting
              the plugin. Note that the real <tt>.app</tt> file is
              generated from this <tt>.app.src</tt>; there is no need to
              fill in the list of modules. You can let the <tt>vsn</tt>
              field empty: it will inherit RabbitMQ's version.
            </td>
          </tr>
          <tr>
            <td><a href="&metronome_repo;/src/rabbit_metronome.erl"><code>src/rabbit_metronome.erl</code></a></td>
            <td>
              Implementation of the Erlang "application" behaviour. Provides a means for the Erlang VM to start and
              stop the plugin.
            </td>
          </tr>
          <tr>
            <td><a href="&metronome_repo;/src/rabbit_metronome_sup.erl"><code>src/rabbit_metronome_sup.erl</code></a></td>
            <td>
              Implementation of the Erlang "supervisor" behaviour. Monitors the worker process and restarts it if
              it crashes.
            </td>
          </tr>
          <tr>
            <td><a href="&metronome_repo;/src/rabbit_metronome_worker.erl"><code>src/rabbit_metronome_worker.erl</code></a></td>
            <td>
              The core of the plugin. The worker will connect internally to the broker, then create a task that
              will be triggered every second.
            </td>
          </tr>
          <tr>
            <td><a href="&metronome_repo;/test/src/rabbit_metronome_tests.erl"><code>test/rabbit_metronome_tests.erl</code></a></td>
            <td>
              Automated tests for the plugin.
            </td>
          </tr>
        </table>

        <ul>
          <li>
            Run make to build your application:
            <pre class="sourcecode">$ make</pre>
          </li>
          <li>
            Start up your Rabbit broker:
            <pre class="sourcecode">$ make run-broker</pre>
          </li>
          <li>
            To ensure that your new plugin is up and running, run the following command:
            <pre class="sourcecode">./deps/rabbit/scripts/rabbitmqctl status</pre>
            If your plugin has loaded successfully, you should see an entry in the returned list that looks
            like: <pre class="sourcecode">{rabbitmq_metronome,"Embedded Rabbit Metronome",[]}</pre>
          </li>
          <li>
            You can run the automated tests by issuing:
            <pre class="sourcecode">$ make tests</pre>
          </li>
          <li>
            Finally, you can produce a <code>.ez</code> file, suitable for distribution with:
            <pre class="sourcecode">$ make dist</pre>
            The file appears in the <tt>plugins</tt> subdirectory.
          </li>
        </ul>
      </doc:section>
  </body>
</html>
