<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html PUBLIC "bug in xslt processor requires fake doctype"
"otherwise css isn't included" [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
]>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc">
  <head>
    <title>RabbitMQ - Installation</title>
  </head>
  <body>
    <doc:div>

    <p class="intro">
      Here you can find instructions to get your
      <a href="server.html"> server download</a>
      installed and running for your chosen platform.
    </p>

    <doc:toc class="compact">
      <doc:heading>RabbitMQ Server Installation</doc:heading>
    </doc:toc>

    <doc:section name="introduction">
      <doc:heading>Introduction</doc:heading>
        <p>
          Each installation requires Erlang, which also provides
          Mnesia (DBMS) and logging support for the brokers.
          <a href="configure.html#define-environment-variables">Mnesia and log directories</a>
          may need read/write permissions for the service account.
        </p>
        <p>
          Management scripts start and stop the broker,
          and set up a default environment.
          Scripts and commands need to run as a privileged user e.g.
          an administrator on Windows, or with root permission
          (e.g. sudo) on Unix-like systems.
        </p>
        <p>
          If you use non-default file locations, ports, account
          or service names, or component properties these should be
          <a href="configure.html">configured</a>. 
          If you need multiple server nodes, also see the 
          <a href="clustering.html">clustering guide</a>.
        </p>
        <p>
        These are the steps, done manually or via a packager:
        <ol>
        <li>Install Erlang</li>
        <li>Install RabbitMQ server </li>
        <li>(optional) Configure environment</li>
        <li>(optional) Put plugins in plugin directory</li>
        <li>Start service or daemon</li>
        </ol>
        </p>
      </doc:section>

      <doc:section name="windows">
        <doc:heading>Windows Quick Install</doc:heading>
        <doc:subsection name="install-windows">
        <doc:heading>Install the Server</doc:heading>
          <dl class="instructions">
            <dt>Install the easy way</dt>
            <dd>
             <p>
              Run the <a href="http://www.erlang.org/download.html">Erlang Windows Binary File</a>.
              It takes around 5 minutes.
            </p>
            <p>
              Then just run the <a href="server.html">Installer for Windows systems</a>,
              <code><span class="path">rabbitmq-server-&version-server;.exe</span></code>.
              It takes around 2 minutes, and will set RabbitMQ up and running as a service,
              with a default configuration. That's all!
            </p>
          </dd>
          </dl>
        </doc:subsection>
        <doc:subsection name="run-windows">
        <doc:heading>Run RabbitMQ Service</doc:heading>
          <dl class="instructions">
          <dt>Customise RabbitMQ Environment Variables</dt>
          <dd>
            <p>
              The service will run fine using its default settings. You may want to
              <a href="configure.html#customise-windows-environment">customise the RabbitMQ environment</a>
              or edit <a href="configure.html#configuration-file">configuration</a>.
            </p>
          </dd>
          <dt>Run RabbitMQ</dt>
          <dd>
            <p>
              The RabbitMQ service starts automatically.
              You can stop/reinstall/start the RabbitMQ service from the Start Menu.
            </p>
          </dd>
          <dt>Manage the Service</dt>
          <dd>
            <p>
              You can find links to RabbitMQ directories in the Start Menu.
            </p>
            <p>
              You can use also any of the 
              <a href="find-rabbitmq-on-windows">command line scripts in sbin</a>
              as described for <a href="#windows-manual">Windows Manual Install</a>
              including <a href="#managing-windows">rabbitmqctl</a>
              commands and <a href="#logging-windows">logging</a>.
              You can set up the path or just use the link to sbin directory found in the Start Menu.
            </p>
          </dd>
          </dl>
        </doc:subsection>
      </doc:section>
        
      <doc:section name="windows-manual">
        <doc:heading>Windows Manual Install</doc:heading>
        
        <doc:subsection name="install-windows-separately">
          <doc:heading>Install Server Components</doc:heading>
            <p>
              If you should ever need to install RabbitMQ manually, this is how to do it:
            </p>
            <dl class="instructions">
              <dt>Install Erlang</dt>
              <dd>
                <p>
                  Run the <a href="http://www.erlang.org/download.html">Erlang Windows Binary File</a>.
                  Erlang will appear in the Start Menu,
                  and <code>\erl<var>x.x.x</var>\bin\erl.exe</code> will be in
                  <code>&dir-win-apps;</code> or <code>&dir-win64-apps;</code>.
                </p>
              </dd>

              <dt>ERLANG_HOME</dt>
              <dd>
                <p>
                  Set <span class="envvar">ERLANG_HOME</span> to where you actually put your Erlang installation, e.g.
                  <code>C:\Program Files\erl<var>x.x.x</var></code> (full path).
                  The RabbitMQ batch files expect to execute
                  <code><span class="envvar">%ERLANG_HOME%</span>\bin\erl.exe</code>.
                </p>
                <p>
                  Go to Start&#xA0;>&#xA0;Settings&#xA0;>&#xA0;Control&#xA0;Panel&#xA0;>&#xA0;System&#xA0;>&#xA0;Advanced&#xA0;>&#xA0;Environment&#xA0;Variables.
                  Create the system environment variable <span class="envvar">ERLANG_HOME</span>
                  and set it to the full path of the directory which contains
                  <code>bin\erl.exe</code>.
                </p>
              </dd>

              <dt>Install RabbitMQ Server</dt>
              <dd>
                <p>
                 Download <code>rabbitmq-server-windows-&version-server;.zip</code>
                 from the <a href="server.html">download page</a>.
                </p>
                <p>
                 From the zip file, extract the folder named
                 <code>rabbitmq_server-&version-server;</code>
                 into <code>&dir-server-windows;</code>
                 (or somewhere suitable for application files).
                </p>
              </dd>
            </dl>
         </doc:subsection>

        <doc:subsection name="find-rabbitmq-on-windows">
          <doc:heading>Find Command Scripts and App Data</doc:heading>
            <dl class="instructions">
              <dt>Commands for RabbitMQ Server</dt>
              <dd>
                <p>
                 Within the <code>rabbitmq_server-&version-server;\sbin</code>
                 directory are some scripts which run commands to control the RabbitMQ server.
                </p>
                <p>
                  The RabbitMQ server can be run as either an application or service (not both).
                </p>
                <ul>
                    <li><a href="man/rabbitmq-server.1.man.html">rabbitmq-server.bat</a>
                    starts the broker as an application.</li>
                    <li><a href="man/rabbitmq-service.man.html">rabbitmq-service.bat</a>
                    manages the service and starts the broker.</li>
                    <li><a href="man/rabbitmqctl.1.man.html">rabbitmqctl.bat</a>
                    manages a running broker.</li>
                </ul>
                <p>
                Log in as an administrator. To see the output,
                run these from a
                <a href="http://windows.microsoft.com/en-GB/windows7/Command-Prompt-frequently-asked-questions">Command Prompt</a>
                in the <code>sbin</code> directory.
                </p>
                <p>
                <em>Note: </em>On Vista/Windows7 you will need to
                <a href="http://windows.microsoft.com/en-GB/windows7/Command-Prompt-frequently-asked-questions">elevate privilege</a>
                (e.g. right-click on the icon to select Run as Administrator).
                </p>
              </dd>
              <dt>Find Commands Easily</dt>
              <dd>
                 Set up the system path so you can find the server and
                 <code>sbin</code> directory easily.
                  <li>Create a system environment variable (e.g. RABBITMQ_SERVER) for
                 <code>"&dir-server-windows;\rabbitmq_server-&version-server;"</code>.
                 Adjust this if you put <code>rabbitmq_server-&version-server;</code> elsewhere,
                 or if you upgrade versions.</li>
                 <li>Append the literal string "<code>;%RABBITMQ_SERVER%\sbin</code>"
                  to your system path (aka %PATH%).</li>
                  Now you can run rabbitmq commands from any (administrator)
                  Command Prompt.
                  <p>
                   You will need to navigate to <code>rabbitmq_server-&version-server;\sbin</code>
                   to run commands if your system path does not contain the RabbitMQ <code>sbin</code>
                   directory.
                  </p>
              </dd>
              <dt>Finding Application Data</dt>
              <dd>
              <p>
                By default, the RabbitMQ logs and Mnesia database
                are stored in the current user's Application Data directory
                e.g. <code>&dir-win-user;\Application Data</code> or
                <code>&dir-win-user;\AppData\Roaming</code>
                (Windows Vista).
                </p>
                <p>
                Execute <code>echo %APPDATA%</code> at a Command Prompt
                to find this directory. Alternatively,
                Start&#xA0;>&#xA0;Run&#xA0;<code>%APPDATA%</code>
                will open this folder.
                </p>
              </dd>
            </dl>
        </doc:subsection>

        <doc:subsection name="running-windows">
          <doc:heading>Run RabbitMQ Server as an Application</doc:heading>
          <p>
            The application is started by the <code>rabbitmq-server.bat</code>
            script in <code>sbin</code>.
          </p>

          <dl class="instructions">
            <dt>Customise RabbitMQ Server Environment Variables</dt>
            <dd>                
                Environment variable defaults are set within the
                <code>rabbitmq-server.bat</code> file.
                You may need to <a
                href="configure.html#customise-windows-environment">customise
                environment variables</a>
                for your installation.
            </dd>

            <dt>Start the Broker as an Application</dt>
            <dd>
              <p>
               Run the command <pre class="sourcecode">rabbitmq-server -detached</pre>
               Alternatively, you can double-click the
               <code>rabbitmq-server.bat</code> file in Windows Explorer.
              </p>
              <p>
               If you start by double-clicking, a Command Prompt window opens,
               displays a banner message, reports on progress in the startup sequence,
               and concludes with "broker running".
               This shows that the RabbitMQ broker has been started successfully.
              </p>
              <p>
              If you started without the <code>-detached</code> option,
              e.g. by double-clicking, you will need a second Command Prompt
              window to control the application cleanly.
              <em>Note: </em> Closing the original Command Prompt window
              will forcefully shut down a server started this way.
              </p>
            </dd>
            <dt>Stop or Manage the Broker</dt>
            <dd>
                <code>rabbitmq-server</code> only starts the broker.
                To <a href="#managing-windows">manage the broker</a> use
              <code>rabbitmqctl</code> commands.
            </dd>
          </dl>
        </doc:subsection>

        <doc:subsection name="running-windows-service">
          <doc:heading>Run RabbitMQ Server as a Service</doc:heading>
          <p>
            The service will run in the security context of the system account
            without the need for a user to be logged in on a console.
            This is normally more appropriate for production use.
            The server should not be run as a
            service and application simultaneously.
          </p>
          <p>
              The service runs using the <code>rabbitmq-service.bat</code>
              script in <code>sbin</code>.
          </p>

          <dl class="instructions">
            <dt>Customise RabbitMQ Service Environment Variables</dt>
            <dd>
              <p>
                   <em>Note: </em>After setting environment variables,
                   you may need to install the service again.
              </p>
              <p>
                   The <code>rabbitmq-service.bat</code> script
                   recognises many of the same 
                   <a href="configure.html#customise-windows-environment">environment variables</a>
                   as <code>rabbitmq-server.bat</code>, as well as a few additional
                   service environment variables.
              </p>
            </dd>

              <dt>Install the Service</dt>
              <dd>
                <p>
                Install the service by running
                <pre class="sourcecode">rabbitmq-service install</pre>
               </p>
               <p>
                A service with the name defined by <b>RABBITMQ_SERVICENAME</b>
                should now appear in the Windows Services control panel
                (Start&#xA0;>&#xA0;Run&#xA0;<code>services.msc</code>).
                </p>
              </dd>

              <dt>Managing the Service</dt>
              <dd>
                <p>
                To manage the service (install, remove, start, stop, enable, disable), use
                <code>rabbitmq-service.bat</code> commands.
                Refer to the <a href="service-guide.html">service guide</a> for more information
                and troubleshooting guidance.
                You can also use the Windows Services panel (<code>services.msc</code>)
                to perform some of the same functions as the service script.
                </p>
              </dd>

              <dt>Start the Broker as a Service</dt>
              <dd>
                <p>
                To start the broker, execute
                <pre class="sourcecode">rabbitmq-service start</pre>
                </p>
                <p>
                If the output from this command is
                "<code>Service <i>RABBITMQ_SERVICENAME</i>
                started</code>", then the service was started
                correctly.
                </p>
                <p>
                Confirm the service named <b>RABBITMQ_SERVICENAME</b>
                reports a "Started" status in Services: <br/>
                Start&#xA0;>&#xA0;Run&#xA0;<code>services.msc</code>.
                </p>
                </dd>
                <dt>Manage the Broker</dt>
                <dd>

                To <a href="#managing-windows">manage the broker</a> use
                <code>rabbitmqctl</code> commands.
              </dd>
            </dl>
        </doc:subsection>

        <doc:subsection name="managing-windows">
          <doc:heading>Manage the Broker</doc:heading>
          <p>
               To stop the broker or check its status, use
               <code>rabbitmqctl.bat</code> in
               <code>sbin</code> (as an administrator).
          </p>

          <dl class="instructions">
            <dt>Synchronise Erlang Cookies (when running a manually installed Windows Service)</dt>
            <dd>
              <p>
                 Erlang Security Cookies used by the service account and the user
                 running <code>rabbitmqctl.bat</code> must be synchronised for
                 <code>rabbitmqctl.bat</code> to function.
              </p>
              <p>
                 To ensure Erlang cookie files contain the same string,
                 copy the <code>.erlang.cookie</code> file from the Windows
                 directory (normally <code>C:\WINDOWS\.erlang.cookie</code>)
                 to replace the user <code>.erlang.cookie</code>.
                 The user cookie will be in the user's home directory
                 (<span class="envvar">%HOMEDRIVE%%HOMEPATH%</span>), e.g.
                 <code>&dir-win-user;\.erlang.cookie</code>.
              </p>
            </dd>

            <dt>Stopping the Broker</dt>
            <dd>
              <p>
                 Use <code>rabbitmqctl stop</code>.
              </p>
            </dd>

            <dt>Checking the Broker Status</dt>
            <dd>
              <p>
                 Use <code>rabbitmqctl status</code>.
                 All rabbitmqctl commands will report the node absence
                 if no broker is running (i.e. nodedown).
              </p>
            </dd>
          </dl>
          <p>
             More  <a href="man/rabbitmqctl.1.man.html">info on rabbitmqctl commands</a>
          </p>
          <p>
            More <a href="admin-guide.html">info on  administration</a>
          </p>
        </doc:subsection>

        <doc:subsection name="logging-windows">
          <doc:heading>Logging</doc:heading>
          <p>
            Output from the server is sent to a
            <b>RABBITMQ_NODENAME</b>.log file in the
            <b>RABBITMQ_LOG_BASE</b> directory. Additional log data is
            written to <b>RABBITMQ_NODENAME</b>-sasl.log.
          </p>
          <p>
            The log files are created afresh every time the broker
            starts. In order to retain a complete log history the
            startup scripts append the contents to the corresponding
            <code>.1</code> files prior to starting the broker.
          </p>
          <p>
            You can rotate logs using <code>rabbitmqctl rotate_logs</code>.
          </p>
        </doc:subsection>
      </doc:section>

      <doc:section name="debian">
        <doc:heading>Debian GNU/Linux and Ubuntu Linux</doc:heading>

        <doc:subsection name="install-debian">
          <doc:heading>Install the Server</doc:heading>
            <dl class="instructions">
            <dt>Install from a package</dt>
            <dd>
            <p>
              Install the rabbitmq-server package  - at the time of writing, RabbitMQ is
              included in Debian unstable (sid), Debian testing
              (squeeze), and Ubuntu 9.04 (Jaunty Jackalope) and
              onwards.
            </p>
            <p>
              Alternatively, install <code>
              rabbitmq-server_&version-server;-&serverDebMinorVersion;_all.deb</code>
              from the
              <a href="server.html">download page</a>, or by using our <a
              href="debian.html#apt">APT repository</a>.
              </p>
              <p>
              All dependencies should be met automatically.
            </p>
            </dd>
            </dl>
        </doc:subsection>

        <doc:subsection name="running-debian">
          <doc:heading>Run RabbitMQ  Server</doc:heading>
            <dl class="instructions">
            <dt>Customise RabbitMQ Environment Variables</dt>
            <dd>
            <p>
              The server should start using defaults.
              You can 
              <a href="configure.html#customise-general-unix-environment">customise the RabbitMQ environment</a>.
              Also see how to <a href="configure.html#configuration-file">configure components</a>.
            </p>
            </dd>
            <dt>Start the Server</dt>
            <dd>
            <p>
              The server is started as a daemon by default when the
              RabbitMQ server package is installed.
            </p>
            <p>
              As an administrator, start and stop the
              server as usual for Debian using
            <code>invoke-rc.d rabbitmq-server <i>stop/start/etc</i></code>.
            </p>
            <p>
              <em>Note: </em>The server is set up to run as system user
              <code>rabbitmq</code>.
              If you change the location of the Mnesia database or the logs,
              you must ensure the files are owned by this user
              (and also update the environment variables).
            </p>
            </dd>
            <dt>Manage the Server</dt>
            <dd>
                See the <a href="#generic-unix">Generic Unix or Linux</a> section
                for info on <a href="#managing-server-unix">rabbitmqctl</a>
                commands and
                <a href="#logging-generic-unix">logging</a>.
            </dd>
            </dl>
        </doc:subsection>
      </doc:section>

      <doc:section name="rpm">
        <doc:heading>RPM based Linux (CentOS, Fedora, OpenSuse, RedHat)</doc:heading>

        <doc:subsection name="install-rpm">
          <doc:heading>Install the Server</doc:heading>
            <dl class="instructions">
            <dt>Install from a package</dt>
            <dd>
            <p>
              The RabbitMQ server is included in Fedora, so for Fedora
              and RHEL users we recommend to install the
              <i>rabbitmq-server</i> package via the distribution's
              package manager.
            </p>
            <p>
              Alternatively, install
              <code>rabbitmq-server-&version-server;-architecture.rpm</code>
              (which you can download from the
              <a href="server.html">download page</a>).
              We recommend using your distribution's packaged
              version of Erlang to run the server. See <a
              href="server.html">the server download page</a> for more
              information.
            </p>
            </dd>
            </dl>
        </doc:subsection>

        <doc:subsection name="running-rpm">
          <doc:heading>Run RabbitMQ Server</doc:heading>
            <dl class="instructions">
            <dt>Customise RabbitMQ Environment Variables</dt>
            <dd>
            <p>
              The server should start using defaults.
              You can 
              <a href="configure.html#customise-general-unix-environment">customise the RabbitMQ environment</a>.
              Also see how to <a href="configure.html#configuration-file">configure components</a>.
            </p>
            </dd>
            <dt>Start the Server</dt>
            <dd>
            <p>
              The server is not started as a daemon by default when the
              RabbitMQ server package is installed. To start the daemon by default
              when the system boots, as an administrator run
              <code>chkconfig rabbitmq-server on</code>.
            </p>
            <p>
              As an administrator, start and stop the
              server as usual using <code>/sbin/service rabbitmq-server
              <i>stop/start/etc</i></code>.
            </p>
            <p>
              <em>Note: </em>The server is set up to run as system user
              <code>rabbitmq</code>.
              If you change the location of the Mnesia database or the logs,
              you must ensure the files are owned by this user
              (and also update the environment variables).
            </p>
            </dd>
            <dt>Manage the Server</dt>
            <dd>
                See the <a href="#generic-unix">Generic Unix or Linux</a> section
                for info on <a href="#managing-server-unix">rabbitmqctl</a>
                commands and
                <a href="#logging-generic-unix">logging</a>.
            </dd>
            </dl>
        </doc:subsection>
      </doc:section>

      <doc:section name="macports">
        <doc:heading>Mac OS X with MacPorts</doc:heading>
        <p>
          Users of Mac OS X who do not use MacPorts can use the <a
          href="#generic-unix">Generic Unix</a> installation
          instructions instead.
        </p>
        <p>
          A portfile for the RabbitMQ server is included in <a
          href="http://www.macports.org/">MacPorts</a>. From the
          MacPorts home page:
        </p>
        <blockquote>
          The MacPorts Project is an open-source community
          initiative to design an easy-to-use system for compiling,
          installing, and upgrading either command-line, X11 or Aqua
          based open-source software on the Mac OS X operating
          system.
        </blockquote>
        <p>
          RabbitMQ maintains a dedicated
          <a href="macports.html">MacPorts repository</a>,
          which you should use to install the latest RabbitMQ server version via MacPorts,
          as officially released MacPorts packaging may not always
          contain the lastest released version of RabbitMQ.<br/>
          (NB It can take a very long time to install other macport updates -
          see <code>man port</code> for options).
        </p>

        <doc:subsection name="install-macports">
          <doc:heading>Install the Server</doc:heading>
          <p>
            Installation of the version of the RabbitMQ server
            distributed with MacPorts is as simple as (<code>sudo port
            sync</code> followed by)
          </p>
          <pre class="sourcecode">sudo port install rabbitmq-server</pre>
        </doc:subsection>

        <doc:subsection name="running-macports">
          <doc:heading>Run RabbitMQ Server</doc:heading>
          <p>
            To start the server, you can either use launchctl (see the
            instructions emitted during the <code>sudo port
            install</code> step) or you can start it from the command
            line with <code>sudo rabbitmq-server -detached</code>.
          </p>
          <p>
            The <code>rabbitmq-server</code>,
            <code>rabbitmqctl</code>, and other RabbitMQ-related
            scripts on the path automatically (through sudo) run in
            the context of the rabbitmq user, so that the Erlang cookie
            can be read from (sudo)
            <code>$MACPORTS_PREFIX/var/lib/rabbitmq/.erlang.cookie</code>.
          </p>
          <p>
            See the <a href="#generic-unix">Generic Unix or Linux</a> installation section for further information.
          </p>
        </doc:subsection>
      </doc:section>

      <doc:section name="machomebrew">
        <doc:heading>Mac OS X with Homebrew</doc:heading>
        <p>
            A brew for the RabbitMQ server is available from
            <a href="http://mxcl.github.com/homebrew/">Homebrew</a>.
           <em>Note: </em>You may not be able to install the RabbitMQ brew from inside a firewall.
           </p>
        <doc:subsection name="install-machomebrew">
          <doc:heading>Install the Server</doc:heading>
          <p>
            Before installing make sure you have the latest brews:
            <pre>brew update</pre>
                Then, install RabbitMQ server with:
                <pre>brew install rabbitmq</pre>
              </p>
        </doc:subsection>
        <doc:subsection name="running-machomebrew">
          <doc:heading>Run RabbitMQ Server</doc:heading>
          <p>
            The RabbitMQ server scripts are installed into <code>/usr/local/sbin</code>.
            This is not automatically added to your path, so you may wish to add<br />
            <code>PATH=$PATH:/usr/local/sbin</code> to your <code>.bash_profile</code>
            or <code>.profile</code>.
            The server can then be started with <code>rabbitmq-server</code>.
          </p>
          <p>
            All scripts run under your own user account. Sudo is not required.
          </p>
          <p>
            See the <a href="#generic-unix">Generic Unix or Linux</a> section for further information.
          </p>
        </doc:subsection>
      </doc:section>

      <doc:section name="solaris">
        <doc:heading>Solaris</doc:heading>
        <doc:subsection name="installing-solaris">
        <doc:heading>Install the Server</doc:heading>
          <p>
            The  <a href="#generic-unix">Generic Unix or Linux</a> installation
            instructions may be used to install RabbitMQ on Solaris, with
            two modifications:
            <ul>
              <li>
                The RabbitMQ shell scripts assume a standard POSIX environment.
                On Solaris this requires that startup scripts be executed with
                the <code>/usr/xpg4/bin/sh</code> shell. This can
                be accomplished by replacing the first line of each script
                (which normally reads <code>#!/bin/sh</code>) with
                <code>#!/bin/xpg4/bin/sh</code>.
              </li>
              <li>
                The RabbitMQ shell scripts assume the existence of the
                "readlink" utility for resolving symbolic links. This can be
                obtained by installing the
                <a href="http://www.sunfreeware.com/">Sunfreeware</a>
                "coreutils" package or compiling
                <a href="http://www.gnu.org/software/coreutils/">GNU
                coreutils</a>.
              </li>
            </ul>
          </p>
        </doc:subsection>
      </doc:section>
      <doc:section name="generic-unix">
        <doc:heading>Generic Unix or Linux (BSD, Mac OS X)</doc:heading>

        <doc:subsection name="install-generic-unix">
          <doc:heading>Install the Server</doc:heading>
            <p>
              Install a recent version of Erlang.
            </p>
            <p>
              Download
              <code>rabbitmq-server-generic-unix-&version-server;.tar.gz</code>
              from the <a href="download.html">download page</a>.
            </p>
            <p>
              Contained in the tarball is a directory named
              <code>rabbitmq_server-&version-server;</code>. You should
              extract this into somewhere appropriate for application
              binaries on your system. The <code>sbin</code> directory will be found in
              this directory.
            </p>
        </doc:subsection>

        <doc:subsection name="running-generic-unix">
          <doc:heading>Run RabbitMQ Server</doc:heading>
            <dl class="instructions">
              <dt>Customise RabbitMQ Environment Variables</dt>
              <dd>
              <p>
              Within the <code>sbin</code> directory is a shell script
              <code>rabbitmq-server</code> which uses default values.
              You can 
              <a href="configure.html#customise-general-unix-environment">customise the RabbitMQ environment</a>.
              Also see how to
              <a href="configure.html#configuration-file">configure components</a>.
              </p>
              <p><em>Note: </em>If the directories
                <strong>RABBITMQ_MNESIA_BASE</strong> and
                <strong>RABBITMQ_LOG_BASE</strong> do not exist
                the server will attempt to create them.
                The server needs write permission at the configured locations.
              </p>
              </dd>
 
              <dt>Start the Server</dt>
              <dd>
              <p>
              Invoke the <code>rabbitmq-server</code> shell script.
              This displays a banner message, and reports on progress in
              the startup sequence, concluding with the message "broker
              running", indicating that the RabbitMQ broker has been
              started successfully.
              </p>
              <p>
              You can also start the server in "detached" mode with
              <code>rabbitmq-server -detached</code>, in which case the
              server process runs in the background.
              </p>
              </dd>
            </dl>
        </doc:subsection>

        <doc:subsection name="managing-server-unix">
          <doc:heading>Manage the Server</doc:heading>
            <p>
              To stop the server or check its status, etc., you can use
              <code>rabbitmqctl</code> (as an administrator). It should be
              available on the path. All <code>rabbitmqctl</code> commands will report the node absence
              if no broker is running.
            </p>
            <ul>
                 <li>Use <code>rabbitmqctl stop</code> to stop the server.
                 Alternatively, just terminate the Erlang process.</li>
                 <li>Use <code>rabbitmqctl status</code> to check whether it is
                 running.</li>
            </ul>
            <p>
              More  <a href="man/rabbitmqctl.1.man.html">info on rabbitmqctl commands</a>
            </p>
            <p>
              More <a href="admin-guide.html">info on  administration</a>
            </p>
        </doc:subsection>

        <doc:subsection name="logging-generic-unix">
          <doc:heading>Logging</doc:heading>
          <p>
            Output from the server is sent to a
            <b>RABBITMQ_NODENAME</b>.log file in the
            <b>RABBITMQ_LOG_BASE</b> directory. Additional log data is
            written to <b>RABBITMQ_NODENAME</b>-sasl.log.
          </p>
          <p>
            These log files are created afresh every time the broker starts.
            In order to retain a complete log history the startup scripts
            append the contents to the corresponding <code>.1</code>
            files prior to starting the broker.
          </p>
          <p>
            You can use the <code>logrotate</code> program
            to do all necessary rotation and compression,
            and you can change it. By default,
            this script runs weekly on files located in default
            <code>/var/log/rabbitmq</code> directory. See
            <code>/etc/logrotate.d/rabbitmq-server</code>
            to configure
            <code>logrotate</code>.
          </p>
        </doc:subsection>
      </doc:section>

      <doc:section name="troubleshooting">
        <doc:heading>Troubleshooting</doc:heading>
        <dl class="instructions">
          <dt>Checking Broker Status</dt>
          <dd>
            <p>
              You can use <code>rabbitmqctl status</code>
              to verify whether a broker is running.<br />
              Normal output from a running broker without plugins follows this pattern:
              <pre>
  Status of node 'rabbit@xxx' ...
  [{pid,...},
   {running_applications,[{rabbit,"RabbitMQ","&version-server;"},
                          {os_mon,"..."},
                          {sasl,"..."},
                          {mnesia,"..."},
                          {stdlib,"..."},
                          {kernel,"..."},
  {os,"..."},
  {erlang_version,"..."},
  {memory,"..."}}]</pre>
            </p>
            <p>
              This example indicates that no broker is running:
              <pre>
  Status of node 'rabbit@xxx' ...
  Error: unable to connect to node 'rabbit@xxx': nodedown
  diagnostics:
  - nodes and their ports on xxx: [{rabbitmqctl,...}]
  - current node: 'rabbitmqctlxxx@xxx'
  - current node home dir: [...]
  - current node cookie hash: [...]</pre>
              If the diagnostic line looks like this:
              <pre>
  - nodes and their ports on xxx: [{rabbit,...},{rabbitmqctl,...}]</pre>
              and the broker logfile contains entries similar to
              <pre>
  Connection attempt from disallowed node...</pre>
              then you should make sure the erlang cookies are the same.
            </p>
          </dd>
          <dt>Server Fails to Start</dt>
          <dd>
            <p>
              When the server fails to start, usually a crash dump file
              <code>erl_crash.dump</code> is created in the directory
              where the server was started. This can provide very detailed
              information on the causes of a start up failure, but its
              analysis requires Erlang expertise.
            </p>
            <p>
          If you attempt to start another server while a broker is already running,
          then you will receive an error report.
          You can confirm whether the broker is already running by checking the status.
            </p>
            <p>
              If the server fails to start, examine the console output and
              the log files in the <b>RABBITMQ_LOG_BASE</b> directory.
              Configuration and permission errors are frequently the cause, e.g. the
              Mnesia directory cannot be created.
            </p>
          </dd>
          <dt>Windows Service fails to Install</dt>
          <dd>
            If the service fails to install, check the service account has full access permission for
            <b>RABBITMQ_BASE</b>, <b>RABBITMQ_MNESIA_BASE</b> and
            <b>RABBITMQ_LOG_BASE</b> directories
            [<a href="http://www.microsoft.com/windowsxp/using/security/learnmore/accesscontrol.mspx">XP</a>,
                <a href="http://windows.microsoft.com/en-US/windows-vista/Troubleshoot-access-denied-when-opening-files-or-folders">Vista</a>].
          </dd>
          <dt>Windows Service fails to Start</dt>
          <dd>
            <p>
            If the service fails to start, make sure the service has been
            installed.
            </p>
            <p>
                On starting the service, if the service output reads "<code>The process
                terminated unexpectedly</code>" instead, then the
                service did not start correctly. Check that the
                environment variables are set correctly. The logfiles in
                <code>RABBITMQ_BASE</code> may also contain useful diagnostic
                information.
            </p>
          </dd>
        </dl>
        <p>
          If the server is not behaving as expected during operation,
          examine the log files and use the rabbitmqctl
          commands from the <a href="admin-guide.html">admin guide</a>
          to obtain further information on the server status.
        </p>
        <p>
          For problems encountered in the handling of AMQP traffic,
          the <a href="examples.html#tracer">AMQP capture and analysis
          tool</a> may help in the analysis.
        </p>
        <p>
          Failing that, it's possible that we've solved the problem for someone else.
          Try using the search box at the top of our web pages to find site,
          mailing list and blog information.
           You might also check our
          <a href="http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/">mailing list archives</a>.
        </p>
        <p>
          If you still can't find a solution to your problem then
          please post a new message to
          <a href="mailto:rabbitmq-discuss@lists.rabbitmq.com">rabbitmq-discuss@lists.rabbitmq.com</a>
          (you may have to
          <a href="http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss">
          join the mailing list first</a>).
          Let us know what you were trying to do, the error you received and
          relevant entries from the logfile and one of our engineers will help you get it fixed.
        </p>
        <p>
          If all of the above fails, please <a href="contact.html">tell us about the problem</a>,
          including the log files under <b>RABBITMQ_LOG_BASE</b> in your report.
        </p>
      </doc:section>

    </doc:div>
  </body>
</html>
