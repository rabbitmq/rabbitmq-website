<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html PUBLIC "bug in xslt processor requires fake doctype" 
"otherwise css isn't included" [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
]>
<html xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc">
  <head>
    <title>RabbitMQ - Installation</title>
  </head>
  <body>
    <doc:div>
      <p class="intro">
	This section contains server installation instructions for
	various platforms. You can download example programs,
	utilities, Java client libraries and bindings to various
	third-party management, monitoring and routing tools from <a
	href="http://www.rabbitmq.com/">http://www.rabbitmq.com/</a>.
      </p>

      <doc:toc class="compact">
	<doc:heading>Table of Contents</doc:heading>
      </doc:toc>

      <doc:section name="windows">
	<doc:heading>Windows</doc:heading>

	<doc:subsection name="install-windows-bundle">
	  <doc:heading>Installation from a complete bundle</doc:heading>

	  <p>
	    The bundle zip file contains all the files listed in the
	    next section, including an Erlang system installer and the
	    RabbitMQ broker binary distribution, the .Net client, as
	    well as an archive of the Java librabbitmq client library.
	  </p>
	</doc:subsection>

	<doc:subsection name="install-windows-separately">
	  <doc:heading>Installation from separate components</doc:heading>

	  <ul>
	    <li>
	      Install a recent version of Erlang/OTP. Versions R12B-3
	      and higher should work; we usually test against Erlang
	      R12B-5 on Windows, which can be downloaded from <a
	      href="http://www.erlang.org/download/otp_win32_R12B-5.exe">http://www.erlang.org/download/otp_win32_R12B-5.exe</a>
	    </li>
	    <li>
	      Download
	      <code>rabbitmq-server-<i>version</i>.zip</code>, where
	      <i>version</i> is the version of RabbitMQ Server you
	      want to install.
	    </li>
	    <li>
	      Contained in the zip file is a directory named
	      <code>rabbitmq_server-<i>version</i></code>.

	      You should extract this folder to somewhere appropriate
	      for application files, for example <code>&dir-server-windows;</code>. 
	      Once the files are successfully extracted, you should end up with a structure
	      similar to <code>&dir-server-windows;\rabbitmq_server-N.N.N</code>.
	      You will also need to set the environment
	      variable ERLANG_HOME to point to your Erlang directory
	      (e.g. <code>&dir-erlang-windows;</code>).
	      
	    </li>
	    <li>
	      Within the <code>sbin</code> directory is a file
	      <code>rabbitmq-server.bat</code> which may need
	      customisation for your installation, especially if you
	      use a different version of Erlang. Environment variables
	      set within the batch file are

	      <dl>
		<dt>ERLANG_HOME</dt>
		<dd>
		  Set this to the base directory of your Erlang
		  installation, e.g.

		  <code>&dir-erlang-windows;</code>.

		  The RabbitMQ batch file expects the file
		  <code>bin\erl.exe</code> to be present at this
		  location. The default setting determines the base
		  directory from the script location, which will work
		  in most cases.
		</dd>

		<dt>RABBITMQ_BASE</dt>
		<dd>
		  Defaults to the directory <code>RabbitMQ</code> in
		  the user's application data directory, e.g.

		  <code>C:\Documents and Settings\User\Application Data\RabbitMQ</code>.

		  Under Windows Vista the location would be slightly different, e.g.

		  <code>C:\Documents and Settings\User\AppData\Roaming\RabbitMQ</code>

		  This is the base directory containing
		  sub-directories for the RabbitMQ Server's database
		  and log files.  Alternatively, set
		  <b>RABBITMQ_MNESIA_BASE</b> and
		  <b>RABBITMQ_LOG_BASE</b> individually.
		</dd>

		<dt>RABBITMQ_MNESIA_BASE</dt>
		<dd>
		  Defaults to <code>%RABBITMQ_BASE%\db</code>. Set this to the
		  directory where Mnesia database files should be
		  placed.
		</dd>

		<dt>RABBITMQ_LOG_BASE</dt>
		<dd>
		  Defaults to <code>%RABBITMQ_BASE%\log</code>. Log files
		  generated by the server will be placed in this
		  directory.
		</dd>

		<dt>RABBITMQ_NODENAME</dt>
		<dd>
		  Defaults to <code>rabbit</code>. This can be useful
		  if you want to run more than one node per machine -
		  <b>RABBITMQ_NODENAME</b> should be unique per
		  erlang-node-and-machine combination. See
		  <a href="clustering.html#single-machine">
		    clustering on a single machine</a> for more.
		</dd>
		
		<dt>RABBITMQ_NODE_IP_ADDRESS</dt>
		<dd>
		  Defaults to <code>0.0.0.0</code>. This can be changed 
		  if you only want to bind to one network interface.
		  Please note that Windows 2000 (and maybe earlier
		  versions) do not understand "<code>0.0.0.0</code>" 
		  and will need to have this set explicitly.
		</dd>
		
		<dt>RABBITMQ_NODE_PORT</dt>
		<dd>
		  Defaults to <code>5672</code>.
		</dd>

		<dt>RABBITMQ_CLUSTER_CONFIG_FILE</dt>
		<dd>
		  Defaults to
		  <code>%RABBITMQ_BASE%\rabbitmq_cluster.config</code>. If
		  this file is present it is used by the server to
		  auto-configure a RabbitMQ cluster. See the <a
		  href="clustering.html">clustering guide</a> for
		  details.
		</dd>
		<dt>RABBITMQ_CONFIG_FILE</dt>
		<dd>
		  Defaults to
		  <code>%RABBITMQ_BASE%\rabbitmq</code>. If
		  this file is present it is used by the server to
		  configure RabbitMQ application components. Note that
		  the .config extension is automatically appended by
		  the Erlang runtime. See the section on <a
          href="#configfile">the configuration file</a> for details.
		</dd>
	      </dl>
	    </li>
	  </ul>
	</doc:subsection>

	<doc:subsection name="running-windows">
	  <doc:heading>Running the Server as an Application</doc:heading>

	  <p>
	    Currently, it's sufficient to change directory to

	    <code>rabbitmq_server-<i>version</i>\sbin</code>

	    and double-click the <code>rabbitmq-server.bat</code>
	    file.
	  </p>
	  <p>
	    The shell window that results displays a banner message,
	    and reports on progress in the startup sequence,
	    concluding with the message "broker running", indicating
	    that the RabbitMQ broker has been started successfully. To
	    shut down the server, close the shell
	    window. Alternatively, use the <a
	    href="rabbitmqctl.1.man.html#stop">rabbitmqctl stop</a> command.
	  </p>
	</doc:subsection>

        <doc:subsection name="running-windows-service">
          <doc:heading>Running the Server as a Service</doc:heading>
          <p>
            The server can be run as a service instead of an application. The server 
            will run in the security context of the system account, without the need
            for a user to be logged in on a console. The server should not be run as a 
            service and application simultaneously.
          </p>
          <p>
            <ul>
              <li>
                The <code>rabbitmq-service.bat</code> script in the
                <code>sbin</code> directory is used to manage the
                service.  The <code>rabbitmq-service.bat</code> script
                recognises many of the same environment variables as
                <code>rabbitmq-server.bat</code> (see <doc:link
                linkend="#install-windows-separately">the previous
                section</doc:link>), as well as a few additional
                ones. Of particular importance are:
                <dl>
                  <dt>RABBITMQ_BASE</dt>
                  <dd>
                    This is the base directory containing sub-directories for database and 
                    log files. The account that the service will run as must have read and 
                    write access to this location. The default location will not normally 
                    meet this requirement, so this variable must be set explicitly and the 
                    permissions must be verified.
                  </dd>
                  <dt>ERLANG_SERVICE_MANAGER_PATH</dt>
                  <dd>
                    The default value of this path is
                    <code>&dir-erlang-windows;\erts-5.7.4\bin</code>. The given path
                    must contain the <code>erlsrv.exe</code> Erlang service wrapper
                    script.
                  </dd>
                  <dt>RABBITMQ_SERVICENAME</dt>
                  <dd>
                    This name will appear in the list of services reported by
                    the operating system.
                  </dd>
                  <dt>RABBITMQ_CONSOLE_LOG</dt>
                  <dd>
                    Set this variable to <code>new</code> or
                    <code>reuse</code> to have the console output from
                    the server redirected to a file named
                    <code>RABBITMQ_SERVICENAME</code>.debug in the
                    default <code>RABBITMQ_BASE</code> directory. If
                    <code>RABBITMQ_CONSOLE_LOG</code> is set to
                    <code>new</code> then a new file will be created
                    each time the service starts. If
                    <code>RABBITMQ_CONSOLE_LOG</code> is set to
                    <code>reuse</code> then the file will be
                    overwritten each time the service starts.  If
                    <code>RABBITMQ_CONSOLE_LOG</code> is unset then
                    console output from the server will be discarded.
                 </dd>
                </dl>
              </li>
              <li>
                Log in as an administrator and open a command shell (<code>cmd.exe</code>) 
                in the <code>sbin</code> directory where the broker was installed. 
                Install the service by executing <pre class="sourcecode">rabbitmq-service.bat install</pre>
              </li>
              <li>
                Ensure that a service with the name <b>RABBITMQ_SERVICENAME</b>
                now appears in the services control panel (<code>services.msc</code>). 
                Confirm that the service account has full access to the <b>RABBITMQ_BASE</b>,
                <b>RABBITMQ_MNESIA_BASE</b> and <b>RABBITMQ_LOG_BASE</b>
                directories. 
              </li>
              <li>
                If the service account is different from the account that will 
                run the <code>rabbitmqctl.bat</code> script then the Erlang 
                security cookies for those accounts must be synchronised before
                running <code>rabbitmqctl.bat</code>. The cookie is stored in a 
                file named <code>.erlang.cookie</code> and stored in the home 
                or <code>%APPDATA%</code> directory of the account. Local service 
                account cookies are normally stored in <code>C:\WINDOWS\.erlang.cookie</code> 
                while user account cookies are typically stored in 
                <code><nobr>C:\Documents and Settings\User\.erlang.cookie</nobr></code>.
                The contents of the two cookie files must be identical.
              </li>
              <li>
                Execute <pre
                class="sourcecode">rabbitmq-service.bat start</pre> to
                start the server.  If the output from this command is
                "<code>Service <i>RABBITMQ_SERVICENAME</i>
                started</code>", then the service was started
                correctly. If the output reads "<code>The process
                terminated unexpectedly</code>" instead, then the
                service did not start correctly. Check that the
                environment variables are set correctly. The logfiles in
                <code>RABBITMQ_BASE</code> may also contain useful diagnostic
                information.
              </li>
              <li>
                Confirm that the service list in the operating system
                service list (<code>services.msc</code>) reports a
                "Started" status for the service named <b>RABBITMQ_SERVICENAME</b>.
              </li>
              <li>
                Ensure that the Erlang cookie file created by the service
                contains the same string as the one used by the account that
                will subsequently execute the <code>rabbitmqctl.bat</code> script. 
              </li>
            </ul>
          </p>
          <p>
            Refer to the <a href="service-guide.html">service</a> guide
            for a complete description of <code>rabbitmq-service.bat</code> 
            arguments. 
          </p>
        </doc:subsection>

	<doc:subsection name="logging-windows">
	  <doc:heading>Logging</doc:heading>
	  <p>
	    Output from the server is sent to a
	    <b>RABBITMQ_NODENAME</b>.log file in the
	    <b>RABBITMQ_LOG_BASE</b> directory. Additional log data is
	    written to <b>RABBITMQ_NODENAME</b>-sasl.log.
	  </p>
	  <p>
	    The log files are created afresh every time the broker
	    starts. In order to retain a complete log history the
	    startup scripts append the contents to the corresponding
	    <code>.1</code> files prior to starting the broker.
	  </p>
	  <p>
	    You can easily write your own log rotation script using the 
	    <code>rotate_logs_all</code> command in
	    <code>rabbitmq-multi.bat</code> or the <code>rotate_logs</code>
	    command in <code>rabbitmqctl.bat</code> if you want to perform
	    log rotation selectively.
	  </p>
	</doc:subsection>
      </doc:section>

      <doc:section name="debian">
	<doc:heading>Debian GNU/Linux and Ubuntu Linux</doc:heading>

	<doc:subsection name="install-debian">
	  <doc:heading>Installation Instructions</doc:heading>
	  <ul>
	    <li>
              Install the rabbitmq-server package from your chosen
              distribution - at the time of writing, RabbitMQ is
              included in Debian unstable (sid), Debian testing
              (squeeze), and Ubuntu 9.04 (Jaunty Jackalope) and
              onwards.
            </li>
            <li>
              Alternatively, install
              rabbitmq-server_<i>version</i>_all.deb, which you can
              download by hand, or by using our <a
              href="debian.html#apt">APT repository</a>. The server
              should start with appropriate defaults. Note that the
              package depends on erlang-base packages, so if you use
              apt on a Debian distribution that has erlang-base
              packages available, all dependencies should be properly
              met.
	    </li>
	    <li>
	      To adjust the settings used for starting the server,
	      edit <code>/etc/rabbitmq/rabbitmq.conf</code>, setting
	      environment variables as described in the <a
	      href="#generic-unix">Generic Unix</a> section below (but
	      dropping the RABBITMQ_ prefix). You can additionally set
	      <code>NODE_COUNT</code> in
	      <code>/etc/default/rabbitmq</code> to define <a
	      href="clustering.html#single-machine">the number of
	      nodes to run on a single machine</a>.
	    </li>
	  </ul>
	</doc:subsection>

	<doc:subsection name="running-debian">
	  <doc:heading>Running the Server</doc:heading>
	  <p>
	    The server is started as a daemon by default when the
	    RabbitMQ Server package is installed. Start and stop the
	    server as usual for Debian using <code>invoke-rc.d
	    rabbitmq-server <i>stop/start/etc</i></code>.
	  </p>
	  <p>
	    The server is set up to run as system user <code>rabbitmq</code>. 
	    This means that if you change the location 
	    of the Mnesia database or logs as described below, you must
	    ensure the files are owned by this user.
	  </p>
	  <p>
	    The startup script waits for a limited amount of time, 30
	    seconds by default, for the broker nodes to start. When
	    that time is exceeded a <code>TIMEOUT</code> is
	    reported. The cause of this could be a misconfiguration or
	    other error. However, it is also possible that the node
	    simply is taking a long time to start up, perhaps because
	    the machine it is running on is heavily loaded, or there
	    are many persisted messages or durable queues and
	    exchanges that need to be recovered. For that reason the
	    timeout can be adjusted by setting
	    <code>MULTI_START_ARGS</code> to
	    "<code>-maxwait <i>timeout_in_seconds</i></code>"
	    in <code>/etc/rabbitmq/rabbitmq.conf</code>.
	  </p>
	</doc:subsection>
	<doc:subsection name="logging-debian">
	  <doc:heading>Logging</doc:heading>
	  <p>
	    Output from the server is sent to a
	    <b>RABBITMQ_NODENAME</b>.log file in the
	    <b>RABBITMQ_LOG_BASE</b> directory. Additional log data is
	    written to <b>RABBITMQ_NODENAME</b>-sasl.log.
	  </p>
	  <p>
	    The log files use <code>logrotate</code> program to do all
	    the necessary rotation and compression (when needed). The
	    script runs weekly, but you can easily change that. By default
	    <code>logrotate</code> will handle files located in default
	    <code>/var/log/rabbitmq</code> directory. See
	    <code>/etc/logrotate.d/rabbitmq-server</code> for default
	    <code>logrotate</code> configuration file.
	  </p>
	</doc:subsection>
      </doc:section>

      <doc:section name="rpm">
	<doc:heading>RPM based Linux (CentOS, Fedora, OpenSuse, RedHat, etc.)</doc:heading>
	
	<doc:subsection name="install-rpm">
	  <doc:heading>Installation Instructions</doc:heading>
	  <ul>
            <li>
              The RabbitMQ server is included in Fedora, so for Fedora
              and RHEL users we recommend to install the
              <i>rabbitmq-server</i> package via the distribution's
              package manager.
            </li>
	    <li>
              Alternatively, install
              rabbitmq-server-<i>version</i>-<i>architecture</i>.rpm
              (which you can download by hand at our <a
              href="server.html">download page</a>).  Note that the
              package depends on erlang package(s).  We strongly
              recommend using your distribution's packaged version of
              Erlang to run the server. See <a
              href="http://fedoraproject.org/wiki/EPEL">EPEL</a> if
              there is no official erlang package for your
              distribution.
	    </li>
	    <li>
	      To adjust the settings used for starting the server,
	      edit <code>/etc/rabbitmq/rabbitmq.conf</code>, setting
	      environment variables as described in the <a
	      href="#generic-unix">Generic Unix</a> section below. You
	      can additionally set <code>NODE_COUNT</code> in
	      <code>/etc/sysconfig/rabbitmq</code> to define
	      <a href="clustering.html#single-machine">the number of
	      nodes to run on a single machine</a>.
	    </li>
	  </ul>
	</doc:subsection>
	
	<doc:subsection name="running-rpm">
	  <doc:heading>Running the Server</doc:heading>
	  <p>
	    The server is not started as a daemon by default when the
	    RabbitMQ Server package is installed. Start and stop the
	    server as usual using <code>/sbin/service rabbitmq-server
	    <i>stop/start/etc</i></code>. To start the daemon by default
	    when the system boots, run <code>chkconfig rabbitmq-server on</code>.
	  </p>
	  <p>
	    The server is set up to run as system user <code>rabbitmq</code>. 
	    This means that if you change the location 
	    of the Mnesia database or logs as described below, you must
	    ensure the files are owned by this user.
	  </p>
	  <p>
	    The startup script waits for a limited amount of time, 30
	    seconds by default, for the broker nodes to start. When that
	    time is exceeded a <code>TIMEOUT</code> is reported. The
	    cause of this could be a misconfiguration or other
	    error. However, it is also possible that the node simply is
	    taking a long time to start up, perhaps because the machine
	    it is running on is heavily loaded, or there are many
	    persisted messages or durable queues and exchanges that need
	    to be recovered. For that reason the timeout can be adjusted
	    by setting <code>MULTI_START_ARGS</code> to
	    "<code>-maxwait <i>timeout_in_seconds</i></code>"
	    in <code>/etc/rabbitmq/rabbitmq.conf</code>.
	  </p>
	</doc:subsection>
	<doc:subsection name="logging-rpm">
	  <doc:heading>Logging</doc:heading>
	  <p>
	    Logging uses <code>logrotate</code> script in the same way
	    as for <a href="#logging-debian">Debian GNU</a>
	  </p>
	</doc:subsection>
      </doc:section>

      <doc:section name="macports">
	<doc:heading>Mac OS X with MacPorts</doc:heading>

	<p>
	  A portfile for the RabbitMQ server is included in <a
	  href="http://www.macports.org/">MacPorts</a>. From the
	  MacPorts home page:
	</p>
	<blockquote>
	  The MacPorts Project is an open-source community
	  initiative to design an easy-to-use system for compiling,
	  installing, and upgrading either command-line, X11 or Aqua
	  based open-source software on the Mac OS X operating
	  system.
	</blockquote>
        <p>
          Users of Mac OS X who do not use MacPorts can use the <a
          href="#generic-unix">Generic Unix</a> installation
          instructions below.
        </p>
	<p>
          The officially released MacPorts packaging may not always
          contain the lastest released version of RabbitMQ.  If you
          wish to install the latest version via MacPorts, we maintain
          a dedicated <a href="macports.html">MacPorts repository</a>
          for this purpose.
        </p>

	<doc:subsection name="install-macports">
	  <doc:heading>Installation Instructions</doc:heading>
	  <p>
	    Installation of the version of the RabbitMQ server
	    distributed with MacPorts is as simple as (<code>sudo port
	    sync</code> followed by)
	  </p>
	  <pre class="sourcecode">sudo port install rabbitmq-server</pre>
	</doc:subsection>
	<doc:subsection name="running-macports">
	  <doc:heading>Running the Server</doc:heading>
	  <p>
	    To start the server, you can either use launchctl (see the
	    instructions emitted during the <code>sudo port
	    install</code> step) or you can start it from the command
	    line with <code>sudo rabbitmq-server</code>.
	  </p>
	  <p>
            The <code>rabbitmq-server</code>,
            <code>rabbitmqctl</code>, and other RabbitMQ-related
            scripts on the path automatically (through sudo) run in
            the context of the rabbitmq user so that the Erlang cookie
            can be read from
            <code>$MACPORTS_PREFIX/var/lib/rabbitmq/.erlang.cookie</code>.
	  </p>
	</doc:subsection>
      </doc:section>

      <doc:section name="generic-unix">
	<doc:heading>Generic Unix or Linux (BSD, Mac OS X, etc.)</doc:heading>

	<doc:subsection name="install-generic-unix">
	  <doc:heading>Installation Instructions</doc:heading>

	  <ul>
	    <li>
	      Install a recent version of Erlang.
	    </li>
	    <li>
	      Download
	      <code>rabbitmq-server-generic-unix-<i>version</i>.tar.gz</code>,
	      where <i>version</i> is the version of RabbitMQ Server
	      you want to install.
	    </li>
	    <li>
	      Contained in the tarball is a directory named
	      <code>rabbitmq_server-<i>version</i></code>. You should
	      extract this into somewhere appropriate for application
	      binaries on your system.
	    </li>
	    <li>
	      Within the <code>sbin</code> directory is a shell script
	      <code>rabbitmq-server</code> which may need
	      customisation for your installation. Environment
	      variables available for configuration are

	      <dl>
		<dt>RABBITMQ_MNESIA_BASE</dt>
		<dd>
		  Defaults to
		  <code>/var/lib/rabbitmq/mnesia</code>. Set this to
		  the directory where Mnesia database files should be
		  placed.
		</dd>

		<dt>RABBITMQ_LOG_BASE</dt>
		<dd>
		  Defaults to <code>/var/log/rabbitmq</code>. Log
		  files generated by the server will be placed in this
		  directory.
		</dd>

		<dt>RABBITMQ_NODENAME</dt>
		<dd>
		  Defaults to <code>rabbit</code>. This can be useful
		  if you want to run more than one node per machine -
		  <b>RABBITMQ_NODENAME</b> should be unique per
		  erlang-node-and-machine combination. See 
		  <a href="clustering.html#single-machine">
		    clustering on a single machine</a> for more.
		</dd>
		
		<dt>RABBITMQ_NODE_IP_ADDRESS</dt>
		<dd>
		  Defaults to <code>0.0.0.0</code>. This can be changed 
		  if you only want to bind to one network interface.
		</dd>
		
		<dt>RABBITMQ_NODE_PORT</dt>
		<dd>
		  Defaults to <code>5672</code>.
		</dd>
		<dt>RABBITMQ_CLUSTER_CONFIG_FILE</dt>
		<dd>
		  Defaults to
		  <code>/etc/rabbitmq/rabbitmq_cluster.config</code>. If
		  this file is present it is used by the server to
		  auto-configure a RabbitMQ cluster. See the <a
		  href="clustering.html">clustering guide</a>
		  for details.
		</dd>
		<dt>RABBITMQ_CONFIG_FILE</dt>
		<dd>
		  Defaults to
		  <code>/etc/rabbitmq/rabbitmq</code>. If
		  this file is present it is used by the server to
		  configure RabbitMQ application components. Note that
		  the .config extension is automatically appended by
		  the Erlang runtime. See the section on <a
          href="#configfile">the configuration file</a> for details.
		</dd>
	      </dl>
	    </li>
	  </ul>
	</doc:subsection>

	<doc:subsection name="running-generic-unix">
	  <doc:heading>Running the Server</doc:heading>

	  <p>
	    Invoke the <code>rabbitmq-server</code> shell script.
	    This displays a banner message, and reports on progress in
	    the startup sequence, concluding with the message "broker
	    running", indicating that the RabbitMQ broker has been
	    started successfully. To shut down the server just
	    terminate the process. Alternatively, use the <a
	    href="rabbitmqctl.1.man.html#stop">rabbitmqctl stop</a> command.
	  </p>
	  <p>
	    You can also start the server in "detached" mode with
	    <code>rabbitmq-server -detached</code>, in which case the
	    server process is backgrounded immediately and nothing is
	    written to the console.
	  </p>
	</doc:subsection>
	
	<doc:subsection name="logging-generic-unix">
	  <doc:heading>Logging</doc:heading>
	  <p>
	    Output from the server is sent to a
	    <b>RABBITMQ_NODENAME</b>.log file in the
	    <b>RABBITMQ_LOG_BASE</b> directory. Additional log data is
	    written to <b>RABBITMQ_NODENAME</b>-sasl.log.
	  </p>
	  <p>
	    In order to retain a complete log history the startup scripts,
	    by default, append the contents to the corresponding <code>.1</code>
	    files prior to starting the broker.
	    You can easily set up log rotation process by creating 
	    <code>logrotate</code> script as it is done for
	    <a href="#logging-debian">Debian and RPM based distributions</a>.
	  </p>
	</doc:subsection>
      </doc:section>

      <doc:section name="troubleshooting">
	<doc:heading>Troubleshooting</doc:heading>
	<p>
	  If the server fails to start, examine the console output and
	  the log files in the <b>RABBITMQ_LOG_BASE</b> directory for
	  clues.  Chances are there is a configuration error, e.g. the
	  mnesia directory cannot be created or the TCP port on which
	  RabbitMQ tries to listen is already taken.
	</p>
	<p>
	  When the server fails to start, usually a crash dump file
	  <code>erl_crash.dump</code> is created in the directory
	  where the server was started. This can provide very detailed
	  information on the causes of a start up failure, but its
	  analysis requires Erlang expertise.
	</p>
	<p>
	  If the server is not behaving as expected during operation,
	  examine the log files for clues and use the rabbitmqctl
	  commands from the <a href="admin-guide.html">admin guide</a>
	  to obtain further information on the server status.
	</p>
	<p>
	  For problems encountered in the handling of AMQP traffic,
	  the <a href="examples.html#tracer">AMQP capture and analysis
	  tool</a> may help in the analysis.
	</p>
	
	<p>
	  Failing that, it's possible that we've solved the problem for 
	  someone else on our 
	  <a href="http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/">mailing list archives</a>
	  a Google search for something like 
	  <a href="http://www.google.co.uk/search?q=erl_crash.dump+site%3Alists.rabbitmq.com">erl_crash.dump 
	  site:lists.rabbitmq.com</a> should do the trick, possibly also 
	  adding terms for your platform, RabbitMQ/Erlang versions and 
	  anything else relevant to what you were trying to do when things 
	  went wrong.
	</p>

	<p>
	  If you can't find a solution to your problem on the list archive then
	  please post a new message to rabbitmq-discuss@lists.rabbitmq.com (you may have 
	  to <a href="http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss">join 
	  the mailing list first</a>). Let us know
	  what you were trying to do, the error you received and a copy of the crash dump
	  and one of our engineers will help you get it fixed.
	</p>
	
	<p>
	  If all of the above fails, report the problem to <a
	  href="mailto:support@rabbitmq.com">support@rabbitmq.com</a>
	  and include the log files under <b>RABBITMQ_LOG_BASE</b> in
	  your report.
	</p>

      </doc:section>

      <doc:section name="configfile">
	      <doc:heading>Configuration File</doc:heading>
	      <p>
          The Rabbit configuration file allows for the rabbit core application,
          Erlang services and Rabbit plugins to be configured. This configuration
          file is a standard Erlang configuration file, as documented on the
          <a href="http://www.erlang.org/doc/man/config.html">Erlang Config Man Page</a>.
        </p>
        <p>
          The location of this configuration file is distribution specific. By default, it is
          located in the following places on each platform:
          <ul>
            <li><b>Windows</b> - %APPDATA%\RabbitMQ\rabbitmq.config</li>
            <li><b>Debian</b> - /etc/rabbitmq/rabbitmq.config</li>
            <li><b>RPM</b> - /etc/rabbitmq/rabbitmq.config</li>
            <li><b>MacOS (Macports)</b> - /opt/local/etc/rabbitmq/rabbitmq.config</li>
            <li><b>Generic UNIX</b> - /etc/rabbitmq/rabbitmq.config</li>
          </ul>
      	</p>
        <p>
          Note that this file is not the same as the
          <code>rabbitmq.conf</code> mentioned elsewhere -
          <code>rabbitmq.conf</code> can be used to set the environment
          variables mentioned on this page, while
          <code>rabbitmq.config</code> contains an Erlang term. A
          future release of RabbitMQ will unify the two configuration
          mechanisms.
        </p>
	    <p>
          Note that this file may not be created by default. If needed, it can be created manually. The
          location can also be overidden via the <b>RABBITMQ_CONFIG_FILE</b> environment variable. Note
          that the property value should not include the .config extension - this is automatically appended
          by the Erlang runtime.
        </p>
        <p>
          An example configuration file would look like:
        </p>
        <p>
<pre class="sourcecode">
  [
    {mnesia, [{dump_log_write_threshold, 1000}]},
    {rabbit, []}
  ].
</pre>
	      </p>
        <p>
          This configuration file will alter the dump_log_write_threshold for mnesia (increasing from the default
          of 100).
        </p>
      </doc:section>
    </doc:div>
  </body>
</html>
