<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html PUBLIC "bug in xslt processor requires fake doctype"
"otherwise css isn't included" [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
]>
<html xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc">
  <head>
    <title>RabbitMQ - Installation</title>
  </head>
  <body>
    <doc:div>
      <div id="install_intro" class="intro">
        <p>
          Here you can find instructions to get your 
          <a href="server.html"> Server Download</a> 
          installed and running for your chosen platform.
        </p>
        <h2>Summary</h2>
        <p>
          Each installation requires Erlang, which also provides 
          Mnesia (DBMS) and logging support for the Brokers.
          Mnesia and Log Directories may need read/write 
          permissions for the service account.
        </p>
        <p>
          Management scripts start and stop the Broker, 
          and set up a default Environment.
          Scripts and commands need to run as a privileged user e.g. 
          an administrator on Windows, or with root permission 
          (eg sudo) on Unix-like systems.         
        </p>
        <p>
          If you use non-default file locations, account 
          or service names or ports, 
          these Environment Variables should be edited as described.<br/>
          Other configuration may be defined in a .config file using the 
          <a href="#configfile">Configuration</a> example.
        </p>
        <p>
        These are the steps, done manually or via a packager:
        <ol>
        <li>Install Erlang</li>
        <li>Install RabbitMQ Server </li>
        <li>Configure environment</li>
        <li>Start Service or daemon</li>
        </ol>
        </p>
      </div>

      <div id="install_toc" class="col" >
      <doc:toc class="compact">
        <doc:heading>RabbitMQ Server Installation</doc:heading>
      </doc:toc>
      </div>
      
      <div id="install_windows">
      <doc:section name="windows">
        <doc:heading>Windows</doc:heading>

        <doc:subsection name="install-windows-bundle">
          <doc:heading>Install from the Windows Bundle</doc:heading>
          <p>
            The Windows Bundle zip file contains an Erlang system installer and the
            RabbitMQ broker server binary distribution, needed for the next section. 
            It also includes .Net and Java client libraries for RabbitMQ.
          </p>
          <p>
            Just extract the files from the 
            <a href="server.html#windows_bundle">downloaded bundle</a> 
            then go through the following instructions for each component.
          </p>
        </doc:subsection>

        <doc:subsection name="install-windows-separately">
          <doc:heading>Install Server Components</doc:heading>
          <div class="instructions">
            <dl>
              <dt>Install Erlang</dt>
              <dd>
                Install a recent version of Erlang/OTP. 
                Versions R13B03 and higher should work on Windows.<br/>
                e.g <a href="http://www.erlang.org/download/otp_win32_R13B03.exe">
                http://www.erlang.org/download/otp_win32_R13B03.exe</a>.<br/>
                Using default options, Erlang will appear in the Start Menu, 
                and <code>\erl&version-erlang;\bin\erl.exe</code> will be in
                <nobr><code>&dir-win-apps;</code> or
                <code>&dir-win64-apps;</code></nobr>.
              </dd>
            </dl>
          </div>
          <div class="environment-variables">
            <dl>
              <dt>ERLANG_HOME</dt>
              <dd>
                <p>
                  Set ERLANG_HOME to where you actually put your Erlang installation, e.g.
                  <code>&dir-erlang-windows;</code> (full path).
                  The RabbitMQ batch files expect 
                  <code>\bin\erl.exe</code> to be in this
                  directory.
                </p>
                <p>
                  Go to Start>Settings>Control Panel>System>Advanced>Environmment Variables. 
                  Create the System Environment Variable ERLANG_HOME 
                  and set it to the full path of the directory which contains 
                  <code>bin\erl.exe</code>.
                </p>
              </dd>
            </dl>
          </div>
          
          <div class="instructions">
            <dl>
              <dt>Install RabbitMQ Server</dt>
              <dd>
                <p>
                 Download <code>rabbitmq-server-windows-&version-server;.zip</code>
                 from the <a href="server.html">download page</a>.
                </p>
                <p>
                 From the zip file, extract the folder named
                 <code>rabbitmq_server-&version-server;</code> 
                 into <code>&dir-server-windows;</code> 
                 (or somewhere suitable for application files).
                </p>
                <p>
                 <em>Hint:</em> Save time, create an Environment Variable 
                 RABBITMQ_SERVER for  
                 <code>"&dir-server-windows;\rabbitmq_server-&version-server;"</code>
                 </p>
              </dd>
            </dl>
            </div>
         </doc:subsection>

        <doc:subsection name="find-rabbitmq-on-windows">
          <doc:heading>Find Command Scripts and App Data</doc:heading>
          <div class="instructions">
            <dl> 
              <dt>Commands for RabbitMQ Server</dt>
              <dd>
                <p>
                 Within the <code>rabbitmq_server-&version-server;\sbin</code>
                 directory are some scripts which run commands to control the RabbitMQ Server.
                </p>
                <p>
                  The RabbitMQ Server can be run as either an Application or Service (not both).
                </p>                
                <ul>
                    <li><b>rabbitmq-server.bat</b> starts the broker as an Application.</li>
                    <li><b>rabbitmq-service.bat</b> manages the Service and starts the broker.</li>
                    <li><b>rabbitmqctl.bat</b> manages a running broker.</li>
                </ul>
                <p>
                Log in as an administrator. To see the output, 
                run these from a Command Prompt in the 
                <code>sbin</code> directory. 
                </p>
                <p>
                <em>Note: </em>On Vista/Windows7 you will need to 
                elevate privilege (right click on the icon in top left 
                of the window to select Run as Administrator).
                </p>
                <p>
                <em>Hint:</em> Add <code>;%RABBITMQ_SERVER%\sbin</code>
                  to your System Path (aka %PATH%), 
                  so the system can find the commands directly from 
                  Start > Run or from any (administrator) Command Prompt.
                </p>
              </dd>
              <dt>Finding Application Data</dt>
              <dd>
              <p>
                By default, the RabbitMQ Mnesia database and Logs 
                are within the current user's Application Data directory. 
                <nobr>Start > Run <code>%APPDATA%</code></nobr>,
                will find this e.g. 
                <code>&dir-win-user;\Application Data</code> or 
                <code>&dir-win-user;\AppData\Roaming</code> 
                (Windows Vista).
                </p>
              </dd>
            </dl>
          </div>
        </doc:subsection>

        <doc:subsection name="running-windows">
          <doc:heading>Run RabbitMQ Server as an Application</doc:heading>
          <p>
            The Application is started by <code>rabbitmq-server.bat</code> 
            script in <code>sbin</code>. 
          </p>

          <dl class="instructions">
            <dt>Customise RabbitMQ Server Environment Variables</dt>
            <dd>
                You may need to customise <code>rabbitmq-server.bat</code> 
                for your installation, 
                especially if you use a different version of Erlang. 
                Environment variables set within the batch file are:
            </dd>
          </dl>

          <div class="environment-variables">
            <dl>
              <dt>RABBITMQ_BASE</dt>
              <dd>
                  Defaults to the directory <code>RabbitMQ</code> in %APPDATA%.
                  This base directory contains sub-directories for the 
                  RabbitMQ Server's database
                  and log files. Alternatively, set
                  <b>RABBITMQ_MNESIA_BASE</b> and
                  <b>RABBITMQ_LOG_BASE</b> individually.
              </dd>

              <dt>RABBITMQ_MNESIA_BASE</dt>
              <dd>
                  Defaults to <code>%RABBITMQ_BASE%\db</code>. 
                  Set this to the directory where Mnesia database files 
                  should be placed.
              </dd>

              <dt>RABBITMQ_LOG_BASE</dt>
              <dd>
                  Defaults to <code>%RABBITMQ_BASE%\log</code>. Log files
                  generated by the server will be placed in this
                  directory.
              </dd>

              <dt>COMPUTERNAME</dt>
              <dd>
                  Defaults to <code>localhost</code>.
              </dd>
              
              <dt>RABBITMQ_NODENAME</dt>
              <dd>
                  Defaults to <code>rabbit@%COMPUTERNAME%</code>.
                  This can be useful
                  if you want to run more than one node per machine -
                  <b>RABBITMQ_NODENAME</b> should be unique per
                  erlang-node-and-machine combination. See
                  <a href="clustering.html#single-machine">
                    clustering on a single machine</a> for more.
              </dd>

              <dt>RABBITMQ_NODE_IP_ADDRESS</dt>
              <dd>
                  Defaults to <code>0.0.0.0</code>. 
                  Setting this to a specific interface address will cause 
                  the Server to bind to that interface only.<br/>
                  Please note that Windows 2000 (and maybe earlier
                  versions) do not understand "<code>0.0.0.0</code>"
                  and will need to have this set explicitly.
              </dd>

              <dt>RABBITMQ_NODE_PORT</dt>
              <dd>
                  Defaults to <code>5672</code>.
              </dd>

              <dt>RABBITMQ_CONFIG_FILE</dt>
              <dd>
                  Defaults to
                  <code>%RABBITMQ_BASE%\rabbitmq</code>. If this file
                  is present it is used by the server to configure
                  RabbitMQ application components. Note that the
                  .config extension is automatically appended by the
                  Erlang runtime. See the section on <a
                  href="#configfile">the configuration file</a> for
                  details.  Note that this file is also used to
                  auto-configure RabbitMQ clusters.  See the <a
                  href="clustering.html">clustering guide</a> for
                  details.
              </dd>
            </dl>
          </div>

          <dl class="instructions">
            <dt>Starting the Server Application</dt>
            <dd>
              <p>
               Run the command <pre class="sourcecode">rabbitmq-server -detached</pre>
               Alternatively, you can double-click the 
               <code>rabbitmq-server.bat</code> file in Explorer.
              </p>               
              <p>
                This script only starts the broker. 
                If you enter other options they are ignored, 
                but the command may attempt to start a second broker.
                If you try to start another broker application you may get a 
                <a href="#troubleshooting">crash dump</a> response.
              </p>
              <p>
               If you start by double-clicking a Command Prompt window opens, 
               displays a banner message, reports on progress in the startup sequence, 
               and concludes with "broker running". 
               This shows that the RabbitMQ broker has been started successfully.
              </p>
              <p>
              If you started without the <code>-detached</code> option, 
              e.g. by double clicking, you will need a second Command Prompt 
              window to control the application cleanly.
              <em>Note:</em> closing the original Command Prompt window 
              will also shut down a server started this way.
              </p>
            </dd>
             
            <dt>Stopping and Managing the Broker</dt>
            <dd>
             Use the <a href="#managing-windows">rabbitmqctl</a> commands.
            </dd>
          </dl>
        </doc:subsection>

        <doc:subsection name="running-windows-service">
          <doc:heading>Run RabbitMQ Server as a Service</doc:heading>
          <p>
            The service will run in the security context of the system account 
            without the need for a user to be logged in on a console. 
            This is normally more appropriate for production use. 
            The server should not be run as a
            service and application simultaneously.
          </p>
          <p>
              The Service runs using the <code>rabbitmq-service.bat</code> 
              script in <code>sbin</code>. 
          </p>

          <dl class="instructions">
            <dt>Customise RabbitMQ Service Environment Variables</dt>
            <dd>
                   The <code>rabbitmq-service.bat</code> script
                   recognises many of the same environment variables as
                   <code>rabbitmq-server.bat</code> (see <doc:link
                   linkend="#running-windows">the previous
                   section</doc:link>), as well as a few additional
                   ones. Of particular importance are:
            </dd>
          </dl>

          <div class="environment-variables">
            <dl>
              <dt>RABBITMQ_BASE</dt>
              <dd>
                    This is the location of database and
                    log directories. The account that the service will run as must have read and
                    write access to this location. 
                    If the default location %APPDATA%  
                    does not meet this requirement, 
                    this variable must be set explicitly and the permissions must be verified.
              </dd>
                  
              <dt>ERLANG_SERVICE_MANAGER_PATH</dt>
              <dd>
                    The default value of this path is
                    <code>&dir-erlang-windows;\&dir-erlang-erts;\bin</code>. 
                    This is the location of <code>erlsrv.exe</code> the Erlang service wrapper script.
              </dd>
                  
              <dt>RABBITMQ_SERVICENAME</dt>
              <dd>
                    Defaults to RabbitMQ. This name will appear in the list of services reported by
                    the operating system.
              </dd>
                  
              <dt>RABBITMQ_CONSOLE_LOG</dt>
              <dd>
                    Set this variable to <code>new</code> or <code>reuse</code> 
                    to redirect console output from the server to a file named 
                    <code>RABBITMQ_SERVICENAME</code>.debug in the
                    default <code>RABBITMQ_BASE</code> directory.<br/>
                    If not set, console output from the server will be discarded (default).<br/>
                    <code>new</code> A new file will be created
                    each time the service starts.<br/>
                    <code>reuse</code> The file will be overwritten each time the service starts.
              </dd>
            </dl>
          </div>

          <div class="instructions">
            <dl>
              <dt>Install the Service</dt>
              <dd>
                <p>
                Install the service by running
                <pre class="sourcecode">rabbitmq-service install</pre>
               </p>
               <p>
                A service with the name defined by <b>RABBITMQ_SERVICENAME</b>
                should now appear in the Windows Services control panel 
                <nobr>(Start > Run  <code>services.msc</code>).</nobr>
                Check the service account has full access to the <b>RABBITMQ_BASE</b>,
                <b>RABBITMQ_MNESIA_BASE</b> and <b>RABBITMQ_LOG_BASE</b>
                directories (Security tab in Properties).
                </p>
              </dd>
               
              <dt>Starting the Service</dt>
              <dd>
                <p>
                To start the server, execute
                <pre class="sourcecode">rabbitmq-service start</pre>
                </p>
                <p>
                If the output from this command is
                "<code>Service <i>RABBITMQ_SERVICENAME</i>
                started</code>", then the service was started
                correctly.
                </p>
                <p>
                If the output reads "<code>The process
                terminated unexpectedly</code>" instead, then the
                service did not start correctly. Check that the
                environment variables are set correctly. The logfiles in
                <code>RABBITMQ_BASE</code> may also contain useful diagnostic
                information.
                </p>
                <p>
                Confirm the service named <b>RABBITMQ_SERVICENAME</b> 
                reports a "Started" status in Services: <br/>
                Start > Run <code>services.msc</code>.
                </p>
              </dd>
                
              <dt>Managing the Service</dt>
              <dd>
                <p>
                To manage the service (install, remove, enable, start etc), use 
                <code>rabbitmq-service.bat</code> commands. 
                Refer to the <a href="service-guide.html">service</a> guide for more info, 
                and for troubleshooting guidance.
                You can also use the Windows Services panel (<code>services.msc</code>).
                </p>
              </dd>
                
              <dt>Stopping and Managing the Broker</dt>
              <dd>
                Use the <a href="#managing-windows">rabbitmqctl</a> commands.
              </dd>
            </dl>
          </div>
        </doc:subsection>

        <doc:subsection name="managing-windows">
          <doc:heading>Manage the Broker</doc:heading>
          <p>
               To stop the broker or check its status, use
               <code>rabbitmqctl.bat</code> in 
               <code>sbin</code> (as an administrator).
          </p>

          <dl class="instructions">
            <dt>Synchronise Erlang Cookies</dt>
            <dd>
              <p>
                 Erlang Security Cookies must be synchronised before
                 running <code>rabbitmqctl.bat</code>.
              </p>
              <p>
                 Local service account cookies are normally stored in 
                 <code>C:\WINDOWS\.erlang.cookie</code>
                 while user account cookies are typically stored in either 
                 <code>%APPDATA%</code> or the home directory of the account e.g.
                 <code><nobr>&dir-win-user;\.erlang.cookie</nobr></code>.
                 To ensure that these Erlang cookie files contain the same string, 
                 copy the <code>.erlang.cookie</code>file from the windows directory 
                 to replace the user account cookie.
              </p>
            </dd>
               
            <dt>Stopping the Broker</dt>
            <dd>
              <p>
                 Use <code>rabbitmqctl stop</code>.
              </p>
            </dd>
               
            <dt>Checking the Broker Status</dt>
            <dd>
              <p>
                 Use <code>rabbitmqctl status</code>.
                 All rabbitmqctl commands will report the node absence 
                 if no broker is running (i.e. nodedown).
              </p>
            </dd>
          </dl>
          <p>
             More  <a href="man/rabbitmqctl.1.man.html">info on rabbitmqctl commands</a>
          </p>
          <p>
            More <a href="admin-guide.html">info on  administration</a>
          </p>
        </doc:subsection>

        <doc:subsection name="logging-windows">
          <doc:heading>Logging</doc:heading>
          <p>
            Output from the server is sent to a
            <b>RABBITMQ_NODENAME</b>.log file in the
            <b>RABBITMQ_LOG_BASE</b> directory. Additional log data is
            written to <b>RABBITMQ_NODENAME</b>-sasl.log.
          </p>
          <p>
            The log files are created afresh every time the broker
            starts. In order to retain a complete log history the
            startup scripts append the contents to the corresponding
            <code>.1</code> files prior to starting the broker.
          </p>
          <p>
            You can rotate logs using <code>rabbitmqctl rotate_logs</code> or 
            <code>rabbitmq-multi rotate_logs</code>.
            You can write a script to use these commands.
          </p>
        </doc:subsection>
      </doc:section>
      </div>
      
      <div id="install_linux">
      <doc:section name="debian">
        <doc:heading>Debian GNU/Linux and Ubuntu Linux</doc:heading>

        <doc:subsection name="install-debian">
          <doc:heading>Install the Server</doc:heading>
          <div class="instructions">
            <dl>
            <dt>Install from a package</dt>
            <dd>
            <p>
              Install the rabbitmq-server package  - at the time of writing, RabbitMQ is
              included in Debian unstable (sid), Debian testing
              (squeeze), and Ubuntu 9.04 (Jaunty Jackalope) and
              onwards.
            </p>
            <p>
              Alternatively, install <code>
              rabbitmq-server_&version-server;-&serverDebMinorVersion;_all.deb</code>
              from the
              <a href="server.html">download page</a>, or by using our <a
              href="debian.html#apt">APT repository</a>. 
              </p>
              <p>
              If you use apt on a Debian distribution that has erlang-base
              packages available, all dependencies should be automatically met.
            </p>
            </dd>            
            </dl>
          </div>
        </doc:subsection>

        <doc:subsection name="running-debian">
          <doc:heading>Run RabbitMQ  Server</doc:heading>
          <div class="instructions">
            <dl>
            <dt>Customise RabbitMQ Environment Variables</dt>
            <dd>
            <p>
              The server should start using defaults. 
              See the <a href="#generic-unix">Generic Unix</a> installation
              section below for how to set Environment Variables.
              You can also create/edit <code>/etc/rabbitmq/rabbitmq.conf</code>
              (Use the same names but drop the RABBITMQ_ prefix) e.g.
              <pre class="sourcecode">
#example conf file entries
#Rename the node
NODENAME=bunny
#Timeout in seconds
MULTI_START_ARGS="-maxwait 40"</pre>
              More <a href="http://www.rabbitmq.com/man/rabbitmq.conf.
5.man.html">info on using rabbitmq.conf</a>
            </p>
            <p>              
              You can additionally set
              <code>NODE_COUNT</code> in
              <code>/etc/default/rabbitmq</code> to define 
              <a href="clustering.html#single-machine">the number of
              nodes to run on a single machine</a>.
            </p>
            </dd>
            <dt>Starting the Server</dt>
            <dd>
            <p>
              The server is started as a daemon by default when the
              RabbitMQ Server package is installed.
            </p>
            <p>
              As an administrator, start and stop the 
              server as usual for Debian using 
            <code>invoke-rc.d rabbitmq-server <i>stop/start/etc</i></code>.
            </p>
            <p>
              <em>Note: </em>The server is set up to run as system user
              <code>rabbitmq</code>.
              If you change the location of the Mnesia database or the logs,
              you must ensure the files are owned by this user
              (and also update the Environment Variables).
            </p>
            </dd>
            </dl>
          </div>
        </doc:subsection>
      </doc:section>

      <doc:section name="rpm">
        <doc:heading>RPM based Linux (CentOS, Fedora, OpenSuse, RedHat)</doc:heading>
          
        <doc:subsection name="install-rpm">
          <doc:heading>Install the Server</doc:heading>
          <div class="instructions">
            <dl>
            <dt>Install from a package</dt>
            <dd>
            <p>
              The RabbitMQ server is included in Fedora, so for Fedora
              and RHEL users we recommend to install the
              <i>rabbitmq-server</i> package via the distribution's
              package manager.
            </p>
            <p>
              Alternatively, install
              rabbitmq-server-&version-server;-<i>architecture</i>.rpm
              (which you can download from the 
              <a href="server.html">download page</a>).  
              Note that the package depends on Erlang package(s).
              We strongly recommend using your distribution's packaged
              version of Erlang to run the server. See <a
              href="http://fedoraproject.org/wiki/EPEL">EPEL</a> if
              there is no official Erlang package for your distribution.
            </p>
            </dd>
            </dl>
          </div>
        </doc:subsection>

        <doc:subsection name="running-rpm">
          <doc:heading>Run RabbitMQ Server</doc:heading>
          <div class="instructions">
            <dl>
            <dt>Customise RabbitMQ Environment Variables</dt>
            <dd>
            <p>
              The server should start using defaults.
              See the <a href="#generic-unix">Generic Unix</a> installation
              section below for how to set Environment Variables.
              You can also create/edit <code>/etc/rabbitmq/rabbitmq.conf</code>
              (Use the same names but drop the RABBITMQ_ prefix) e.g.
              <pre class="sourcecode">
#example conf file entries
#Rename the node
NODENAME=bunny
#Timeout in seconds
MULTI_START_ARGS="-maxwait 40"</pre>
              More <a href="http://www.rabbitmq.com/man/rabbitmq.conf.
5.man.html">info on using rabbitmq.conf</a>
            </p>
            <p>
              You can additionally set <code>NODE_COUNT</code> in
              <code>/etc/sysconfig/rabbitmq</code> to define
              <a href="clustering.html#single-machine">the number of
              nodes to run on a single machine</a>.
            </p>
            </dd>
            <dt>Starting the Server</dt>
            <dd>
            <p>
              The server is not started as a daemon by default when the
              RabbitMQ Server package is installed. To start the daemon by default
              when the system boots, as an administrator run 
              <code>chkconfig rabbitmq-server on</code>.
            </p>
            <p>
              As an administrator, start and stop the
              server as usual using <code>/sbin/service rabbitmq-server
              <i>stop/start/etc</i></code>.
            </p>
            <p>
              <em>Note: </em>The server is set up to run as system user
              <code>rabbitmq</code>.
              If you change the location of the Mnesia database or the logs,
              you must ensure the files are owned by this user
              (and also update the Environment Variables).
            </p>
            </dd>
            </dl>
          </div>
        </doc:subsection>
      </doc:section>

      <doc:section name="macports">
        <doc:heading>Mac OS X with MacPorts</doc:heading>
        <p>
          Users of Mac OS X who do not use MacPorts can use the <a
          href="#generic-unix">Generic Unix</a> installation
          instructions instead.
        </p>
        <p>
          A portfile for the RabbitMQ server is included in <a
          href="http://www.macports.org/">MacPorts</a>. From the
          MacPorts home page:
        </p>
        <blockquote>
          The MacPorts Project is an open-source community
          initiative to design an easy-to-use system for compiling,
          installing, and upgrading either command-line, X11 or Aqua
          based open-source software on the Mac OS X operating
          system.
        </blockquote>
        <p>
          RabbitMQ maintains a dedicated 
          <a href="macports.html">MacPorts repository</a>,
          which you should use to install the latest RabbitMQ Server version via MacPorts, 
          as officially released MacPorts packaging may not always 
          contain the lastest released version of RabbitMQ.<br/>
          (NB It can take a very long time to install other macport updates - 
          see <code>man port</code> for options).
        </p>

        <doc:subsection name="install-macports">
          <doc:heading>Install the server</doc:heading>
          <p>
            Installation of the version of the RabbitMQ server
            distributed with MacPorts is as simple as (<code>sudo port
            sync</code> followed by)
          </p>
          <pre class="sourcecode">sudo port install rabbitmq-server</pre>
        </doc:subsection>
        
        <doc:subsection name="running-macports">
          <doc:heading>Run RabbitMQ  Server</doc:heading>
          <p>
            To start the server, you can either use launchctl (see the
            instructions emitted during the <code>sudo port
            install</code> step) or you can start it from the command
            line with <code>sudo rabbitmq-server -detached</code>.
          </p>
          <p>
            The <code>rabbitmq-server</code>,
            <code>rabbitmqctl</code>, and other RabbitMQ-related
            scripts on the path automatically (through sudo) run in
            the context of the rabbitmq user, so that the Erlang cookie
            can be read from (sudo)
            <code>$MACPORTS_PREFIX/var/lib/rabbitmq/.erlang.cookie</code>.
          </p>
          <p>
            See the General Linux installation section for further information.
          </p>
        </doc:subsection>
      </doc:section>

      <doc:section name="generic-unix">
        <doc:heading>Generic Unix or Linux (BSD, Mac OS X)</doc:heading>

        <doc:subsection name="install-generic-unix">
          <doc:heading>Install the Server</doc:heading>
          <ul>
            <li>
              Install a recent version of Erlang.
            </li>
            <li>
              Download
              <code>rabbitmq-server-generic-unix-&version-server;.tar.gz</code>
              from the <a href="download.html">download page</a>.
            </li>
            <li>
              Contained in the tarball is a directory named
              <code>rabbitmq_server-&version-server;</code>. You should
              extract this into somewhere appropriate for application
              binaries on your system.
            </li>
            <li>
              Within the <code>sbin</code> directory is a shell script
              <code>rabbitmq-server</code> which may need
              customisation for your installation. Environment
              variables available for configuration are
            </li>
          </ul>
           
          <div class="environment-variables">
            <dl>
              <dt>RABBITMQ_MNESIA_BASE</dt>
              <dd>
                  Defaults to
                  <code>/var/lib/rabbitmq/mnesia</code>. Set this to
                  the directory where Mnesia database files should be
                  placed.
              </dd>

              <dt>RABBITMQ_LOG_BASE</dt>
              <dd>
                  Defaults to <code>/var/log/rabbitmq</code>. Log
                  files generated by the server will be placed in this
                  directory.
              </dd>

              <dt>RABBITMQ_NODENAME</dt>
              <dd>
                  Defaults to <code>rabbit</code>. This can be useful
                  if you want to run more than one node per machine -
                  <strong>RABBITMQ_NODENAME</strong> should be unique per
                  erlang-node-and-machine combination. See
                  <a href="clustering.html#single-machine">
                    clustering on a single machine</a> for more.
              </dd>

              <dt>RABBITMQ_NODE_IP_ADDRESS</dt>
              <dd>
                  Defaults to <code>0.0.0.0</code>. This can be changed
                  if you only want to bind to one network interface.
              </dd>

              <dt>RABBITMQ_NODE_PORT</dt>
              <dd>
                  Defaults to <code>5672</code>.
              </dd>

              <dt>RABBITMQ_CONFIG_FILE</dt>
              <dd>
                  Defaults to <code>/etc/rabbitmq/rabbitmq</code>. If
                  this file is present it is used by the server to
                  configure RabbitMQ application components. Note that
                  the .config extension is automatically appended by
                  the Erlang runtime. See the section on <a
                  href="#configfile">the configuration file</a> for
                  details.  Note that this file is also used to
                  auto-configure RabbitMQ clusters.  See the <a
                  href="clustering.html">clustering guide</a> for
                  details.
              </dd>
            </dl>
          </div>
          <p><em>Note:</em> If the directories 
                <strong>RABBITMQ_MNESIA_BASE</strong> and
                <strong>RABBITMQ_LOG_BASE</strong> do not exist 
                the server will attempt to create them. 
                It is important that the server has write permission at these locations.
          </p>
        </doc:subsection>

        <doc:subsection name="running-generic-unix">
          <doc:heading>Run RabbitMQ Server</doc:heading>
          <p>
            Invoke the <code>rabbitmq-server</code> shell script.
            This displays a banner message, and reports on progress in
            the startup sequence, concluding with the message "broker
            running", indicating that the RabbitMQ broker has been
            started successfully. To shut down the server just
            terminate the process. Alternatively, use the <a
            href="man/rabbitmqctl.1.man.html#stop">rabbitmqctl stop</a> command.
          </p>
          <p>
            You can also start the server in "detached" mode with
            <code>rabbitmq-server -detached</code>, in which case the
            server process is backgrounded immediately and nothing is
            written to the console.
          </p>
        </doc:subsection>
      
        <doc:subsection name="logging-generic-unix">
          <doc:heading>Logging</doc:heading>
          <p>
            Output from the server is sent to a
            <b>RABBITMQ_NODENAME</b>.log file in the
            <b>RABBITMQ_LOG_BASE</b> directory. Additional log data is
            written to <b>RABBITMQ_NODENAME</b>-sasl.log.
          </p>
          <p>
            These log files are created afresh every time the broker starts. 
            In order to retain a complete log history the startup scripts 
            append the contents to the corresponding <code>.1</code>
            files prior to starting the broker.
          </p>
          <p>
            You can use the <code>logrotate</code> program 
            to do all necessary rotation and compression, 
            and you can change it. By default, 
            this script runs weekly on files located in default
            <code>/var/log/rabbitmq</code> directory. See
            <code>/etc/logrotate.d/rabbitmq-server</code> 
            to configure 
            <code>logrotate</code>.
          </p>
        </doc:subsection>        
      </doc:section>
      </div>
      
      <div id="install_info">
      <doc:section name="troubleshooting">
        <doc:heading>Troubleshooting</doc:heading>
        <dl class="instructions">
          <dt>Checking Broker Status</dt>
          <dd>
            <p>
              You can use <code>rabbitmqctl status</code> 
              to verify whether a broker is running.<br />
              A running broker status looks something like this:
              <pre>
  Status of node 'rabbit@xxx' ...
  [{running_applications,[{rabbit,"RabbitMQ","2.1.1"},
          {os_mon,"..."},
          {sasl,"..."},
          {mnesia,"..."},
          {stdlib,"..."},
          {kernel,"..."},
  {nodes,[{disc,['rabbit@xxx']}]}
  {running_nodes,['rabbit@xxx']}]</pre>
            </p>
            <p> 
              This example indicates that no broker is running:
              <pre>
  Status of node 'rabbit@xxx' ...  
  Error: unable to connect to node 'rabbit@xxx': nodedown
  diagnostics:
  - nodes and their ports on xxx: [{rabbitmqctl,...}]
  - current node: 'rabbitmqctl@xxx'
  - current node home dir: [...]
  - current node cookie hash: [...]</pre>
              If the diagnostic line looks like this:
              <pre>
  - nodes and their ports on xxx: [{rabbit,...},{rabbitmqctl,...}]</pre>
              then you should make sure the erlang cookies are the same.
            </p>
          </dd>
          <dt>Server Fails to Start</dt>
          <dd>
            <p>
              When the server fails to start, usually a crash dump file
              <code>erl_crash.dump</code> is created in the directory
              where the server was started. This can provide very detailed
              information on the causes of a start up failure, but its
              analysis requires Erlang expertise.
            </p> 
            <p>
              <pre>
          [...]
  Crash dump was written to: erl_crash.dump
  Kernel pid terminated (application_control,{shutdown,{kernel,start,[normal,[]]}}})</pre>
	      If you have simply tried to start another server while a broker is already running, 
	      then you could ignore this error report.
	      You can confirm whether the broker is running by checking the status.
            </p>
            <p>
              However, if the server fails to start, examine the console output and
              the log files in the <b>RABBITMQ_LOG_BASE</b> directory for
              clues.  Chances are there is a configuration error, e.g. the
              mnesia directory cannot be created or the TCP port on which
              RabbitMQ tries to listen is already taken.
            </p>
          </dd>
          <dt>Server Timeout on Start</dt>
          <dd>
          <p>
            By default, the startup script waits 30
            seconds for the broker nodes to start. 
            When that time is exceeded a <code>TIMEOUT</code> is reported.
            The cause of this could be a misconfiguration or other error.
          <p>
          </p>
            But maybe the node is just taking a long time to start up
            (perhaps because the machine it is running on is heavily loaded, or
            because many persisted messages or durable queues and
            exchanges need to be recovered). In this case, the
            timeout can be adjusted by setting the Environment Variable 
            <code>MULTI_START_ARGS</code> to
            "<code>-maxwait <i>timeout_in_seconds</i></code>" (eg using rabbitmq.conf).
          </p>
          </dd>
        </dl>        
        <p>
          If the server is not behaving as expected during operation,
          examine the log files for clues and use the rabbitmqctl
          commands from the <a href="admin-guide.html">admin guide</a>
          to obtain further information on the server status.
        </p>
        <p>
          For problems encountered in the handling of AMQP traffic,
          the <a href="examples.html#tracer">AMQP capture and analysis
          tool</a> may help in the analysis.
        </p>
        <p>
          Failing that, it's possible that we've solved the problem for
          someone else on our
          <a href="http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/">mailing list archives</a>
          a Google search for something like
          <a href="http://www.google.co.uk/search?q=erl_crash.dump+site%3Alists.rabbitmq.com">
          erl_crash.dump site:lists.rabbitmq.com</a> should do the trick, 
          possibly also adding terms for your platform, RabbitMQ/Erlang versions and
          anything else relevant to what you were trying to do when things went wrong.
        </p>
        <p>
          If you can't find a solution to your problem on the list archive then
          please post a new message to rabbitmq-discuss@lists.rabbitmq.com 
          (you may have to 
          <a href="http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss">
          join the mailing list first</a>). 
          Let us know what you were trying to do, the error you received and a 
          copy of the crash dump and one of our engineers will help you get it fixed.
        </p>
        <p>
          If all of the above fails, please <a href="contact.html">tell us about the problem</a>
          and include the log files under <b>RABBITMQ_LOG_BASE</b> in your report.
        </p>
      </doc:section>

      <doc:section name="configfile">
        <doc:heading>Configuration File</doc:heading>
        <p>
          The Rabbit configuration file <code>rabbitmq.config</code> 
          allows the rabbit core application,
          Erlang services and Rabbit plugins to be configured. 
          It is a standard Erlang configuration file, documented on the
          <a href="http://www.erlang.org/doc/man/config.html">Erlang Config Man Page</a>.
        </p>
        <p>
          The location of this configuration file is distribution specific. By default, it is
          located in the following places on each platform:
          <ul>
            <li><b>Windows</b> - %APPDATA%\RabbitMQ\rabbitmq.config</li>
            <li><b>Debian</b> - /etc/rabbitmq/rabbitmq.config</li>
            <li><b>RPM</b> - /etc/rabbitmq/rabbitmq.config</li>
            <li><b>MacOS (Macports)</b> - /opt/local/etc/rabbitmq/rabbitmq.config</li>
            <li><b>Generic UNIX</b> - /etc/rabbitmq/rabbitmq.config</li>
          </ul>
        </p>
        <p>
          If <code>rabbitmq.config</code> doesn't exist, it can be created manually. 
          The location can be changed via the 
          <b>RABBITMQ_CONFIG_FILE</b> Environment Variable. 
          The Erlang runtime automatically appends the .config extension to the Variable's value.
        </p>
        <p>
          An example configuration file would look like:
        </p>
        <p>
<pre class="sourcecode">
  [
    {mnesia, [{dump_log_write_threshold, 1000}]},
    {rabbit, []}
  ].
</pre>
        </p>
        <p>
          This example will alter the dump_log_write_threshold for mnesia 
          (increasing from the default of 100).
        </p>
        <p>
           This configuration file is not the same as 
          <code>rabbitmq.conf</code> which can be used to set Environment
          Variables. A future release of RabbitMQ will unify the two configuration
          mechanisms.
        </p>
      </doc:section>
       <doc:section name="uninstall">
        <doc:heading>Uninstall/Upgrade RabbitMQ Server</doc:heading>
        <p>
        First, use <code>rabbitmqctl stop</code> to stop any running broker.
        </p>
        <p>
        Generally, on Linux-like systems, you can use your package manager
        to uninstall or upgrade the RabbitMQ server.
        </p>
        <p>
        On Windows, use 
        <code>rabbitMQ-service remove</code> to remove any 
        RabbitMQ service then simply delete the Rabbitmq_server folder from Program Files.  
        If you are upgrading, just extract the new version to the same place as before 
        and edit  Environment Variables to ensure the new files are found.
        </p>
        <p>
        If you are not upgrading, you can also remove the RabbitMQ Log and Mnesia folders. 
        Erlang can be uninstalled via package manager, or on Windows via  
        Settings > Control Panel > Add and Remove Programs. 
        Remove Environment Variables that are not needed.
        </p>
      </doc:section>
      </div>
    </doc:div>
  </body>
</html>
