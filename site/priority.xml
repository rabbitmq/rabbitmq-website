<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
]>
<!--
Copyright (c) 2007-2019 Pivotal Software, Inc.

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License,
Version 2.0 (the "License”); you may not use this file except in compliance
with the License. You may obtain a copy of the License at

https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Priority Queue Support</title>
  </head>
  <body>
    <doc:section name="intro">
      <p>
        RabbitMQ has priority queue implementation in the core as of version <code>3.5.0</code>.
        Any queue can be turned into a priority one using client-provided <a href="/queues.html#optional-arguments">optional arguments</a> (but, unlike other features that use optional arguments, not policies).
        The implementation supports a limited number of priorities: 255. Values between 1 and 10 are recommended.
      </p>
    </doc:section>


    <doc:section name="using-x-arguments">
      <doc:heading>Using Client-provided Optional Arguments</doc:heading>

      <p>
        To declare a priority queue, use the <code>x-max-priority</code> optional queue argument.
        This argument should be a positive integer between 1 and 255,
        indicating the maximum priority the queue should support. For example,
        using the Java client:

<pre class="lang-java">
Channel ch = ...;
Map&lt;String, Object&gt; args = new HashMap&lt;String, Object&gt;();
args.put("x-max-priority", 10);
ch.queueDeclare("my-priority-queue", true, false, false, args);
</pre>
      </p>

      <p>
        Publishers then can publish prioritised messages using the
        <code>priority</code> field of
        <code>basic.properties</code>. Larger numbers indicate higher
        priority.
      </p>

      <p>
        Priority declaration <a href="#using-policies">using policies</a> is not currently supported by design.
      </p>
    </doc:section>


    <doc:section name="behaviour">
      <doc:heading>Behaviour</doc:heading>

      <p>
        The AMQP 0-9-1 spec is a bit vague about how priorities are expected to work.
        It says that all queues MUST support at least 2 priorities, and MAY
        support up to 10. It does not define how messages without a
        priority property are treated.
      </p>

      <p>
        In contrast to the AMQP 0-9-1 spec, RabbitMQ queues by default do not
        support priorities. When creating priority queues, you can
        specify as many priority levels as you like. Note that:
      </p>

      <ul>
        <li>
          There is some in-memory and on-disk cost per priority level
          per queue. There is also an additional CPU cost, especially
          when consuming, so you may not wish to create huge numbers of
          levels.
        </li>
        <li>
          The message <code>priority</code> field is defined as an
          unsigned byte, so in practice priorities should be between 0
          and 255.
        </li>
      </ul>

      <p>
        Messages without a <code>priority</code> property are treated as
        if their priority were 0. Messages with a priority which is
        higher than the queue's maximum are treated as if they were
        published with the maximum priority.
      </p>
    </doc:section>


    <doc:section name="resource-usage">
      <doc:heading>Max Number of Priorities and Resource Usage</doc:heading>

      <p>
        If priority queues are desired, we recommend using between 1 and 10.
        Currently using more priorities will consume more resources (Erlang processes).
      </p>
    </doc:section>


    <doc:section name="interaction-with-consumers">
      <doc:heading>Interaction with consumers</doc:heading>

      <p>
        It's important to understand how consumers work when working
        with priority queues. By default, consumers may be sent a large
        number of messages before they acknowledge any, limited only by
        network backpressure.
      </p>

      <p>
        So if such a hungry consumer connects to an empty queue to which
        messages are subsequently published, the messages may not spend
        any time at all waiting in the queue. In this case the priority
        queue will not get any opportunity to prioritise them.
      </p>

      <p>
        In most cases you will want to use the <code>basic.qos</code>
        method in manual acknowledgement mode on your consumers, to
        limit the number of messages that can be out for delivery at any
        time and thus allow messages to be prioritised.
      </p>
    </doc:section>


    <doc:section name="interaction-with-other-features">
      <doc:heading>Interaction with Other Features</doc:heading>

      <p>
        In general priority queues have all the features of standard
        RabbitMQ queues: they support persistence, paging, mirroring,
        and so on. There are a couple of interactions that should be
        noted though:
      </p>

      <ul>
        <li>
          <a href="ttl.html">Messages which should expire</a> will still
          only expire from the head of the queue. This means that unlike
          with normal queues, even per-queue TTL can lead to expired
          lower-priority messages getting stuck behind non-expired
          higher priority ones. These messages will never be delivered,
          but they will appear in queue statistics.
        </li>
        <li>
          <a href="maxlength.html">Queues which have a max-length
          set</a> will, as usual, drop messages from the head of the
          queue to enforce the limit. This means that higher priority
          messages might be dropped to make way for lower priority ones,
          which might not be what you would expect.
        </li>
      </ul>
    </doc:section>


    <doc:section name="using-policies">
      <doc:heading>Why Policy Definition is not Possible</doc:heading>

      <p>
        The most convenient way to define optional arguments for a queue is via <a href="/parameters.html">policies</a>.
        Policies are the recommended way to configure <a href="/maxlength.html">queue length limits</a>, <a href="ttl.html">TTL</a> and more.
        However, policies cannot be used to configure priorities because policies are dynamic
        and can changed after a queue has been declared. Priority queues can never change the number of priorities they
        support after queue declaration, so policies would not be a safe option to use.
      </p>
    </doc:section>
  </body>
</html>
