<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
]>
<!--
Copyright (c) 2007-2018 Pivotal Software, Inc.

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache license,
Version 2.0 (the "license”); you may not use this file except in comptrance
with the license. You may obtain a copy of the license at

https://www.apache.org/licenses/license-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the license is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or imptred.
See the license for the specific language governing permissions and
limitations under the license.
-->

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>TLS Support</title>
  </head>
  <body show-in-this-page="true">
      <doc:section name="intro-and-requirements">
        <doc:heading>Intro</doc:heading>
        <p class="intro">RabbitMQ has inbuilt support for TLS. This includes
        client connections and popular plugins, where applicable, such as <a href="federation.html">Federation
        links</a>. It is also possible to use TLS to <a href="clustering-ssl.html">encrypt inter-node connections in clusters</a>.</p>

        <p>
          This guide covers various topics related to TLS in RabbitMQ:

          <ul>
            <li>Two <a href="#tls-connectivity-options">ways of using TLS</a>: direct or via a TLS terminating proxy</li>
            <li><a href="#erlang-otp-requirements">Erlang/OTP requirements</a> for TLS support</li>
            <li><a href="#enabling-tls">Enabling TLS</a> in RabbitMQ</li>
            <li>How to generate self-signed certificates for development and QA environments <a href="#automated-certificate-generation">with tls-gen</a> or <a href="#manual-certificate-generation">manually</a></li>
            <li>TLS configuration in <a href="#java-client">Java</a> and <a href="#dotnet-client">.NET</a> clients</li>
            <li><a href="#peer-verification">Peer (certificate chain) verification</a></li>
            <li><a href="#tls-versions">TLS version</a> and <a href="#configuring-ciphers">cipher suite</a> configuration</li>
            <li>Tools that can be used to evaluate a TLS setup</li>
            <li>Known vulnerabilities and their migration</li>
            <li>How to use <a href="#private-key-passwords">private key passwords</a></li>
          </ul>

          and more. It tries to <a href="#certificates-and-keys">explain the basics of TLS</a> but not, however, a primer on TLS, encryption, <a href="https://en.wikipedia.org/wiki/public_key_infrastructure">public Key Infrastructure</a>
          and related topics, so the concepts are covered very briefly.
          A number of beginner-oriented primers are available elsewhere on the Web:
          <a href="https://hpbn.co/transport-layer-security-tls/">one</a>
          <a href="https://blog.talpor.com/2015/07/ssltls-certificates-beginners-tutorial/">two</a>,
          <a href="https://blogs.akamai.com/2016/03/enterprise-security---ssltls-primer-part-1---data-encryption.html">three</a>,
          <a href="https://blogs.akamai.com/2016/03/enterprise-security---ssltls-primer-part-2---public-key-certificates.html">four</a>.
        </p>

        <p>
          TLS can be enabled for all protocols supported by RabbitMQ, not just AMQP 0-9-1,
          which this guide focuses on. <a href="/management.html">HTTP API</a>, <a href="/clustering-ssl.html">inter-node and CLI tool traffic</a> can be configured
          to use TLS (HTTPS) as well.
        </p>

        <p>
          For an overview of common TLS troubleshooting techniques,
          see <a href="troubleshooting-ssl.html">Troubleshooting TLS-related issues</a>.
        </p>

        <doc:subsection name="tls-connectivity-options">
          <doc:heading>Common Approaches to TLS for client Connections with RabbitMQ</doc:heading>
          <p>
            For client connections, there are two common approaches:
            <ul>
              <li>Configure RabbitMQ to handle TLS connections</li>
              <li>
                Use a proxy or load balancer (such as <a href="http://www.haproxy.org/">HAproxy</a>)
                to perform <a href="https://en.wikipedia.org/wiki/TLS_termination_proxy">TLS termination</a> of client connections and use plain TCP connections
                to RabbitMQ nodes.
              </li>
            </ul>

            Both approaches are valid and have pros and cons. This guide will focus on the
            first option.
          </p>
        </doc:subsection>

        <doc:subsection name="erlang-otp-requirements">
          <doc:heading>Erlang/OTP Requirements for TLS Support</doc:heading>
          <p>
            In order to support TLS connections, RabbitMQ needs TLS and
            crypto-related modules to be available in the Erlang/OTP
            installation. The recommended Erlang/OTP version to use with
            TLS is the most recent <a href="/which-erlang.html">supported Erlang release</a>.
            Earlier versions, even if they are supported, may work for most certificates
            but have known limitations (see below).
          </p>

          <p>
            The Erlang <code>asn1</code>, <code>crypto</code>,
            <code>public_key</code>, and <code>ssl</code> libraries
            (applications) must be installed and functional. On Debian and
            Ubuntu this is provided by the <a href="http://packages.ubuntu.com/search?keywords=erlang-asn1">erlang-asn1</a>,
            <a href="http://packages.ubuntu.com/search?keywords=erlang-crypto">erlang-crypto</a>, <a href="http://packages.ubuntu.com/search?keywords=erlang-public-key">erlang-public-key</a>, and
            <a href="http://packages.ubuntu.com/search?keywords=erlang-ssl">erlang-ssl</a> packages, respectively. The <a href="https://github.com/rabbitmq/erlang-rpm">zero dependency
            Erlang RPM for RabbitMQ</a> includes the above modules.
          </p>

          <p>
            If Erlang/OTP is compiled from source, it is necessary to ensure that <code>configure</code>
            finds OpenSSL and builds the above libraries.
          </p>

          <p>
            When investigating TLS connectivity issues, please keep in mind that in the vast majority
            of cases they are environment-specific (e.g. certificates are missing from the <a href="#peer-verification-trusted-certificates">trusted certificate store</a>)
            and do not indicate a bug or limitation in Erlang/OTP's TLS implementation. Please go through the steps outlined
            in the <a href="troubleshooting-ssl.html">Troubleshooting TLS guide</a> to gather
            more information first.
          </p>
        </doc:subsection>

        <doc:subsection name="known-compatibility-issues">
          <doc:heading>Known Incompatibilities and limitations</doc:heading>
          <p>
            If Elliptic curve cryptography (ECC) cipher suites is
            expected to be used, a recent <a href="/which-erlang.html">supported Erlang release</a>
            is highly recommended. Earlier releases have known limitations around ECC support.
          </p>
          <p>
            If you face the above limitations or any other incompatibilities,
            use the TLS termination option (see above).
          </p>
        </doc:subsection>
      </doc:section>


      <doc:section name="certificates-and-keys">
        <doc:heading>TLS Basics: Certificate Authorities, Certificates, Keys</doc:heading>

        <p>
          TLS is a large and fairly complex topic. Before explaining <a href="#enabling-tls">how to enable TLS in RabbitMQ</a>
          it's worth briefly cover some of the concepts used in this guide. This section is intentionally brief and oversimplifies
          some things. Its goal is to get the reader started with enabling TLS for RabbitMQ and applications.
          A number of beginner-oriented primers on TLS are available elsewhere on the Web:
          <a href="https://hpbn.co/transport-layer-security-tls/">one</a>
          <a href="https://blog.talpor.com/2015/07/ssltls-certificates-beginners-tutorial/">two</a>,
          <a href="https://blogs.akamai.com/2016/03/enterprise-security---ssltls-primer-part-1---data-encryption.html">three</a>,
          <a href="https://blogs.akamai.com/2016/03/enterprise-security---ssltls-primer-part-2---public-key-certificates.html">four</a>.
        </p>

        <p>
          For a thorough understanding of
          TLS and how to get the most out of it, we would recommend the use
          of other resources, for example <a class="extlink" href="http://oreilly.com/catalog/9780596002701/">Network Security with
          OpenSSL</a>.
        </p>

        <p>
          TLS has two primary purposes: encrypting connection traffic and providing a way to authenticate (<a href="#peer-verification">verify</a>)
          that the peer to mitigate against <a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">Man-in-the-Middle attacks</a>.
          Both are accomplished using a set of roles, policies and procedures known as <a href="https://en.wikipedia.org/wiki/public_key_infrastructure">public Key Infrastructure</a> (PKI).
        </p>

        <p>
          A PKI is based on the concept of digital identities that can be cryptographically (mathematically) verified. Those identities are called
          <em>certificates</em> or more precisely, <em>certificate/key pairs</em>. Every TLS-enabled server usually has its own certificate/key
          pair that it uses to compute a connection-specific key that will be used to encrypt traffic sent on the connection. Also, if asked, it can present its certificate
          (public key) to the connection peer. clients may or may not have their own certificates. In the context of messaging and tools such as RabbitMQ it is quite common for
          clients to also use certificate/key pairs so that servers can validate their identity.
        </p>

        <p>
          Certificate/key pairs are generated by tools such as OpenSSL and signed by entities called <em><a href="https://en.wikipedia.org/wiki/Certificate_authority">Certificate Authorities</a></em> (CA).
          CAs issue certificates that users (applications or other CAs) use. When a certificate is signed by a CA, they form a <em>chain of trust</em>. Such chains can include
          more than one CA but ultimately sign a certificate/key pair used by an applications (a <em>leaf</em> or <em>end user</em> certificate).
          Chains of CA certificates are usually distributed together in a single file. Such file is called a <em>CA bundle</em>.
        </p>

        <p>
          Here's an example of the most basic chain with one root CA and one leaf (server or client) certificate:

          <img class="figure" src="/img/root_ca_and_leaf.png" alt="Root CA and leaf certificates" />
        </p>

        <p>
          A chain with intermediate certificates might look like this:

          <img class="figure" src="/img/root_intermediate_ca_and_leaf.png" alt="Root CA, intermediate and leaf certificates" />
        </p>

        <p>
          There are organizations that sign and issue certificate/key pairs. Most of them are widely trusted CAs and charge a fee for their services.
        </p>

        <p>
          A TLS-enabled RabbitMQ node must have a set of Certificate Authority certificates it considers to be trusted in a file (a CA bundle),
          a certificate (public key) file and a private key file. The files will be read from the local filesystem. They must be readable by the effective user
          of the RabbitMQ node process.
        </p>

        <p>
          Both ends of a TLS-enabled connection can optionally verify
          the other end of the connection. While doing so, they try to locate a trusted Certificate Authority in the certificate list
          presented by the peer. More on this in the <a href="#peer-verification">Peer Verification</a> section.
        </p>

        <p>
          This guides assumes the user has access to a Certificate Authority and two certificate/key pairs
          in a number of formats for different client libraries to use.
          This is best done using <a href="#automated-certificate-generation">existing tools</a>
          but those looking to get more familiar with the topic and OpenSSL command line
          tools there's a <a href="#manual-certificate-generation">separate section</a>.
        </p>

        <p>
          In production environments certificates are generated by a commercial Certificate Authority
          or a Certificate Authority issued by the internal security team. In those cases Certificate Authority
          bundle files very likely will contain more than one certificate. This doesn't change how the bundle file
          is used when configuration RabbitMQ as long as the same basic <a href="#enabling-tls-paths">file and path requirements</a> are met.
          In other words, whether the certificates are self-signed or issued by a <a href="#peer-verification-trusted-certificates">trusted CA</a>, they are
          configured the same way. The section on <a href="#peer-verification">peer verification</a> covers this in detail.
        </p>
      </doc:section>


      <doc:section name="automated-certificate-generation">
        <doc:heading>The Short Route to Generating a CA, Certificates, and Keys</doc:heading>
        <p>
          This guides assumes the user has access to a CA certifica bundle file and two <a href="#certificates-and-keys">certificate/key pairs</a>.
          The certificate/key pairs are used by RabbitMQ and clients that connect to the server on a
          TLS-enabled port. The process of generating a Certificate Authority and two key pairs is fairly labourious
          and can be error-prone. An easier way of generating all that
          stuff on MacOS or Linux is with <a
          href="https://github.com/michaelklishin/tls-gen">tls-gen</a>:
          you will need <code>Python 3.5+</code>, <code>make</code> and <code>openssl</code>
          in <code>PATH</code>.
        </p>
        <p>
          Note that <code>tls-gen</code> and the certificate/key pairs
          it generates are self-signed and only suitable for development
          and test environments. The vast majority of production environments
          should use certificates and keys issued by a widely trusted commercial
          CA.
        </p>
        <p>
          <code>tls-gen</code> supports RSA and <a href="https://blog.cloudflare.com/a-relatively-easy-to-understand-primer-on-Elliptic-curve-cryptography/">Elliptic Curve Cryptography</a>
          algorithms for key generation.
        </p>

        <doc:subsection name="automated-certificate-generation-transcript">
          <doc:heading>Using tls-gen's Basic Profile</doc:heading>
          <p>
            Below is an example that generates a CA and uses it to produce two certificate/key pairs, one
            for the server and another for clients. This is the setup that is expected by the rest of this guide.

<pre class="sourcecode bash">
git clone https://github.com/michaelklishin/tls-gen tls-gen
cd tls-gen/basic
# private key password
make PASSWORD=bunnies
make verify
make info
ls -l ./result
</pre>

            The certificate chain produced by this basic tls-gen profile looks like this:

            <img class="figure" src="/img/root_ca_and_leaf.png" alt="Root CA and leaf certificates" />
          </p>
        </doc:subsection>
      </doc:section>


      <doc:section name="enabling-tls">
        <doc:heading>Enabling TLS Support in RabbitMQ</doc:heading>

          <p>
            To enable the TLS support in RabbitMQ, the node has to be configured
            to know the location of the <a href="#certificates-and-keys">Certificate Authority
            bundle</a> (a file with one more CA certificates), the server's certificate file, and the server's
            key. A TLS listener should also be enabled to know what port to listen on for TLS-enabled client connections.
            More TLS-related things can be configured. Those are covered in the rest of this guide.
          </p>

          <p>
            Here are the essential configuration settings related to TLS:

            <table class="plain">
              <thead>
                <td>Configuration Key</td>
                <td>Description</td>
              </thead>
              <tr>
                <td><code>listeners.ssl</code></td>
                <td>
                  A list of ports to listen on for TLS
                  connections. RabbitMQ can listen on a <a href="/networking.html">single interface or multiple ones</a>.
                </td>
              </tr>
              <tr>
                <td><code>ssl_options.cacertfile</code></td>
                <td>Certificate Authority (CA) bundle file path</td>
              </tr>
              <tr>
                <td><code>ssl_options.certfile</code></td>
                <td>Server certificate file path</td>
              </tr>
              <tr>
                <td><code>ssl_options.keyfile</code></td>
                <td>Server private key file path</td>
              </tr>
              <tr>
                <td><code>ssl_options.verify</code></td>
                <td>Should <a href="#peer-verification">peer verification</a> be enabled?</td>
              </tr>
              <tr>
                <td><code>ssl_options.fail_if_no_peer_cert</code></td>
                <td>
                  When set to <code>true</code>, TLS connection
                  will be rejected if client fails to provide a certificate
                </td>
              </tr>
            </table>
          </p>

          <p>
            The options are provided in the <a
            href="configure.html#configuration-file">configuration
            file</a>. An example of the config file is below, which
            will start one TLS listener on port 5671 on all interfaces
            on this hostname:
          </p>

<pre class="sourcecode ini">
listeners.ssl.default = 5671

ssl_options.cacertfile = /path/to/testca/ca_certificate_bundle.pem
ssl_options.certfile   = /path/to/server/certificate.pem
ssl_options.keyfile    = /path/to/server/private_key.pem
ssl_options.verify     = verify_peer
ssl_options.fail_if_no_peer_cert = false
</pre>

Below is the same example using the <a href="/configure.html#erlang-term-config-file">classic config format</a>:

<pre class="sourcecode erlang">
[
  {rabbit, [
     {ssl_listeners, [5671]},
     {ssl_options, [{cacertfile, "/path/to/testca/ca_certificate_bundle.pem"},
                    {certfile,   "/path/to/server/certificate.pem"},
                    {keyfile,    "/path/to/server/private_key.pem"},
                    {verify,     verify_peer},
                    {fail_if_no_peer_cert, false}]}
   ]}
].
</pre>

        <doc:subsection name="enabling-tls-paths">
          <doc:heading>Certificate and Private Key File Paths</doc:heading>

          <p>
            RabbitMQ must be able to read its configured CA certificate bundle, server certificate and private key. The files
            must exist and have the appropriate permissions. When that's not the case the node will fail to start or fail to
            accept TLS-enabled connections.
          </p>

          <p>
            <b>Note to Windows users:</b> backslashes ("\") in the
            configuration file are interpreted as escape sequences -
            so for example to specify the
            path <code>c:\ca_certificate_bundle.pem</code> for the CA certificate you
            would need to use <code>"c:\\ca_certificate_bundle.pem"</code> or <code>"c:/ca_certificate_bundle.pem"</code>.
          </p>
        </doc:subsection>

        <doc:subsection name="enabling-tls-verify-configuration">
          <doc:heading>How to Verify that TLS is Enabled</doc:heading>

          <p>
            To verify that TLS has been enabled on the node, restart it and inspect its <a href="/logging.html">log file</a>.
            It should contain an entry about a TLS listener being enabled, looking like this:

<pre class="sourcecode">
2018-09-02 14:24:58.611 [info] &lt;0.664.0&gt; started TCP listener on [::]:5672
2018-09-02 14:24:58.614 [info] &lt;0.680.0&gt; started SSL listener on [::]:5671
</pre>
          </p>
        </doc:subsection>

          <doc:subsection name="private-key-passwords">
            <doc:heading>Providing Private Key Password</doc:heading>
            <p>
              Private keys can be optional protected by a password.
              To provide the password, use the <code>password</code> option:

<pre class="sourcecode ini">
listeners.ssl.1 = 5671
ssl_options.cacertfile = /path/to/ca_certificate.pem
ssl_options.certfile   = /path/to/server_certificate.pem
ssl_options.keyfile    = /path/to/server_key.pem
ssl_options.password   = t0p$3kRe7
</pre>

  The same example using the <a href="/configure.html#erlang-term-config-file">classic config format</a>:

<pre class="sourcecode erlang">
[
 {rabbit, [
           {ssl_listeners, [5671]},
           {ssl_options, [{cacertfile,"/path/to/ca_certificate.pem"},
                          {certfile,  "/path/to/server_certificate.pem"},
                          {keyfile,   "/path/to/server_key.pem"},
                          {password,  "t0p$3kRe7"}
                         ]}
          ]}
].
</pre>
              Classic config file format allows for <a href="http://www.rabbitmq.com/configure.html#configuration-encryption">config value encryption</a>,
              which is recommended for passwords.
            </p>
          </doc:subsection>
      </doc:section>

      <doc:section name="peer-verification">
        <doc:heading>TLS Peer Verification: Who Do You Say You Are?</doc:heading>

        <p>
          As mentioned in the <a href="#certificates-and-keys">Certificates and Keys</a> section, TLS has two
          primary purposes: encrypting connection traffic and providing a way to verify
          that the peer can be trusted (e.g. signed by a trusted Certificate Authority)
          to mitigate against <a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">Man-in-the-Middle attacks</a>,
          a class of attacks where an attacker impersonates a legitimate trusted client. This section will focus
          on the latter.
        </p>

        <doc:subsection name="peer-verification-how-it-works">
          <doc:heading>How Peer Verification Works</doc:heading>

          <p>
            When a TLS connection is established client and server perform connection negotiation that takes several steps.
            The first step is when the peers <em>optionally</em> exchange their
            <a href="#certificates-and-keys">certificates</a>.
            Having exchanged certificates, the peers can <em class="">optionally</em> attempt
            to establish a chain of trust between their CA
            certificates and the certificates presented. This acts to verify that
            the peer is who it claims to be (provided the private key hasn't been
            stolen). The process is known as peer verification or peer validation
            and follows an algorithm known as the <a href="https://en.wikipedia.org/wiki/Certification_path_validation_algorithm">Certification path validation algorithm</a>.
            Understanding the entire algorithm is not necessary in order to use peer verification,
            so this section provides an oversimplified explanation of the key parts.
          </p>
          <p>
            Each peer provides a <em>chain of certificates</em> that begins with a "leaf"
            (client or server) certificate and continues with at least one Certificate Authority (CA) certificate. That
            CA issued (signed) the leaf CA. If there are multiple CA certificates, they usually form a chain of signatures,
            meaning that each CA certificate was signed by the next one. For example, if certificate B is signed by A and C is signed by B,
            the chain is <code>A, B, C</code> (commas here are used for clarify). The "topmost" (first or only) CA is often referred
            to as the <em>root CA</em> for the chain. Root CAs can be issued by well-known Certifica Authorities
            (commercial vendors) or any other party (<a href="https://en.wikipedia.org/wiki/Self-signed_certificate">self-signed</a>).
          </p>

          <p>
            Here's an example of the most basic chain with one root CA and one leaf (server or client) certificate:

            <img class="figure" src="/img/root_ca_and_leaf.png" alt="Root CA and leaf certificates" />
          </p>

          <p>
            A chain with intermediate certificates might look like this:

            <img class="figure" src="/img/root_intermediate_ca_and_leaf.png" alt="Root CA, intermediate and leaf certificates" />
          </p>
          <p>
            During peer verification TLS connection client (or server) traverses
            the chain of certificates presented by the peer
            and if a trusted certificate is found, considers the peer trusted.
            If no trusted and otherwise valid certificate is found, peer verification fails and client connection is closed
            with an error ("alert" in OpenSSL parlance) that says "Unknown CA" or similar. The alert
            will be logged by the server with a message similar to this:

<pre class="sourcecode ini">
2018-09-10 18:10:46.502 [info] &lt;0.902.0&gt; TLS server generated SERVER ALERT: Fatal - Unknown CA
</pre>
          </p>
          <p>
            Certificate validity is also checked at every step. Certificates that are expired
            or aren't yet valid will be rejected. The TLS alert in that case will look something
            like this:

<pre class="sourcecode ini">
2018-09-10 18:11:05.168 [info] &lt;0.923.0&gt; TLS server generated SERVER ALERT: Fatal - Certificate Expired
</pre>

          </p>

          <p>
            The examples above demonstrate TLS alert messages logged by RabbitMQ running on Erlang/OTP 21.
            Clients that perform peer verification will also raise alerts but may use different
            error messages. <a href="https://tools.ietf.org/html/rfc8446#section-6.2">RFC 8446 section 6.2</a>
            provides an overview of various alerts and what they mean.
          </p>
        </doc:subsection>

        <doc:subsection name="peer-verification-trusted-certificates">
          <doc:heading>Trusted Certificates</doc:heading>

          <p>
            Every TLS-enabled tool and TLS implementation, including Erlang/OTP and
            RabbitMQ, has a way of marking a set of certificates as
            trusted. On Linux and other UNIX-like systems this is
            usually a directory administered by superusers. CA
            certificates in that directory will be considered trusted,
            and so are the certificates issued by them (such as those
            presented by clients). Locations of the trusted certificate directory will <a href="https://www.happyassassin.net/2015/01/12/a-note-about-ssltls-trusted-certificate-stores-and-platforms/">vary</a>
            <a href="http://gagravarr.org/writing/openssl-certs/others.shtml">between distributions</a>, operating systems and releases.
          </p>
          <p>
            On Windows trusted certificates are managed using tools such as <a href="https://docs.microsoft.com/en-us/dotnet/framework/tools/certmgr-exe-certificate-manager-tool">certmgr</a>.
          </p>
          <p>
            The certificates in the server's CA certificate bundle may be considered trusted.
            We say "may" because it doesn't work the same way for all client libraries since this varies from TLS implementation
            to implementation. Certificates in a CA certificate bundler won't be considered to be trusted in Python,
            for example, unless explicitly added to the trust store.
          </p>
          <p>
            When performing peer verification, RabbitMQ will only consider the root certificate (first certificate in the list) to be trusted.
            Any intermediate certificates will be ignored. If it's desired that intermediate certificates
            are also considered to be trusted they must be added to the trusted certificate store.
          </p>
          <p>
            While it is possible to place final ("leaf") certificates
            such as those used by servers and clients to the trusted certificate directory,
            a much more common practice is to add CA certificates to the trusted certificate list.
          </p>
          <p>
            The most common way of appending several certificates to one
            another and use in a single Certificate Authority bundle file
            is to simply concatenate them:

<pre class="sourcecode bash">
cat rootca/ca_certificate_bundle.pem otherca/ca_certificate_bundle.pem &gt; all_cacerts.pem
</pre>
          </p>
        </doc:subsection>

        <doc:subsection name="peer-verification-configuration">
          <doc:heading>Enabling Peer Verification</doc:heading>

          <p>
            On the server end, peer verification is primarily controlled using two configuration
            options: <code>ssl_options.verify</code> and <code>ssl_options.fail_if_no_peer_cert</code>.

            Setting the <code>ssl_options.fail_if_no_peer_cert</code> option to <code>false</code> tells
            the node to accept clients which don't present a certificate (for example, were not configured to use one).

            When the <code>ssl_options.verify</code> option is set to <code>verify_peer</code>,
            the client does send us a certificate, the node must perform peer verification.
            When set to <code>none</code>, peer verification will be disabled and certificate
            exchange won't be performed.
          </p>
          <p>
            For example, the following
            config will perform peer verification and reject clients that do not provide
            a certificate:

<pre class="sourcecode ini">
listeners.ssl.default = 5671

ssl_options.cacertfile = /path/to/testca/ca_certificate_bundle.pem
ssl_options.certfile = /path/to/server/certificate.pem
ssl_options.keyfile = /path/to/server/private_key.pem
ssl_options.verify = verify_peer
ssl_options.fail_if_no_peer_cert = true
</pre>

              The same example in the <a href="/configure.html#config-file">classic config format</a>:

<pre class="sourcecode erlang">
[
{rabbit, [
   {ssl_listeners, [5671]},
   {ssl_options, [{cacertfile,"/path/to/testca/ca_certificate_bundle.pem"},
                  {certfile,"/path/to/server/certificate.pem"},
                  {keyfile,"/path/to/server/private_key.pem"},
                  {verify, verify_peer},
                  {fail_if_no_peer_cert, true}]}
 ]}
].
</pre>
            </p>
            <p>
              How exactly peer verification is configured in client libraries varies from library to library.
              <a href="#java-client">Java</a> and <a href="#dotnet-client">.NET</a> client sections cover peer
              verification in those clients.
            </p>
            <p>
              Peer verification is highly recommended in production environments. With careful consideration,
              disabling it can make sense in certain environments (e.g. development).
            </p>
          </doc:subsection>


          <doc:subsection name="peer-verification-clients">
            <p>
              Thus it is possible to create an encrypted TLS connection <em class="">without</em> having to
              verify certificates. Client libraries usually support both modes of operation.
            </p>

            <p>
              When peer verification is enabled, it is common for clients to also check whether the
              the hostname of the server
              they are connecting to matches one of two fields
              in the server certificate: the <a href="https://en.wikipedia.org/wiki/Subject_Alternative_Name">SAN (Subject Alternative Name)</a>
              or CN (Common Name). When <a href="https://en.wikipedia.org/wiki/Wildcard_certificate">wildcard certificates</a> are used,
              the hostname is matched against a pattern. If there is no match, peer verification will also be
              failed by the client. Hostname checks are also optional and generally orthogonal to certificate chain
              verification performed by the client.
            </p>

            <p>
              Because of this it is important to know what SAN (Subject Alternative Name) or CN (Common Name) values
              were used when generating the certificate. If a certificate is generated on one host and used
              on a different host then the <code>$(hostname)</code> value should be replaced with the correct hostname of the target server.
            </p>

            <p>
              <a href="#automatic-certificate-generation">tls-gen</a> will use local machine's hostname for both values.
              Likewise, in the <a href="#manual-certificate-generation">manual certificate/key pair generation section</a> local machine's hostname is specified as
              <code>...-subj /CN=$(hostname)/...</code> to some OpenSSL CLI tool commands.
            </p>
          </doc:subsection>


          <doc:subsection name="peer-verification-depth">
            <doc:heading>Certificate Chains and Verification Depth</doc:heading>
            <p>
              When using a client certificate signed by an intermediate CA, it may be necessary
              to configure RabbitMQ server to use a higher verification depth.

              The depth is the maximum number of non-self-issued intermediate certificates that
              may follow the peer certificate in a valid certification path.
              So if depth is 0 the peer (e.g. client) certificate must be signed by the trusted CA directly,
              if 1 the path can be "peer, CA, trusted CA", if it is 2 "peer, CA, CA, trusted CA", and so on.

              The following example demonstrates how to configure certificate validation depth for
              RabbitMQ server:

<pre class="sourcecode ini">
listeners.ssl.default = 5671

ssl_options.cacertfile = /path/to/testca/ca_certificate_bundle.pem
ssl_options.certfile = /path/to/server/certificate.pem
ssl_options.keyfile = /path/to/server/private_key.pem
ssl_options.verify = verify_peer
ssl_options.depth  = 2
ssl_options.fail_if_no_peer_cert = false
</pre>

              The same example in the <a href="/configure.html#config-file">classic config format</a>:

<pre class="sourcecode erlang">
[
  {rabbit, [
     {ssl_listeners, [5671]},
     {ssl_options, [{cacertfile,"/path/to/testca/ca_certificate_bundle.pem"},
                    {certfile,"/path/to/server/certificate.pem"},
                    {keyfile,"/path/to/server/private_key.pem"},
                    {depth, 2},
                    {verify,verify_peer},
                    {fail_if_no_peer_cert,false}]}
   ]}
].
</pre>
            </p>
            <p>
              When using RabbitMQ plugins such as <a href="/federation.html">Federation</a> or <a href="/shovel.html">Shovel</a> with TLS,
              it may be necessary to configure verification depth for the Erlang client that those plugins use under the hood,
              as <a href="#erlang-client">explained below</a>.
            </p>
          </doc:subsection>
      </doc:section>


      <doc:section name="java-client">
        <doc:heading>Using TLS in the Java Client</doc:heading>

        <p>
          There are two main parts to enabling TLS in the RabbitMQ Java client:
          setting up the key store and a bit of Java security framework plumbing and
          implementing the desired peer verification strategy.
        </p>

        <doc:subsection name="java-client-trust-managers-and-stores">
          <doc:heading>Key Managers, Trust Managers and Stores</doc:heading>

            <p>
              There are three main components in the Java security
              framework: <a href="https://docs.oracle.com/javase/8/docs/api/javax/net/ssl/KeyManager.html">Key Manager</a>,
              <a href="https://docs.oracle.com/javase/8/docs/api/javax/net/ssl/TrustManager.html">Trust Manager</a> and <a href="https://docs.oracle.com/javase/8/docs/api/java/security/KeyStore.html">Key Store</a>.
            </p>
            <p>
              A Key Manager is used by a peer (in this case, a client connection) to manage its certificates.
              During TLS connection/session negotiation, the key manager will control which
              certificates to send to the remote peer.
            </p>
            <p>
              A Trust Manager is used by a peer to manage remote certificates.
              During TLS connection/session negotiation, the trust manager will control which
              certificates are trusted from a remote peer. Trust managers can be used
              to implement any certificate chain verification logic
            </p>
            <p>
              A Key Store is a Java encapsulation of the certificate store concept. All
              certificates must either be converted into a Java specific binary format
              or to be in the PKCS#12 format. These formats are managed using the
              Key Store class. In the below examples the binary format is used to add the trusted (server) certificate(s)
              to the store, while for the client key/certificate pair, the PKCS#12
              key file generated by <a href="#automated-certificate-generation">tls-gen</a> will be used.
            </p>

            <p>
              All TLS-related settings in the Java client
              are configured via the <a href="https://rabbitmq.github.io/rabbitmq-java-client/api/current/com/rabbitmq/client/ConnectionFactory.html">ConnectionFactory</a>.
            </p>
        </doc:subsection>

        <doc:subsection name="java-client-connecting">
          <doc:heading>Connecting with TLS</doc:heading>
            <p>
              This very basic example will show a simple client connecting to a RabbitMQ
              server over TLS without validating the server certificate, and
              without presenting any client certificate to the server.

<pre class="sourcecode java">
import java.io.*;
import java.security.*;

import com.rabbitmq.client.*;

public class Example1 {

    public static void main(String[] args) throws Exception {
        ConnectionFactory factory = new ConnectionFactory();
        factory.setHost(&quot;localhost&quot;);
        factory.setPort(5671);

        factory.useSslProtocol();
        // Tells the library to setup the default Key and Trust managers for you
        // which do not do any form of remote server trust verification

        Connection conn = factory.newConnection();
        Channel channel = conn.createChannel();

        // non-durable, exclusive, auto-delete queue
        channel.queueDeclare(&quot;rabbitmq-java-test&quot;, false, true, true, null);
        channel.basicPublish(&quot;&quot;, &quot;rabbitmq-java-test&quot;, null, &quot;Hello, World&quot;.getBytes());

        GetResponse chResponse = channel.basicGet(&quot;rabbitmq-java-test&quot;, false);
        if (chResponse == null) {
            System.out.println(&quot;No message retrieved&quot;);
        } else {
            byte[] body = chResponse.getBody();
            System.out.println(&quot;Received: &quot; + new String(body));
        }

        channel.close();
        conn.close();
    }
}</pre>

            </p>
            <p>
              This simple example is an echo client and server. It creates a channel
              and publishes to the default direct exchange, then
              fetches back what has been published and echoes it out. It uses
              an <a href="/queues.html">exclusive, non-durable, auto-delete queue</a> that will be deleted shortly
              after the connection is closed.
            </p>
        </doc:subsection>


        <doc:subsection name="java-client-connecting-with-peer-verification">
          <doc:heading>Connecting with Peer Verification Enabled</doc:heading>
          <p>
            Before a client certificate can be presented to the server with Java,
            it has to be added to a key store which will be used to instantiate a <a href="https://docs.oracle.com/javase/8/docs/api/javax/net/ssl/TrustManager.html">Trust Manager</a>.
            JDK ships with a tool called <code>keytool</code> that manages certificate stores. To import a key to
            a store use <code>keytool -import</code>:

<pre class="sourcecode bash">
keytool -import -alias server1 -file /path/to/server/certificate.pem -keystore /path/to/rabbitstore
</pre>

          </p>
          <p>
            The above command will import <code>server/certificate.pem</code> into the <code>rabbitstore</code> and will internally refer to it as <code>server1</code>.
            The alias argument identifes the key. All certificates and keys must have distinct name in their store.
          </p>
          <p>
            <code>keytool</code> will confirm that the certificate is trusted and ask for a password.
          </p>
          <p>
            The client certificate and key in a <code>PKCS#12</code> file are then used as
            already shown above.
          </p>
          <p>
            The below example demonstrates how a key store is used with a <a href="https://docs.oracle.com/javase/8/docs/api/javax/net/ssl/KeyManager.html">Key Manager</a>
            and <a href="https://docs.oracle.com/javase/8/docs/api/javax/net/ssl/TrustManager.html">Trust Manager</a>.

<pre class="sourcecode java">
import java.io.*;
import java.security.*;
import javax.net.ssl.*;

import com.rabbitmq.client.*;

public class Example2 {

    public static void main(String[] args) throws Exception {
      char[] keyPassphrase = &quot;MySecretPassword&quot;.toCharArray();
      KeyStore ks = KeyStore.getInstance(&quot;PKCS12&quot;);
      ks.load(new FileInputStream(&quot;/path/to/client_key.p12&quot;), keyPassphrase);

      KeyManagerFactory kmf = KeyManagerFactory.getInstance(&quot;SunX509&quot;);
      kmf.init(ks, passphrase);

      char[] trustPassphrase = &quot;rabbitstore&quot;.toCharArray();
      KeyStore tks = KeyStore.getInstance(&quot;JKS&quot;);
      tks.load(new FileInputStream(&quot;/path/to/trustStore&quot;), trustPassphrase);

      TrustManagerFactory tmf = TrustManagerFactory.getInstance(&quot;SunX509&quot;);
      tmf.init(tks);

      SSLContext c = SSLContext.getInstance(&quot;TLSv1.2&quot;);
      c.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);

      ConnectionFactory factory = new ConnectionFactory();
      factory.setHost(&quot;localhost&quot;);
      factory.setPort(5671);
      factory.useSslProtocol(c);
      factory.enableHostnameVerification();

      Connection conn = factory.newConnection();
      Channel channel = conn.createChannel();

      channel.queueDeclare(&quot;rabbitmq-java-test&quot;, false, true, true, null);
      channel.basicpublish(&quot;&quot;, &quot;rabbitmq-java-test&quot;, null, &quot;Hello, World&quot;.getBytes());

      GetResponse chResponse = channel.basicGet(&quot;rabbitmq-java-test&quot;, false);
      if (chResponse == null) {
          System.out.println(&quot;No message retrieved&quot;);
      } else {
          byte[] body = chResponse.getBody();
          System.out.println(&quot;Received: &quot; + new String(body));
      }

      channel.close();
      conn.close();
  }
}</pre>

          </p>
          <p>
            To ensure that the above code works as expected with untrusted certificates, set up
            a RabbitMQ node with a certificate that has not been imported
            into the key store and watch the connection fail.
          </p>

          <h4><a class="anchor" href="#java-client-hostname-verification">Server Hostname Verification</a></h4>
          <p>
            Hostname verification must be enabled separately using the
            <code>ConnectionFactory#enableHostnameVerification()</code> method. This is done in the example
            above, for instance:

<pre class="sourcecode java">
import java.io.*;
import java.security.*;
import javax.net.ssl.*;

import com.rabbitmq.client.*;

public class Example2 {

    public static void main(String[] args) throws Exception {
      char[] keyPassphrase = &quot;MySecretPassword&quot;.toCharArray();
      KeyStore ks = KeyStore.getInstance(&quot;PKCS12&quot;);
      ks.load(new FileInputStream(&quot;/path/to/client_key.p12&quot;), keyPassphrase);

      KeyManagerFactory kmf = KeyManagerFactory.getInstance(&quot;SunX509&quot;);
      kmf.init(ks, passphrase);

      char[] trustPassphrase = &quot;rabbitstore&quot;.toCharArray();
      KeyStore tks = KeyStore.getInstance(&quot;JKS&quot;);
      tks.load(new FileInputStream(&quot;/path/to/trustStore&quot;), trustPassphrase);

      TrustManagerFactory tmf = TrustManagerFactory.getInstance(&quot;SunX509&quot;);
      tmf.init(tks);

      SSLContext c = SSLContext.getInstance(&quot;TLSv1.2&quot;);
      c.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);

      ConnectionFactory factory = new ConnectionFactory();
      factory.setHost(&quot;localhost&quot;);
      factory.setPort(5671);
      factory.useSslProtocol(c);
      factory.enableHostnameVerification();

      // this connection will both perform peer verification
      // and server hostname verification
      Connection conn = factory.newConnection();

      // snip ...
  }
}</pre>

            This will verify
            that the server certificate has been issued for the hostname the
            client is connecting to. Unlike certificate chain verification, this feature
            is client-specific (not usually performed by the server).
          </p>

          <p>
            With JDK 6, it is necessary to add a dependency on
            <a href="https://hc.apache.org/">Apache Commons HttpClient</a> for hostname verification to work, e.g. with Maven:

<pre class="sourcecode xml">
&lt;!-- Maven dependency to add for hostname verification on JDK 6 --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;
    &lt;artifactId&gt;httpclient&lt;/artifactId&gt;
    &lt;version&gt;4.5.6&lt;/version&gt;
&lt;/dependency&gt;
</pre>

            With Gradle:

<pre class="sourcecode groovy">
// Gradle dependency to add for hostname verification on JDK 6
compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.6'
</pre>
          </p>
          <p>
            Alternatively with JDK 6
            <code>ConnectionFactory#enableHostnameVerification(HostnameVerifier)</code>
            can be provided a <code>HostnameVerifier</code> instance of choice.
          </p>

        </doc:subsection>

        <doc:subsection name="tls-versions-java-client">
          <doc:heading>Configuring TLS Version in Java client</doc:heading>

          <p>
            Just like RabbitMQ server can be <a href="#tls-versions">configured to support only specific TLS versions</a>,
            it may be necessary to configure preferred TLS version in the Java client. This is done using
            the <code>ConnectionFactory#useSslProtocol</code> overloads that accept a protocol version name
            or a <code>SSLContext</code>:

<pre class="sourcecode java">
ConnectionFactory factory = new ConnectionFactory();
factory.setHost(&quot;localhost&quot;);
factory.setPort(5671);

factory.useSslProtocol("TLSv1.2");
</pre>
          </p>

          <p>
            Modern releases of the library will attempt to use the latest TLS version
            supported by the runtime.
          </p>
        </doc:subsection>
      </doc:section>


      <doc:section name="dotnet-client">
        <doc:heading>Using TLS in the .NET client</doc:heading>
        <p>
          For a server certificate to be understood on the .NET platform, they
          can be in a number of formats including DER and PKCS#12 but
          not PEM. For the DER format, .NET expects them to
          be stored in files with <code>.cer</code> extension. <a href="#automated-certificate-generation">tls-gen</a>
          generates both PEM and PKCS#12 files.
       </p>

        <doc:subsection name="dotnet-peer-verification">
          <doc:heading>.NET Trust Store</doc:heading>
          <p>
            On the .NET platform, remote certificates are managed by putting them
            into any of a number of Stores. All management of these stores is done
            with the 'certmgr' tool which is available on both Microsoft's
            .NET implementation and on Mono.
          </p>
          <p>
            NB: On some flavours of Windows there are two versions of
            the command: one that ships with the operating system and
            provides a graphical interface only, and one that ships
            with the Windows SDK and provides both a
            graphical and command line interface. Either will do the
            job, but the examples below are based on the latter.
          </p>
          <p>
            For our case, because we're supplying the client certificate/key pair
            in a separate PKCS#12 file, all we need to do is to import the
            certificate of the root Certificate Authority into
            the Root (Windows) or Trust (Mono) store.
            All certificates signed by any certificate in that store are automatically trusted.
          </p>
          <p>
            In contrast to the Java client, which is happy to use a
            TLS connection without performing peer verification, the .NET client by default requires this
            verification to succeed. To suppress verification, an applications can set
            the <code>System.Net.Security.SslPolicyErrors.RemoteCertificateNotAvailable</code>
            and <code>System.Net.Security.SslPolicyErrors.RemoteCertificateChainErrors</code>
            flags in <a href="&url-dotnet-apidoc;/RabbitMQ.client.SslOption.html">SslOptions</a>.
          </p>
        </doc:subsection>

        <doc:subsubsection name="certmgr">
          <doc:heading>Certificate Management with Certmgr</doc:heading>
          <p>
            <code>certmgr</code> is a command line tool that manages certificates in a specified store, for example,
            adds and deletes them. These stores can be per-user stores, or
            system-wide. Only administrative users can have write access to the system-wide stores.
          </p>
          <p>
            The following example adds a certificate to the store of user <code>Root</code> (also known as <code>Trust</code> in some .NET implementation)
          </p>

<pre class="sourcecode powershell">
# Windows
certmgr -add -all \path\to\cacert.cer -s Root
</pre>

<pre class="sourcecode bash">
# Linux with Mono
certmgr -add -c Trust /path/to/cacert.cer
</pre>

          <p>
            To add a certificate to the system-wide (machine) certificate store instead we
            run
        </p>

<pre class="sourcecode powershell">
# Windows
certmgr -add -all \path\to\cacert.cer -s -r localMachine Root
</pre>

<pre class="sourcecode bash">=
# Linux with Mono
certmgr -add -c -m Trust /path/to/cacert.cer
</pre>

          <p>
            After adding to a store, we can view the contents of that store with the <code>-all</code> (<code>-list</code> with Mono) switch:

<pre class="sourcecode bash">
certmgr -all -s Root

# … snip …

Self-signed X.509 v3 Certificate
  Serial Number: AC3F2B74ECDD9EEA00
  Issuer Name:   CN=MyTestCA
  Subject Name:  CN=MyTestCA
  valid From:    25/08/2018 14:03:01
  valid Until:   24/09/2018 14:03:01
  Unique Hash:   1F04D1D2C20B97BDD5DB70B9EB2013550697A05E
</pre>

<pre class="sourcecode bash">
certmgr -list -c Trust

# … snip …

Self-signed X.509 v3 Certificate
  Serial Number: AC3F2B74ECDD9EEA00
  Issuer Name:   CN=MyTestCA
  Subject Name:  CN=MyTestCA
  valid From:    25/08/2018 14:03:01
  valid Until:   24/09/2018 14:03:01
  Unique Hash:   1F04D1D2C20B97BDD5DB70B9EB2013550697A05E
</pre>
          </p>
          <p>
            According to the above output there is one Self-signed X.509 v3 Certificate in the
            trust store. The Unique Hash uniquely identifies this certificate in
            this store. To delete this certificate, use the unique hash:

<pre class="sourcecode bash">
# Windows
certmgr -del -c -sha1 1F04D1D2C20B97BDD5DB70B9EB2013550697A05E -s Root

# … snip …

Certificate removed from store.
</pre>

<pre class="sourcecode bash">
# Linux with Mono
certmgr -del -c Trust 1F04D1D2C20B97BDD5DB70B9EB2013550697A05E

# … snip …

Certificate removed from store.
</pre>
          </p>
        </doc:subsubsection>


        <doc:subsection name="dotnet-connection-params">
          <doc:heading>Creating The Connection</doc:heading>
            <p>
              To create a TLS-enabled connection to RabbitMQ, we need to set some new
              fields in the ConnectionFactory's Parameters field.
              To make things
              easier, there is a new Field Parameters.Ssl that acts like a namespace
              for all the other fields that we need to set. The fields are:</p>

            <table class="plain">
              <thead>
                <td>Property</td>
                <td>Description</td>
              </thead>
              <tr>
                <td><code>Ssl.CertPath</code></td>
                <td>
                  This is the path to the client's certificate in
                  PKCS#12 format if your server expects client side verification. This
                  is optional.
                </td>
              </tr>
              <tr>
                <td><code>Ssl.CertPassphrase</code></td>
                <td>
                  If you are using a client certificate in PKCS#12
                  format then it'll probably have a password, which you specify in
                  this field.
                </td>
              </tr>
              <tr>
                <td><code>Ssl.Enabled</code></td>
                <td>This is a boolean field that turns TLS support on or
                off. It is off by default.</td>
              </tr>
              <tr>
                <td><code>Ssl.ServerName</code></td>
                <td>
                  .NET expects this to match the Subject Alternative Namee (SAN) or Common Name (CN) on
                  the certificate that the server sends over.
                </td>
              </tr>
            </table>
        </doc:subsection>

        <doc:subsection name="dotnet-example">
          <doc:heading>Code Example</doc:heading>

          <p>
            This is a more or less direct port of the <a href="#java-client-connecting">Java client example</a>. It
            creates a channel and publishes to
            the default direct exchange, then reads back what has been
            published and echoes it out. Note that we use an
            <a href="/queues.html">exclusive, non-durable, auto-delete queue</a> so we don't have
            to worry about manually cleaning up after ourselves
          </p>

<pre class="sourcecode csharp">
using System;
using System.IO;
using System.Text;

using RabbitMQ.client;
using RabbitMQ.Util;

namespace RabbitMQ.client.Examples {
  public class TestSSL {
    public static int Main(string[] args) {
      ConnectionFactory cf = new ConnectionFactory();

      cf.Ssl.ServerName = System.Net.Dns.GetHostName();
      cf.Ssl.CertPath = "/path/to/client_key.p12";
      cf.Ssl.CertPassphrase = "MySecretPassword";
      cf.Ssl.Enabled = true;

      using (IConnection conn = cf.CreateConnection()) {
        using (IModel ch = conn.CreateModel()) {
          ch.QueueDeclare("rabbitmq-dotnet-test", false, false, false, null);
          ch.Basicpublish("", "rabbitmq-dotnet-test", null,
                          Encoding.UTF8.GetBytes("Hello, World"));
          BasicGetResult result = ch.BasicGet("rabbitmq-dotnet-test", true);
          if (result == null) {
            Console.Writeline("No message received.");
          } else {
            Console.Writeline("Received:");
            DebugUtil.DumpProperties(result, Console.Out, 0);
          }
          ch.QueueDelete("rabbitmq-dotnet-test");
        }
      }
      return 0;
    }
  }
}
</pre>

        </doc:subsection>

        <doc:subsection name="tls-verification-in-dotnet">
          <doc:heading>TLS Peer Verification in .NET client</doc:heading>
            <p>
              TLS offers peer verification (validation), a way for client and server to
              verify each other's identity based on peer's certificate information.
              When peer verification is enabled, typically the <em class="">hostname</em> of the server
              you're connecting to needs to match the <em class="">CN (Common Name)</em> field on
              the server's certificate, otherwise the certificate will be
              rejected. However, peer verification doesn't have to be limited to just CN
              and hostname matching in general.
            </p>
            <p>
              This is why the commands at the start of this guide specify
              <code>...-subj /CN=$(hostname)/...</code> which dynamically looks up your
              hostname. If you're generating certificates on one machine, and using
              them on the other then be sure to swap out the <code>$(hostname)</code>
              section, and replace it with the correct hostname for your server.
            </p>

            <p>
              On the .NET platform, <a href="http://msdn.microsoft.com/en-us/library/system.net.security.remotecertificatevalidationcallback(v=vs.110).aspx">RemoteCertificatevalidationCallback</a>
              controls TLS verification behavior.
            </p>

            <p>
              In RabbitMQ .NET client, <code>RabbitMQ.client.SslOption.CertificatevalidationCallback</code>
              can be used to provide a <a href="http://msdn.microsoft.com/en-us/library/system.net.security.remotecertificatevalidationcallback(v=vs.110).aspx">RemoteCertificatevalidationCallback</a>
              delegate. The delegate will be used to verify peer (RabbitMQ node) identity using whatever logic fits
              the applications.

              If this is not specified, the default callback will be
              used in conjunction with the AcceptablePolicyErrors
              property to determine if the remote server certificate is
              valid.

              The <code>System.Net.Security.SslPolicyErrors.RemoteCertificateNameMismatch</code>
              flag in <code>RabbitMQ.client.SslOption.AcceptablePolicyErrors</code>
              can be used to disable peer verification (not recommended in production environments!).
            </p>

            <p>
              <code>RabbitMQ.client.SslOption.CertificateSelectionCallback</code>
              can be used to provide
              a <a href="http://msdn.microsoft.com/en-us/library/system.net.security.localcertificateselectioncallback(v=vs.110).aspx">LocalCertificateSelectionCallback</a>
              that will select the local certificate used for peer verification.
            </p>
        </doc:subsection>
      </doc:section>



      <doc:section name="tls-versions">
        <doc:heading>Limiting TLS Versions Used</doc:heading>

        <doc:subsection name="tls-versions-why-limit">
          <doc:heading>Why limit TLS Versions</doc:heading>

          <p>
            TLS (née SSL) has evolved over time and has multiple versions in use.
            Each version builds on the shortcomings of previous versions. Most of the time
            the shortcomings resulted in <a href="#major-vulnerabilities">known attacks</a> that affect specific
            versions of TLS (and SSL). disabling older TLS versions is a way to mitigate
            many of those attacks (another technique is to <a href="#configuring-ciphers">disable affected cipher suites</a>).
            It is common for environments with highest security requirements to only support TLSv1.2, for example.
          </p>
        </doc:subsection>

        <doc:subsection name="tls-versions-why-not-limit">
          <doc:heading>Why Not Limit TLS Versions</doc:heading>

          <p>
            limiting TLS versions to TLSv1.2 only means that clients that <a href="#tls-version-support-in-jdk-and-net">support older
            TLS versions only</a> (e.g. JDK 6 or .NET 4.0) won't be able to connect.
          </p>
        </doc:subsection>

        <doc:subsection name="tls-versions-server">
          <p>
            To limit enabled TLS protocol versions, use the <code>versions</code> option.
          </p>

          <p>
            Using the <a href="/configure.html#config-file">classic config format</a>:

<pre class="sourcecode ini">
listeners.ssl.1        = 5671
ssl_options.cacertfile = /path/to/ca_certificate.pem
ssl_options.certfile   = /path/to/server_certificate.pem
ssl_options.keyfile    = /path/to/server_key.pem
ssl_options.versions.1 = tlsv1.2
ssl_options.versions.2 = tlsv1.1
ssl_options.versions.3 = tlsv1
</pre>

            Using the <a href="/configure.html#advanced-config-file">advanced config</a>:

<pre classic="sourcecode erlang">
%% advanced config here is only used to configure TLS versions
[{ssl, [{versions, ['tlsv1.2', 'tlsv1.1', tlsv1]}]}].
</pre>
          </p>

        <p>
          The examples below disable versions older than TLSv1.1.

          Using the <a href="/configure.html#config-file">standard config</a>:

<pre class="sourcecode ini">
listeners.ssl.1 = 5671
ssl_options.cacertfile = /path/to/ca_certificate.pem
ssl_options.certfile   = /path/to/server_certificate.pem
ssl_options.keyfile    = /path/to/server_key.pem
ssl_options.versions.1 = tlsv1.2
ssl_options.versions.2 = tlsv1.1
</pre>

          Using the <a href="/configure.html#advanced-config-file">advanced config</a>:

<pre classic="sourcecode">
  %% Disable SSLv3.0 and TLSv1.0 support.
  [
   {ssl, [{versions, ['tlsv1.2', 'tlsv1.1']}]},
   {rabbit, [
             {ssl_options, [
                            {versions, ['tlsv1.2', 'tlsv1.1']}
                           ]}
            ]}
  ].
</pre>

          Using <a href="/configure.html#erlang-term-config-file">classic config format</a>:

<pre class="sourcecode erlang">
%% Disable SSLv3.0 and TLSv1.0 support.
[
 {ssl, [{versions, ['tlsv1.2', 'tlsv1.1']}]},
 {rabbit, [
           {ssl_listeners, [5671]},
           {ssl_options, [{cacertfile,"/path/to/ca_certificate.pem"},
                          {certfile,  "/path/to/server_certificate.pem"},
                          {keyfile,   "/path/to/server_key.pem"},
                          {versions, ['tlsv1.2', 'tlsv1.1']}
                         ]}
          ]}
].
</pre>
          </p>
        </doc:subsection>

        <doc:subsection name="verifying-tls-versions">
          <doc:heading>Verifying Enabled TLS Versions</doc:heading>

          To verify provided TLS versions, use <code>openssl s_client</code>:

<pre class="sourcecode bash">
# connect using SSLv3
openssl s_client -connect 127.0.0.1:5671 -ssl3
</pre>

<pre class="sourcecode bash">
# connect using TLSv1.0 through v1.2
openssl s_client -connect 127.0.0.1:5671 -tls1
</pre>

         and look for the following in the output:

<pre class="sourcecode">
SSL-Session:
Protocol  : TLSv1
</pre>
        </doc:subsection>

        <doc:subsection name="tls-version-support-in-jdk-and-net">
          <doc:heading>TLS Version Support Table for JDK and .NET</doc:heading>

          <p>
            disabling TLSv1.0 limits the number of client platforms supported. Below is a table that
            explains what TLS versions are supported by what JDK and .NET releases.
          </p>

          <table>
            <thead>
              <td>TLS version</td>
              <td>Minimum JDK version</td>
              <td>Minimum .NET version</td>
            </thead>
            <tr>
              <td>TLS 1.0</td>
              <td>JDK 5 (RabbitMQ Java client requires &minimum-jdk-version;)</td>
              <td>.NET 2.0 (RabbitMQ .NET client requires &minimum-dotnet-version;)</td>
            </tr>
            <tr>
              <td>TLS 1.1</td>
              <td>JDK 7 (see <a href="http://docs.oracle.com/javase/7/docs/technotes/guides/security/SunProviders.html#SunJSSEProvider">Protocols</a>,
              <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/security/enhancements-8.html">JDK 8 recommended</a>)</td>
              <td>.NET 4.5</td>
            </tr>
            <tr>
              <td>TLS 1.2</td>
              <td>JDK 7 (see <a href="http://docs.oracle.com/javase/7/docs/technotes/guides/security/SunProviders.html#SunJSSEProvider">Protocols</a>,
              <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/security/enhancements-8.html">JDK 8 recommended</a>)</td>
              <td>.NET 4.5</td>
            </tr>
          </table>

          <ul>
            <li><a href="http://msdn.microsoft.com/en-us/library/system.security.authentication.sslprotocols(v=vs.110).aspx">.NET versions source</a>.</li>
            <li><a href="http://docs.oracle.com/javase/7/docs/technotes/guides/security/SunProviders.html#SunJSSEProvider">JDK versions source</a>.</li>
          </ul>
        </doc:subsection>
    </doc:section>


    <doc:section name="configuring-ciphers">
      <doc:heading>Configuring Cipher Suites</doc:heading>

      <p>
        It is possible to configure what cipher suites will be used by RabbitMQ. Note that not all
        suites will be available on all systems. For example, to use Elliptic curve ciphers,
        please run the most recent <a href="/which-erlang.html">supported Erlang release</a> available.

        The below examples demonstrates how the <code>ciphers</code> TLS option is used.
      </p>

      <p>
        Cipher suites can only be configured using the <a href="/configure.html#advanced-config-file">advanced config</a>
        file or the <a href="/configure.html#erlang-term-config-file">classic config format</a>:

<pre class="sourcecode erlang">
%% list allowed ciphers
[
 {ssl, [{versions, ['tlsv1.2', 'tlsv1.1']}]},
 {rabbit, [
           {ssl_listeners, [5671]},
           {ssl_options, [{cacertfile,"/path/to/ca_certificate.pem"},
                          {certfile,  "/path/to/server_certificate.pem"},
                          {keyfile,   "/path/to/server_key.pem"},
                          {versions, ['tlsv1.2', 'tlsv1.1']},
                          %% This list is just an example!
                          %% Not all cipher suites are available on all machines.
                          %% Cipher suite order is important: preferred suites
                          %% should be listed first.
                          %% Different suites have different security and CPU load characteristics.
                          {ciphers,  [
                                      {ecdhe_ecdsa,aes_256_gcm,null,sha384},
                                      {ecdhe_rsa,aes_256_gcm,null,sha384},
                                      {ecdhe_ecdsa,aes_256_cbc,sha384,sha384},
                                      {ecdhe_rsa,aes_256_cbc,sha384,sha384},
                                      {ecdh_ecdsa,aes_256_gcm,null,sha384},
                                      {ecdh_rsa,aes_256_gcm,null,sha384},
                                      {ecdh_ecdsa,aes_256_cbc,sha384,sha384},
                                      {ecdh_rsa,aes_256_cbc,sha384,sha384},
                                      {dhe_rsa,aes_256_gcm,null,sha384},
                                      {dhe_dss,aes_256_gcm,null,sha384},
                                      {dhe_rsa,aes_256_cbc,sha256},
                                      {dhe_dss,aes_256_cbc,sha256},
                                      {rsa,aes_256_gcm,null,sha384},
                                      {rsa,aes_256_cbc,sha256},
                                      {ecdhe_ecdsa,aes_128_gcm,null,sha256},
                                      {ecdhe_rsa,aes_128_gcm,null,sha256},
                                      {ecdhe_ecdsa,aes_128_cbc,sha256,sha256},
                                      {ecdhe_rsa,aes_128_cbc,sha256,sha256},
                                      {ecdh_ecdsa,aes_128_gcm,null,sha256},
                                      {ecdh_rsa,aes_128_gcm,null,sha256},
                                      {ecdh_ecdsa,aes_128_cbc,sha256,sha256},
                                      {ecdh_rsa,aes_128_cbc,sha256,sha256},
                                      {dhe_rsa,aes_128_gcm,null,sha256},
                                      {dhe_dss,aes_128_gcm,null,sha256},
                                      {dhe_rsa,aes_128_cbc,sha256},
                                      {ecdh_rsa,aes_128_gcm,null,sha256}
                                     ]}
                         ]}
          ]}
].
</pre>
      </p>

      <p>
        To list all cipher suites supported by installed Erlang runtime, use <code>rabbitmq-diagnostics</code>:

<pre class="sourcecode bash">
rabbitmq-diagnostics cipher_suites
</pre>

        the output uses Erlang terms and thus can be copied into
        RabbitMQ's <a href="/configure.html">classic or advanced config file</a>.
      </p>

      <p>The same suites can be listed in the OpenSSL format:</p>

<pre class="sourcecode bash">
rabbitmq-diagnostics cipher_suites --openssl-format
</pre>

      <p>
        An <a href="https://github.com/erlang/otp/wiki/Cipher-suite-correspondence-table">IANA and Erlang/OTP cipher suite correspondence table</a>
        can be used to find corresponding values in both formats.
      </p>

      <p>
        When overriding cipher suites, it is highly recommended
        that server-preferred <a href="#cipher-suite-order">cipher suite ordering is enforced</a>.
      </p>

      <doc:subsection name="cipher-suite-order">
        <doc:heading>Cipher Suite Order</doc:heading>

        <p>
          During TLS connection negotiation, the server and the client negotiate
          what cipher suite will be used. It is possible to force server's TLS
          implementation to dictate its preference (cipher suite order) to avoid
          malicious clients that intentionally negotiate weak cipher suites in
          preparation for running an attack on them.
          To do so, configure <code>honor_cipher_order</code>
          and <code>honor_ecc_order</code> to <code>true</code>:

<pre class="sourcecode ini">
listeners.ssl.1        = 5671
ssl_options.cacertfile = /path/to/ca_certificate.pem
ssl_options.certfile   = /path/to/server_certificate.pem
ssl_options.keyfile    = /path/to/server_key.pem
ssl_options.versions.1 = tlsv1.2
ssl_options.versions.2 = tlsv1.1

ssl_options.honor_cipher_order = true
ssl_options.honor_ecc_order    = true
</pre>

Or, in the classic config format:

<pre class="sourcecode erlang">
%% Enforce server-provided cipher suite order (preference)
[
 {ssl, [{versions, ['tlsv1.2', 'tlsv1.1']}]},
 {rabbit, [
           {ssl_listeners, [5671]},
           {ssl_options, [{cacertfile, "/path/to/ca_certificate.pem"},
                          {certfile,   "/path/to/server_certificate.pem"},
                          {keyfile,    "/path/to/server_key.pem"},
                          {versions,   ['tlsv1.2', 'tlsv1.1']},

                          %% ...


                          {honor_cipher_order,   true},
                          {honor_ecc_order,      true},
                         ]}
          ]}
].
</pre>
        </p>
      </doc:subsection>
    </doc:section>


    <doc:section name="major-vulnerabilities">
      <doc:heading>Known TLS vulnerabilities and Their Mitigation</doc:heading>
      <h4>ROBOT</h4>
      <p>
        <a href="https://robotattack.org/">ROBOT attack</a> affects RabbitMQ installations that rely on RSA
        cipher suites and run on Erlang/OTP versions prior to
        19.3.6.4 and 20.1.7. To mitigate, <a href="/which-erlang.html">upgrade Erlang/OTP</a> to a patched version
        and consider <a href="#configuring-ciphers">limiting the list of supported cipher suites</a>.
      </p>

      <h4>POODLE</h4>
      <p>
          <a href="https://www.openssl.org/~bodo/ssl-poodle.pdf">POODLE</a> is a known SSL/TLS attack that originally compromised SSLv3.
          Starting with version 3.4.0, RabbitMQ server refuses to accept SSLv3 connections. In December 2014, a modified version of
          the POODLE attack that affects TLSv1.0 was <a href="https://www.imperialviolet.org/2014/12/08/poodleagain.html">announced</a>.
          It is therefore recommended to either run Erlang 18.0 or later, which
          <a href="http://www.erlang.org/news/88">etrminates TLS 1.0 implementation vulnerability to POODLE</a>,
          or <a href="#disabling-tls-versions">disable TLSv1.0 support</a>.
      </p>

      <h4>BEAST</h4>
      <p>
          <a href="http://en.wikipedia.org/wiki/Transport_Layer_Security#BEAST_attack">BEAST attack</a> is a known vulnerability that
          affects TLSv1.0. To mitigate it, <a href="#disabling-tls-versions">disable TLSv1.0 support</a>.
      </p>
    </doc:section>



    <doc:section name="tls-evaluation-tools">
      <doc:heading>Evaluating TLS Setups</doc:heading>
        <p>
          Because TLS has many configurable parameters
          and some of them have suboptimal defaults for historical
          reasons, TLS setup evaluation is a recommended practice.
          Multiple tools exist that perform various tests on TLS-enabled
          server endpoints, for example, testing whether it is prone
          to known attacks such as POODLE, BEAST, and others.
        </p>

      <doc:subsection name="testssl-sh">
        <doc:heading>testssl.sh</doc:heading>
        <p>
          <a href="https://testssl.sh/">testssl.sh</a> is a mature and extensive TLS endpoint testing
          tool that can be used with protocol endpoints that do not serve HTTP.
          Note that the tool performs many tests (for instance, on some machines it runs
          over 350 cipher suite tests alone) and passing every single one may or may not
          make sense for every environment. For example, many production deployments
          do not use CRLs (Certificate Revocation lists); most development environments
          use self-signed certificates and don't have to worry about
          the most optimal set of cipher suites enabled; and so on.
        </p>
        <p>
          The following example configuration (in the classic config format) passes key testssl tests on Erlang 19.3 or later
          versions:

<pre class="sourcecode erlang">
[
 {ssl,    [
           {versions,           ['tlsv1.2']},
           {secure_renegotiate, true}
          ]},
 {rabbit, [
           {ssl_listeners, [5671]},
           {ssl_options, [{cacertfile, "/path/to/ca_certificate.pem"},
                          {certfile,   "/path/to/server_certificate.pem"},
                          {keyfile,    "/path/to/server_key.pem"},
                          {versions, ['tlsv1.2']},
                          {ciphers,  [
                                      {ecdhe_ecdsa,aes_256_gcm,null,sha384},
                                      {ecdhe_rsa,aes_256_gcm,null,sha384},
                                      {ecdh_ecdsa,aes_256_gcm,null,sha384},
                                      {ecdh_rsa,aes_256_gcm,null,sha384},
                                      {dhe_rsa,aes_256_gcm,null,sha384},
                                      {rsa,aes_256_gcm,null,sha384},
                                      {ecdhe_ecdsa,aes_128_gcm,null,sha256},
                                      {ecdhe_rsa,aes_128_gcm,null,sha256},
                                      {ecdh_ecdsa,aes_128_gcm,null,sha256},
                                      {ecdh_rsa,aes_128_gcm,null,sha256},
                                      {dhe_rsa,aes_128_gcm,null,sha256},
                                      {ecdh_rsa,aes_128_gcm,null,sha256}
                                     ]},
                          {honor_cipher_order,   true},
                          {honor_ecc_order,      true},
                          {secure_renegotiate,   true},
                          {verify,               verify_peer},
                          {fail_if_no_peer_cert, false}]}
          ]}
].
        </pre>

          For example, this setup is reported as not vulnerable to
          a set of known high profile vulnerabilities:

<pre class="sourcecode ini">
 Testing vulnerabilities

 Heartbleed (CVE-2014-0160)                not vulnerable (OK), no heartbeat extension
 CCS (CVE-2014-0224)                       not vulnerable (OK)
 Ticketbleed (CVE-2016-9244), experiment.  --   (applicable only for HTTPS)
 Secure Renegotiation (CVE-2009-3555)      not vulnerable (OK)
 Secure client-Initiated Renegotiation     not vulnerable (OK)
 CRIME, TLS (CVE-2012-4929)                not vulnerable (OK) (not using HTTP anyway)
 POODLE, SSL (CVE-2014-3566)               not vulnerable (OK)
 TLS_FALLBACK_SCSV (RFC 7507)              No fallback possible, TLS 1.2 is the only protocol (OK)
 SWEET32 (CVE-2016-2183, CVE-2016-6329)    not vulnerable (OK)
 FREAK (CVE-2015-0204)                     not vulnerable (OK)
 DROWN (CVE-2016-0800, CVE-2016-0703)      not vulnerable on this port (OK)
                                           make sure you don't use this certificate elsewhere with SSLv2 enabled services
                                           https://censys.io/ipv4?q=D6D88C603E0212109EC14429DCBB4A6B73286F8B7F5C956FE53D1A94A34D88FB could help you to find out
 LOGJAM (CVE-2015-4000), experimental      not vulnerable (OK): no DH EXPORT ciphers, no DH key detected
 BEAST (CVE-2011-3389)                     no SSL3 or TLS1 (OK)
 LUCKY13 (CVE-2013-0169)                   not vulnerable (OK)
 RC4 (CVE-2013-2566, CVE-2015-2808)        no RC4 ciphers detected (OK)
            </pre>
          </p>
        </doc:subsection>
      </doc:section>


      <doc:section name="erlang-client">
        <doc:heading>Using TLS in the Erlang client</doc:heading>
        <p>
          Enabling TLS in the RabbitMQ Erlang client is similar to configuring other
          settings related to networking. The <code>#amqp_params_network</code> record
          provides a field, <code>ssl_options</code>, for all the <a href="http://erlang.org/doc/man/ssl.html">standard Erlang TLS options</a>.
        </p>

        <doc:subsection name="erlang-ssl">
          <doc:heading>Erlang TLS Options</doc:heading>
            <p>The three important options which must be supplied are:</p>
            <ul class="plain">
              <li>The <code>cacertfile</code> option specifies the certificates of the root
                Certificate Authorities that we wish to implicitly trust.</li>
              <li>The <code>certfile</code> is the client's own certificate in PEM format</li>
              <li>The <code>keyfile</code> is the client's private key file in PEM format</li>
            </ul>
            <p><code>server_name_indication</code> - set this option to the host name of the server
              to which a TLS connection will be made to enable "Server Name Indication" verification
              of the certificate presented by the server. This ensures that the server certificate's
              <code>CN=</code> value will be verified during TLS connection establishment. You can
              override this behavior by setting <code>server_name_indication</code> to a different
              host name or to the special value <code>disable</code> to disable this
              verification. Note that, by default, SNI is <b>not</b> enabled. This default
              will change in a future RabbitMQ Erlang client release.
            </p>
            <p><code>verify</code> - set this option to <code>verify_peer</code> to enable X509
              certificate chain verification. The <code>depth</code> option configures certificate
              verification depth. Note that, by default, <code>verify</code> is set to
              <code>verify_none</code>, which disables certificate chain verification. This default
              will change in a future RabbitMQ Erlang client release.
            </p>
        </doc:subsection>

        <doc:subsection name="erlang-code-example">
          <doc:heading>Code Example</doc:heading>
<pre class="sourcecode erlang">
SslOpts = [{cacertfile, &quot;/path/to/testca/ca_certificate_bundle.pem&quot;},
           {certfile, &quot;/path/to/client/certificate.pem&quot;},
           {keyfile, &quot;/path/to/client/private_key.pem&quot;},

           %% only necessary with intermediate CAs
           %% {depth, 2},

           %% Note: it is recommended to set 'verify' to
           %% to 'verify_peer' to ensure that X509
           %% certificate chain validation is enabled
           %%
           %% Do not set 'verify' or set it to verify_none
           %% if x509 certificate chain validation is
           %% not desired
           {verify, verify_peer},

           %% If Server Name Indication validation is desired,
           %% set the following option to the host name to which
           %% the connection is made. If necessary, this option
           %% may be set to another host name to match the server
           %% certificate's CN= value.
           %% Do not set this option or set it to the atom 'disable'
           %% to disable SNI validation
           {server_name_indication, "my.rmq-server.net"}],

Params = #amqp_params_network{host = "my.rmq-server.net",
                              port = 5671,
                              ssl_options = SslOpts}

{ok, Conn} = amqp_connection:start(Params),
</pre>

            <p>You can now go ahead and use Conn as a normal connection.</p>
        </doc:subsection>
      </doc:section>



      <doc:section name="manual-certificate-generation">
        <doc:heading>Manually Generating a CA, Certificates and Private Keys</doc:heading>
        <p>
          This section of the guide explains how to generate a Certificate Authority and
          use it to generate and sign two certificate/key pairs, one for the server and one for
          client libraries. Note that the process can be <a href="#automated-certificate-generation">automated using
          existing tools</a>, which is recommended. This section is intended for those who would like to improve their understanding
          the process, OpenSSL command line tools and some important aspects OpenSSL configuration.
        </p>

        <p>
          This guide assumes a UNIX-like operating system (Linux, MacOS, a BSD variant and so on)
          and a recent version of OpenSSL available in <pre>PATH</pre>.
        </p>

        <p>
          First let's create a directory for our test Certificate Authority:

<pre class="sourcecode bash">
mkdir testca
cd testca
mkdir certs private
chmod 700 private
echo 01 &gt; serial
touch index.txt
</pre>
          </p>

          <p>
            Now add the following OpenSSL configuration file, <code>openssl.cnf</code>, within the newly created <code>testca</code>
            directory:
          </p>

<pre class="sourcecode ini">
[ ca ]
default_ca = testca

[ testca ]
dir = .
certificate = $dir/cacertificate.pem
database = $dir/index.txt
new_certs_dir = $dir/certs
private_key = $dir/private/ca_private_key.pem
serial = $dir/serial

default_crl_days = 7
default_days = 365
default_md = sha256

policy = testca_policy
x509_extensions = certificate_extensions

[ testca_policy ]
commonName = supplied
stateOrProvinceName = optional
countryName = optional
emailAddress = optional
organizationName = optional
organizationalUnitName = optional
domainComponent = optional

[ certificate_extensions ]
basicConstraints = CA:false

[ req ]
default_bits = 2048
default_keyfile = ./private/ca_private_key.pem
default_md = sha256
prompt = yes
distinguished_name = root_ca_distinguished_name
x509_extensions = root_ca_extensions

[ root_ca_distinguished_name ]
commonName = hostname

[ root_ca_extensions ]
basicConstraints = CA:true
keyUsage = keyCertSign, cRLSign

[ client_ca_extensions ]
basicConstraints = CA:false
keyUsage = digitalSignature,keyEncipherment
extendedKeyUsage = 1.3.6.1.5.5.7.3.2

[ server_ca_extensions ]
basicConstraints = CA:false
keyUsage = digitalSignature,keyEncipherment
extendedKeyUsage = 1.3.6.1.5.5.7.3.1
</pre>
          <p>
            Next we need to generate the key and certificates that our test
            Certificate Authority will use. Still within the <code>testca</code>
            directory:
          </p>

<pre class="sourcecode bash">
openssl req -x509 -config openssl.cnf -newkey rsa:2048 -days 365 \
    -out ca_certificate_bundle.pem -outform PEM -subj /CN=MyTestCA/ -nodes
openssl x509 -in ca_certificate_bundle.pem -out ca_certificate_bundle.cer -outform DER
</pre>

          <p>
            This is all that is needed to generate a test Certificate
            Authority. The root certificate is in <code>testca/ca_certificate_bundle.pem</code>
            and is also in <code>testca/ca_certificate_bundle.cer</code>. These two files contain the
            same information, but in different formats, PEM and DER.
            Most software uses the former but some tools require the latter.
          </p>
          <p>
            Having set up our Certificate Authority, we now need to generate
            private keys and certificates for the clients and the server.
            RabbitMQ broker uses certificates and private keys in the PEM format.
            Some client libraries use the PEM format, others will require conversion
            to a different format (e.g. PKCS#12).
          </p>
          <p>
            Java and .NET clients use a certificate format called PKCS#12 and custom certificate stores.
            Certificate store contains both the client's certificate and key. The PKCS store is usually password protected, and so that
            a password must be provided.
          </p>
          <p>
            The process for creating server and client certificates is very
            similar. First the server:
          </p>
<pre class="sourcecode bash">
cd ..
ls
# => testca
mkdir server
cd server
openssl genrsa -out private_key.pem 2048
openssl req -new -key private_key.pem -out req.pem -outform PEM \
    -subj /CN=$(hostname)/O=server/ -nodes
cd ../testca
openssl ca -config openssl.cnf -in ../server/req.pem -out \
    ../server/server_certificate.pem -notext -batch -extensions server_ca_extensions
cd ../server
openssl pkcs12 -export -out server_certificate.p12 -in server_certificate.pem -inkey private_key.pem \
    -passout pass:MySecretPassword
</pre>

          <p>
          And now the client:
<pre class="sourcecode bash">
cd ..
ls
# => server testca
mkdir client
cd client
openssl genrsa -out private_key.pem 2048
openssl req -new -key private_key.pem -out req.pem -outform PEM \
    -subj /CN=$(hostname)/O=client/ -nodes
cd ../testca
openssl ca -config openssl.cnf -in ../client/req.pem -out \
    ../client/client_certificate.pem -notext -batch -extensions client_ca_extensions
cd ../client
openssl pkcs12 -export -out client_certificate.p12 -in client_certificate.pem -inkey private_key.pem \
    -passout pass:MySecretPassword
</pre>
          </p>
          <p>
            The two examples above generate private keys that are 2048 bits in size.
            It is possible to use longer (and thus more secure but also slower to generate)
            keys by providing a different value to <code>openssl genrsa</code>, e.g.:

<pre class="sourcecode bash">
openssl genrsa -out private_key.pem 4096
</pre>
          </p>
          <p>
            Another option would be to generate a key using <a href="https://blog.cloudflare.com/a-relatively-easy-to-understand-primer-on-Elliptic-curve-cryptography/">Elliptic Curve Cryptography</a>. Instead of <code>openssl genrsa</code> use
            <code>openssl ecparam</code> like so:

<pre class="sourcecode bash">
openssl ecparam -out private_key.pem -genkey -name prime256v1
</pre>

            <code>prime256v1</code> in the example above is an Elliptic curve name.
            Different versions of OpenSSL will have a different set of curves available,
            list them with <code>openssl ecparam -list_curves</code>.
          </p>
      </doc:section>

  </body>
</html>
