<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
]>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:r="http://www.rabbitmq.com/namespaces/ad-hoc/conformance"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Community Plugins</title>
  </head>
  <body show-in-this-page="true">
      <doc:section name="overview">
        <p>
          For your convenience, we offer binary downloads of plugins
          which have been contributed by authors in the
          community. These plugins do not ship with the RabbitMQ
          server itself; you can download them from
          our community plugin archive.
        </p>
        <p>
          The plugins are available compiled against various releases
          of RabbitMQ.
        </p>
        <p>
          Of course, we offer no guarantee that these will even work
          against a given release of RabbitMQ. We build them at
          release time, and also when requested to by a plugin
          author. If multiple versions of a plugin exist for a given
          version of RabbitMQ in the archive, we suggest you download
          the latest version.
        </p>
        <ul>
          <li><a href="/community-plugins">Download community plugins</a></li>
          <li><a href="installing-plugins.html">Installing additional plugins</a></li>
        </ul>
      </doc:section>
      <doc:section name="routing">
        <doc:heading>Routing</doc:heading>

        <table class="community-plugins">
          <tr>
            <th>rabbitmq_lvc</th>
          </tr>
          <tr>
            <td>
              The last value exchange acts like a direct exchange (binding
              keys are compared for equality with routing keys); but it
              also keeps track of the last value that was published with
              each routing key, and when a queue is bound, it
              automatically enqueues the last value for the binding key.
              <p>
                Maintainer: <b>Simon MacMullen</b><br/>
                Github: <a href="https://github.com/simonmacmullen/rabbitmq-lvc-plugin">simonmacmullen/rabbitmq-lvc-plugin</a>
              </p>
            </td>
          </tr>
<!--
          <tr>
            <th>rabbit_presence_exchange</th>
            <td>
              Adds exchange type <code>x-presence</code>. An exchange
              of type <code>x-presence</code> notifies queues that are
              bound to it when other bindings appear and disappear.

              <p>
                Maintainer: <b>Tony Garnock-Jones</b><br/>
                Github: <a href="https://github.com/tonyg/presence-exchange">tonyg/presence-exchange</a>
              </p>
            </td>
          </tr>
-->
        </table>
      </doc:section>

      <doc:section name="auth">
        <doc:heading>Authentication / Authorisation</doc:heading>

        <table class="community-plugins">
          <tr>
            <th>rabbitmq_auth_backend_http</th>
          </tr>
          <tr>
            <td>
              Provides the ability for your RabbitMQ server to perform
              authentication (determining who can log in) and
              authorisation (determining what permissions they have)
              by making requests to an HTTP server.
              <p>
                Author: <b>Simon MacMullen</b><br/>
                Github: <a href="https://github.com/simonmacmullen/rabbitmq-auth-backend-http">simonmacmullen/rabbitmq-auth-backend-http</a>
              </p>
            </td>
          </tr>
          <tr>
            <th>rabbitmq_auth_backend_amqp</th>
          </tr>
          <tr>
            <td>
              Provides the ability for your RabbitMQ server to perform
              authentication and authorisation over AMQP itself.
              <p>
                Author: <b>Simon MacMullen</b><br/>
                Github: <a href="https://github.com/simonmacmullen/rabbitmq-auth-backend-amqp">simonmacmullen/rabbitmq-auth-backend-amqp</a>
              </p>
            </td>
          </tr>
        </table>
      </doc:section>

      <doc:section name="mgmt">
        <doc:heading>Management</doc:heading>
        <table class="community-plugins">
          <tr>
            <th>rabbitmq_top</th>
          </tr>
          <tr>
            <td>
              This plugin adds a "top" like view of busy processes to the
              management plugin.
              <p>
                Author: <b>Simon MacMullen</b><br/>
                Github: <a href="https://github.com/simonmacmullen/rabbitmq-top">simonmacmullen/rabbitmq-top</a>
              </p>
            </td>
          </tr>
          <tr>
            <th>rabbitmq_management_exchange</th>
          </tr>
          <tr>
            <td>
              This plugin adds an exchange type which allows you to
              connect to the management API using AMQP rather than HTTP.
              <p>
                Author: <b>Simon MacMullen</b><br/>
                Github: <a href="https://github.com/simonmacmullen/rabbitmq-management-exchange">simonmacmullen/rabbitmq-management-exchange</a>
              </p>
            </td>
          </tr>
          <tr>
            <th>rabbitmq_event_exchange</th>
          </tr>
          <tr>
            <td>
              This plugin adds an exchange <code>amq.rabbitmq.event</code>
              which allows you to hear when queues, exchanges, bindings,
              users, connections and so on are created and deleted.
              <p>
                Author: <b>Simon MacMullen</b><br/>
                Github: <a href="https://github.com/simonmacmullen/rabbitmq-event-exchange">simonmacmullen/rabbitmq-event-exchange</a>
              </p>
            </td>
          </tr>
        </table>
      </doc:section>

      <doc:section name="protocols">
        <doc:heading>Protocols</doc:heading>
        <table class="community-plugins">
<!--
          <tr>
            <th>rabbit_udp_exchange</th>
          </tr>
          <tr>
            <td>
              Adds a new exchange type which listens on a
              specified UDP port for incoming messages, and relays them on
              to the queues bound to the exchange. It also takes messages
              published to the exchange and relays them on to a specified
              IP address and UDP port.
              <p>
                Author: <b>Tony Garnock-Jones</b><br/>
                Github: <a href="https://github.com/tonyg/udp-exchange">tonyg/udp-exchange</a>
              </p>
            </td>
          </tr>
-->
          <tr>
            <th>rabbitmq_jsonrpc_channel</th>
          </tr>
          <tr>
            <td>
              Adds an HTTP server which makes use of JSON-RPC polling
              to emulate AMQP channels in a web browser. Note that
              this functionality is split across various plugins:
              <ul>
                <li><code>rfc4627_jsonrpc</code></li>
                <li><code>rabbitmq_jsonrpc</code></li>
                <li><code>rabbitmq_jsonrpc_channel</code></li>
                <li><code>rabbitmq_jsonrpc_channel_examples</code> <i>(to see example code)</i></li>
              </ul>
              <p>
                Authors: <b>The RabbitMQ Team</b>
              </p>
            </td>
          </tr>
        </table>
      </doc:section>
  </body>
</html>
