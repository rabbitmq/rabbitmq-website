<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
]>
<!--
Copyright (c) 2007-2018 Pivotal Software, Inc.

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License,
Version 2.0 (the "License”); you may not use this file except in compliance
with the License. You may obtain a copy of the License at

https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<html  xmlns="http://www.w3.org/1999/xhtml" xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc">
  <head>
    <title>Java Tools</title>
  </head>
  <body>
    <p class="intro">
      This page documents some Java-based utility programs (PerfTest, Tracer).
    </p>

    <doc:section name="throughput-load-testing">
      <doc:heading>PerfTest</doc:heading>
      <p>
        RabbitMQ has a throughput testing tool, PerfTest, that is based on the Java client and can be
        configured to simulate basic workloads and <a href="#iot-workloads">more advanced workloads</a>
        as well. PerfTest has extra tools
        that produce HTML graphs of the output.

        A RabbitMQ cluster can be limited by a number of factors, from
        infrastructure-level constraints (e.g. network bandwidth) to
        RabbitMQ configuration and topology to applications that
        publish and consume. PerfTest can demonstrate baseline
        performance of a node or a cluster of nodes.
      </p>

      <doc:subsection name="perf-test-installation">
        <doc:heading>Installation</doc:heading>

        <p>
          PerfTest is distributed as a binary build archive
          from <a href="https://bintray.com/rabbitmq/java-tools/perf-test">Bintray</a> and
          <a href="https://github.com/rabbitmq/rabbitmq-perf-test/releases">GitHub releases</a>
          as well.
          It is also available on <a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.rabbitmq%22%20AND%20a%3A%22perf-test%22">Maven Central</a>
          if one needs to use it as library.
          Note the documentation below can cover features available only in milestone releases or
          release candidates, available in our
          <a href="https://bintray.com/rabbitmq/java-tools-milestones/perf-test">Java Tools milestones repository</a>
          and in
          <a href="https://github.com/rabbitmq/rabbitmq-perf-test/releases">GitHub releases</a> as well.
        </p>

        <p>
          The distribution contains a script (<code>bin/runjava</code> or <code>bin/runjava.bat</code>)
          to run Java with the class path correctly configured, e.g.
          <code>bin/runjava com.rabbitmq.perf.PerfTest</code> runs
          the <code>PerfTest</code> Java class.
        </p>
        <p>
          To verify a PerfTest installation, use

          <pre class="sourcecode bash">bin/runjava com.rabbitmq.perf.PerfTest --help</pre>
        </p>
      </doc:subsection>

      <doc:subsection name="using-perf-test">
        <doc:heading>Using PerfTest</doc:heading>
        <p>
          The most basic way of running PerfTest only specifies a URI to
          connect to, a number of publishers to use (say, 1) and a
          number of consumers to use (say, 2). Note that RabbitMQ Java
          client can achieve high rates for publishing (up to 80 to 90K
          messages per second per connection), given enough bandwidth and when some safety
          measures (publisher confirms) are disabled, so overprovisioning
          publishers is rarely necessary (unless that's a specific objective of the test).

          The following command runs PerfTest with a single publisher
          without publisher confirms, two consumers (each receiving a
          copy of every message) that use automatic acknowledgement mode
          and a single queue named “throughput-test-x1-y2”. Publishers
          will publish as quickly as possible, without any rate
          limiting. Results will be prefixed with “test 1” for easier
          identification and comparison:

<pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest -x 1 -y 2 -u "throughput-test-1" -a --id "test 1"
</pre>
        </p>

        <p>
          This modification will use 2 publishers and 4 consumers,
          typically yielding higher throughput given enough CPU cores
          on the machine and RabbitMQ nodes:

<pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest -x 2 -y 4 -u "throughput-test-2" -a --id "test 2"
</pre>
        </p>

        <p>
          This modification switches consumers to manual acknowledgements:

<pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest -x 1 -y 2 -u "throughput-test-3" --id "test 3"
</pre>
        </p>

        <p>
          This modification changes message size from default (12 bytes) to 4 kB:

<pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest -x 1 -y 2 -u "throughput-test-4" --id "test 4" -s 4000
</pre>
        </p>

        <p>
          PerfTest can use durable queues and persistent messages:

<pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest -x 1 -y 2 -u "throughput-test-5" --id "test-5" -f persistent
</pre>
        </p>

        <p>
          When PerfTest is running, it is important to monitor various
          publisher and consumer metrics provided by the <a href="/management.html">management
          UI</a>. For example, it is possible to see how much network
          bandwidth a publisher has been using recently on the
          connection page.
        </p>

        <p>
          Queue page demonstrates message rates, consumer count,
          acknowledgement mode used by the consumers, consumer
          utilisation and message location break down (disk, RAM,
          paged out transient messages, etc). When durable queues and
          persistent messages are used, node I/O and message
          store/queue index operation metrics become particularly
          important to monitor.
        </p>

        <p>
          Consumers can ack multiple messages at once, for example, 100 in this configuration:

<pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest -x 1 -y 2 -u "throughput-test-6" --id "test-6" -f persistent --multi-ack-every 100
</pre>
        </p>

        <p>
<a href="/confirms.html">Consumer prefetch (QoS)</a> can be configured as well (in this example to 500):

<pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest -x 1 -y 2 -u "throughput-test-7" --id "test-7" -f persistent --multi-ack-every 200 -q 500
</pre>
        </p>

        <p>
          Publisher confirms can be used with maximum of N outstanding publishes:

<pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest -x 1 -y 2 -u "throughput-test-8" --id "test-8" -f persistent -q 500 -c 500
</pre>
        </p>

        <p>
          PerfTest can publish only a certain number of messages instead of running until shut down:

<pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest -x 1 -y 2 -u "throughput-test-10" --id "test-10" -f persistent -q 500 -pmessages 100000
</pre>
        </p>

        <p>
          Publisher rate can be limited:

<pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest -x 1 -y 2 -u "throughput-test-11" --id "test-11" -f persistent -q 500 --rate 5000
</pre>
        </p>

        <p>
          Consumer rate can be limited as well to simulate slower consumers or create a backlog:

<pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest -x 1 -y 2 -u "throughput-test-12" --id "test-12" -f persistent --rate 5000 --consumer-rate 2000
</pre>

            Note that the consumer rate limit is applied per consumer, so in the
            configuration above the limit is actually 2 * 2000 = 4000
            deliveries/second.

        </p>

        <p>
          PerfTest can be configured to run for a limited amount of time in seconds with the
            <code>-z</code> option:

<pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest -x 1 -y 2 -u "throughput-test-13" --id "test-13" -f persistent -z 30
</pre>

        </p>

        <p>
          Running PerfTest without consumers and with a limited number
          of messages can be used to pre-populate a queue, e.g. with
          1M messages 1 kB in size each::

<pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest -y0 -p -u "throughput-test-14" -s 1000 -C 1000000 --id "test-14" -f persistent
</pre>

            Use the <code>-D</code> option to limit the number of consumed messages. Note
            the <code>-z</code> (time limit), <code>-C</code> (number of
            published messages), and <code>-D</code> (number of consumed messages)
            options can be used together but their combination can lead to funny results.
            <code>-r 1 -x 1 -C 10 -y 1 -D 20</code> would for example stop the producer
            once 10 messages have been published, letting the consumer wait forever
            the remaining 10 messages (as the publisher is stopped).

        </p>

        <p>
          To consume from a pre-declared and pre-populated queue without starting any publishers,
          use

<pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest -x0 -y10 -p -u "throughput-test-14" --id "test-15"
</pre>
        </p>

        <p>
          PerfTest is useful for establishing baseline cluster throughput with
          various configurations but does not simulate many other aspects of
          real world applications. It is also biased towards very simplistic
          workloads that use a single queue, which provides <a href="/queues.html">limited CPU utilisation</a> on RabbitMQ nodes and
          is not recommended for most cases.

          Multiple PerfTest instances running simultaneously can be used to
          simulate more realistic workloads.
        </p>
      </doc:subsection>

        <doc:subsection name="customising-queues-and-messages">
            <doc:heading>Customising queues and messages</doc:heading>

            <p>
                PerfTest can create queues using provided queue arguments:

<pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest --queue-arguments x-max-length=10
</pre>

                The previous command will create a <a href="/maxlength.html">queue with a length limit</a>
                of 10. You can also provide several queue arguments by separating the
                key/value pairs with commas:

<pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest --queue-arguments x-max-length=10,x-dead-letter-exchange=some.exchange.name
</pre>

            </p>

            <p>
                You can also specify message properties with key/value pairs separated by commas:

<pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest --message-properties priority=5,timestamp=2007-12-03T10:15:30+01:00
</pre>

                The supported property keys are: <code>contentType</code>,
                <code>contentEncoding</code>,
                <code>deliveryMode</code>, <code>priority</code>,
                <code>correlationId</code>, <code>replyTo</code>,
                <code>expiration</code>, <code>messageId</code>,
                <code>timestamp</code>, <code>type</code>, <code>userId</code>,
                <code>appId</code>, <code>clusterId</code>. If some provided
                keys do not belong to the previous list, the pairs will be considered
                as headers (arbitrary key/value pairs):

<pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest --message-properties priority=10,header1=value1,header2=value2
</pre>

            </p>

            <p>
                You can mimic real messages by specifying their content and
                content type. This can be useful when plugging real application
                consumers downstream. The content can come from one or several files and
                the content-type can be specified:

<pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest --consumers 0 \
    --body content1.json,content2.json --body-content-type application/json
</pre>

            </p>

        </doc:subsection>

        <doc:subsection name="working-with-many-queues">
            <doc:heading>Working with many queues</doc:heading>

            <p>PertTest supports balancing the publishing and the consumption
                across a sequence of queues, e.g.:

<pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest --queue-pattern 'perf-test-%d' \
    --queue-pattern-from 1 --queue-pattern-to 10 \
    --producers 100 --consumers 100
</pre>

            The previous command would create the <code>perf-test-1</code>, <code>perf-test-2</code>, ...,
            <code>perf-test-10</code> queues and spreads the producers and consumers across them.
                This way each queue will have 10 consumers and 10 producers sending messages to it.</p>

            <p>Load is balanced in a round-robin fashion:


<pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest --queue-pattern 'perf-test-%d' \
    --queue-pattern-from 1 --queue-pattern-to 10 \
    --producers 15 --consumers 30
</pre>
                With the previous command, queues from <code>perf-test-1</code> to <code>perf-test-5</code>
                will have 2 producers, and queues from <code>perf-test-6</code> to <code>perf-test-10</code>
                will have only 1 producer. Each queue will have 3 consumers.

            </p>

            <p>
                Note the <code>--queue-pattern</code> value is a
                <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Formatter.html">Java printf-style format string</a>.
                The queue index is the only argument passed in. The formatting is very closed to C's <code>printf</code>.
                <code>--queue-pattern 'perf-test-%03d' --queue-pattern-from 1 --queue-pattern-to 500</code> would for
                instance create queues from <code>perf-test-001</code> to <code>perf-test-500</code>.

            </p>

        </doc:subsection>

        <doc:subsection name="simulating-high-loads">
            <doc:heading>Simulating High Loads</doc:heading>

            <p>
                PerfTest can easily run hundreds of connections on a simple desktop machine.
                Each producer and consumer use a Java thread and a TCP connection though,
                so a PerfTest process can quickly run out of file descriptors, depending
                on the OS settings. A simple solution is to use several PerfTest processes,
                on the same machine or not. This is especially handy when combined
                with the <a href="#working-with-many-queues">queue sequence</a> feature:

<pre class="sourcecode bash">
# This first PerfTest process creates 500 queues (from 'perf-test-1' to 'perf-test-500').
# Each queue will have 3 consumers and 1 producer sending messages to it.
bin/runjava com.rabbitmq.perf.PerfTest --queue-pattern 'perf-test-%d' \
    --queue-pattern-from 1 --queue-pattern-to 500 \
    --producers 500 --consumers 1500
# This second PerfTest process creates 500 queues (from 'perf-test-501' to 'perf-test-1000').
# Each queue will have 3 consumers and 1 producer sending messages to it.
bin/runjava com.rabbitmq.perf.PerfTest --queue-pattern 'perf-test-%d' \
    --queue-pattern-from 501 --queue-pattern-to 1000 \
    --producers 500 --consumers 1500
</pre>

                Those 2 processes will simulate 1000 producers and 3000 consumers spread
                across 1000 queues.
            </p>

            <p>
                A PerfTest process can exhaust its file descriptors limit and throw
                <code>java.lang.OutOfMemoryError: unable to create new native thread</code>
                exceptions. A first way to avoid this is to reduce the number of Java threads
                PerfTest uses with the <code>--heartbeat-sender-threads</code> option:

<pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest --queue-pattern 'perf-test-%d' \
    --queue-pattern-from 1 --queue-pattern-to 1000 \
    --producers 1000 --consumers 3000 --heartbeat-sender-threads 10
</pre>

                By default, each producer and consumer connection uses a dedicated thread
                to send heartbeats to the broker, so this is 4000 threads for heartbeats
                in the previous sample. Considering producers and consumers always communicate
                with the broker by publishing messages or sending acknowledgments, connections
                are never idle, so using 10 threads for heartbeats for the 4000 connections
                should be enough. Don't hesitate to experiment to come up with the appropriate
                <code>--heartbeat-sender-threads</code> value for your use case.
            </p>
            <p>
                Another way to avoid <code>java.lang.OutOfMemoryError: unable to create new native thread</code>
                exceptions is to tune the number of file descriptors allowed per process
                at the OS level, as some distributions use very low limits.
                Here the recommendations are the same as for the broker, so you
                can refer to our <a href="/networking.html#os-tuning">networking guide</a>.
            </p>


        </doc:subsection>

        <doc:subsection name="iot-workloads">
            <doc:heading>Simulating Workloads with a Large Number of Clients ("IoT" Workloads)</doc:heading>

            <p>
                A typical connected device workload involves many producers and consumers (dozens or hundreds of thousands)
                that exchange messages at a low and mostly constant rate, usually a message every few seconds or minutes.
                Simulating such workloads requires a different set of settings compared to
                the workloads that have higher throughput and a small number of clients. With the appropriate set of flags,
                PerfTest can simulate IoT workloads without requiring too many resources.
            </p>
            <p>
                With an IoT workload, publishers usually don't publish many messages per second,
                but rather a message every fixed period of time. This can be achieved by using the <code>--publishing-interval</code>
                flag instead of the <code>--rate</code> one. For example:

                <pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest --publishing-interval 5
                </pre>

                The command above makes the publisher publish a message every 5 seconds.
                To simulate a group of consumers, use the<code>--queue-pattern</code> flag to simulate many consumers across
                many queues:

                <pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest --queue-pattern 'perf-test-%d' \
    --queue-pattern-from 1 --queue-pattern-to 1000 \
    --producers 1000 --consumers 1000 \
    --heartbeat-sender-threads 10 \
    --publishing-interval 5
                </pre>

                To prevent publishers from publishing at roughly the same time and
                distribute the rate more evenly, use
                the <code>--producer-random-start-delay</code> option to add an random
                delay before the first published message:

                <pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest --queue-pattern 'perf-test-%d' \
--queue-pattern-from 1 --queue-pattern-to 1000 \
--producers 1000 --consumers 1000 \
--heartbeat-sender-threads 10 \
--publishing-interval 5 --producer-random-start-delay 120
                </pre>

                With the command above, each publisher will start with a random delay
                between 1 and 120 seconds.
            </p>

            <p>
                When using <code>--publishing-interval</code>, PerfTest will use one thread 
                for scheduling publishing for all 50 producers. So 1000 producers should keep 20 threads busy for
                the publishing scheduling. This ratio can be decreased or increased with the
                <code>--producer-scheduler-threads</code> options depending on the load and the target environment.
                Very few threads can be used for very slow publishers:

<pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest --queue-pattern 'perf-test-%d' \
    --queue-pattern-from 1 --queue-pattern-to 1000 \
    --producers 1000 --consumers 1000 \
    --heartbeat-sender-threads 10 \
    --publishing-interval 60 --producer-random-start-delay 1800 \
    --producer-scheduler-threads 10
</pre>
                In the example above, 1000 publishers will publish every 60 seconds
                with a random start-up delay between 1 second and 15 minutes (1800 seconds). They
                will be scheduled by only 10 threads (instead of 20 by default). Such delay
                values are suitable for long running tests.
            </p>

            <p>
                By default, PerfTest uses blocking network socket I/O to communicate with
                the broker. This mode works fine for clients in many cases but the RabbitMQ Java client
                also supports an <a href="/api-guide.html#java-nio">asynchronous I/O mode</a>,
                where resources like threads can be easily tuned. The goal here is to use as few
                resources as possible to simulate as much load as possible with a single PerfTest instance.
                In the slow publisher example above, a handful of threads should be enough
                to handle the I/O. That's what the
                <code>--nio-threads</code> flag is for:

<pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest --queue-pattern 'perf-test-%d' \
    --queue-pattern-from 1 --queue-pattern-to 1000 \
    --producers 1000 --consumers 1000 \
    --heartbeat-sender-threads 10 \
    --publishing-interval 60 --producer-random-start-delay 1800 \
    --producer-scheduler-threads 10
    --nio-threads 10
</pre>

                PerfTest will use 2 extra threads for internal bookkeeping needs, so the total will be 12 threads
                for I/O over all the connections. With the default blocking I/O mode, each producer (or consumer)
                uses a thread for the I/O loop, that is 2000 threads to simulate 1000 producers and
                1000 consumers.
                Using NIO in PerfTest can dramatically reduce the resources used to simulate workloads with a large
                number of connections with appropriate tuning.
            </p>
        </doc:subsection>

        <doc:subsection name="perftest-different-machines">
            <doc:heading>Running Producers and Consumers on Different Machines</doc:heading>

            <p>
                If you run producers and consumers on different machines or even
                in different processes, and you want PerfTest to calculate latency,
                you need to use the <code>--use-millis</code> flag. E.g. for sending messages
                from one host:
            </p>
<pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest --producers 1 --consumers 0 --predeclared --routing-key rk --queue q --use-millis
</pre>
            <p>
            And for consuming messages from another host:
            </p>
<pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest --producers 0 --consumers 1 --predeclared --routing-key rk --queue q --use-millis
</pre>
            <p>
                Note that as soon as you use <code>--use-millis</code>, latency is calculated in
                milliseconds instead of microseconds. Note also the different machines should have
                their clock synchronised, e.g. by NTP.
                If you don't run producers and consumers on different machines or if you don't
                want PerfTest to calculate latency, you don't need the <code>--use-millis</code> flag.
            </p>
            <p>
                Why does one need to care about the <code>--use-millis</code> flag? PerfTest uses
                by default <code>System.nanoTime()</code> in messages to calculate latency
                between producers and senders. <code>System.nanoTime()</code> provides nanosecond precision
                but must be used only in the same Java process. So PerfTest can fall back to <code>System.currentTimeMillis()</code>,
                which provides only milliseconds precision, but is reliable between different machines
                as long as their clocks are synchronised.
            </p>


        </doc:subsection>

      <doc:subsection name="how-perftest-works">
        <doc:heading>How It Works</doc:heading>

        <p>
          If a queue name is defined (<code>-u "queue-name"</code>),
          PerfTest will create a queue with this name and all
          consumers will consume from this queue. The queue will be
          bound to the direct exchange with its name as the routing
          key. The routing key will be used by producers to send
          messages.  This will cause messages from all producers to be
          sent to this single queue and all consumers to receive
          messages from this single queue.
        </p>
        <p>
          If the queue name is not defined, PerfTest will create a
          random UUID routing key with which producers will publish
          messages.  Each consumer will create its own anonymous queue
          and bind it to the direct exchange with this routing key.
          This will cause each message from all producers to be
          replicated to multiple queues (number of queues equals
          number of consumers), while each consumer will be receiving
          messages from only one queue.
        </p>
      </doc:subsection>

    <doc:subsection name="perf-test-tls">
        <doc:heading>TLS Support</doc:heading>
        <p>
            PerfTest can use TLS to connect to a node that is <a href="/ssl.html">configured to accept TLS connections</a>.
            To enable TLS, simply specify a URI that uses the <code>amqps</code> schema:
        </p>
<pre class="sourcecode bash">
bin/runjava com.rabbitmq.perf.PerfTest -h amqps://localhost:5671
</pre>

        <p>
            By default PerfTest automatically trusts the server
            and doesn't present any client certificate (a warning
            shows up in the console). In many benchmarking or load testing scenarios this may be sufficient.
            If peer verification is necessary, it is possible to
            use the <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/JSSERefGuide.html#InstallationAndCustomization">appropriate
            JVM properties</a> on the command line to override the
            default <code>SSLContext</code>.
            For example, to trust a given server:
        </p>
<pre class="sourcecode bash">
JAVA_OPTS="-Djavax.net.ssl.trustStore=/path/to/server_key.p12 -Djavax.net.ssl.trustStorePassword=bunnies -Djavax.net.ssl.trustStoreType=PKCS12" \
    bin/runjava com.rabbitmq.perf.PerfTest -h amqps://localhost:5671
</pre>
        <p>
            The previous snippet uses a one-liner to define the <code>JAVA_OPTS</code> environment variable
            while running PerfTest. Please refer to the
            <a href="/ssl.html">TLS guide</a> to learn about how to set up RabbitMQ with TLS.
            A convenient way to generate a CA and some self-signed certificate/key pairs for development and QA environments
            is with <a href="https://github.com/michaelklishin/tls-gen/"><code>tls-gen</code></a>.
            <code>tls-gen</code>'s basic profile is a good starting point. How to run PerfTest with
            a certificate/key pair generated by the aforementioned profile:
        </p>

<pre class="sourcecode bash">
JAVA_OPTS="-Djavax.net.ssl.trustStore=/path/to/server_key.p12 -Djavax.net.ssl.trustStorePassword=bunnies -Djavax.net.ssl.trustStoreType=PKCS12 -Djavax.net.ssl.keyStore=/path/to/client_key.p12 -Djavax.net.ssl.keyStorePassword=bunnies -Djavax.net.ssl.keyStoreType=PKCS12" \
    bin/runjava com.rabbitmq.perf.PerfTest -h amqps://localhost:5671
</pre>
    </doc:subsection>


      <doc:subsection name="perf-html">
        <doc:heading>Result Reporting in HTML</doc:heading>
        <p>
          The <code>PerfTest HTML extension</code> are a set of tools
          that can help you run automated benchmarks by wrapping around the
          <code>PerfTest</code> benchmarking framework. You can provide
          benchmark specs, and the tool will take care of running the benchmark,
          collecting results and displaying them in an HTML page. Learn more
          <a href="https://github.com/rabbitmq/rabbitmq-perf-test/blob/master/html/README.md">here</a>.
        </p>
      </doc:subsection>


    </doc:section>

    <doc:section name="tracer">
      <doc:heading>Tracer</doc:heading>
      <p>
        The tracer is a very basic, very simple AMQP 0-9-1 protocol analyzer, similar in
        purpose to <a href="/amqp-wireshark.html">Wireshark</a>.
        Use it with
        the <code>runtracer</code> or <code>runtracer.bat</code> script:
      </p>
      <pre>runtracer <i>listenPort</i> <i>connectHost</i> <i>connectPort</i></pre>
      <dl>
        <dt>listenPort</dt>
        <dd>port to listen for incoming AMQP connections on - defaults to 5673.</dd>
        <dt>connectHost</dt>
        <dd>hostname to use when making an outbound connection in response to an incoming connection - defaults to localhost.</dd>
        <dt>connectPort</dt>
        <dd>port number to use when making an outbound connection - defaults to 5672.</dd>
      </dl>

      <doc:subsection name="tracer-download">
        <doc:heading>Download and source code</doc:heading>
        <p>
          Releases: <a href="https://bintray.com/rabbitmq/java-tools/tracer">Bintray</a>
            <a href="https://github.com/rabbitmq/rabbitmq-tracer/releases">GitHub releases</a>
        </p>
        <p>
          <a href="https://github.com/rabbitmq/rabbitmq-tracer">Source code</a>
        </p>
      </doc:subsection>

    </doc:section>
  </body>
</html>
