<?xml-stylesheet type="text/xml" href="page.xsl"?>
<html xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc">
  <head>
    <title>RabbitMQ - Extensions and Experimental Features</title>
  </head>
  <body>
    <doc:div>
      <p class="intro">
        The RabbitMQ Server implements a number of extensions of the
        <a href="specification.html">AMQP specification</a>, which we
        are documenting here.  There are also some experimental
        features, not directly related to the specification, which we
        consider to be useful but require further testing.
      </p>

      <doc:toc class="compact">
        <doc:heading>Table of Contents</doc:heading>
      </doc:toc>
      
      <doc:section name="alternate-exchange">
        <doc:heading>Alternate Exchanges</doc:heading>
        
        <p>
          It is sometimes desirable to let clients handle messages
          that an exchange was unable to route (i.e. either because
          there were no bound queues our no matching
          bindings). Typical examples of this are
          <ul>
            <li>detecting when clients accidentally or maliciously
            publish messages that cannot be routed</li>
            <li>"or else" routing semantics where some messages are
            handled specially and the rest by a generic handler</li>
          </ul>
        </p>
        <p>
          RabbitMQ's <em>Alternate Exchange</em> ("AE") feature
          addresses these use cases.
        </p>

        <doc:subsection>
          <doc:heading>Configuration</doc:heading>
          <p>
            When creating an exchange the name of an AE can be
            optionally supplied in the <code>exchange.declare</code>
            method's <code>arguments</code> table by specifying a key
            of 'alternate-exchange' and a value of type 'S' (string)
            containing the name.
          </p>
          <p>
            When an AE has been specified, in addition to the usual
            <em>configure</em> permissions on the declared exchange,
            the user needs to have <em>read</em> permissions on that
            exchange and <em>write</em> permissions on the AE.
          </p>
          <p>
            For example:
          </p>
          <pre class="sourcecode">
Map&lt;String, Object&gt; args = new HashMap&lt;String, Object&gt;();
args.put("alternate-exchange", "my-ae");
channel.exchangeDeclare("my-direct", "direct", false, false, false, args);
channel.exchangeDeclare("my-ae", "fanout");
channel.queueDeclare("routed");
channel.queueBind("routed", "my-direct", "key1");
channel.queueDeclare("unrouted");
channel.queueBind("unrouted", "my-ae", "");</pre>
          <p>
            In the above fragment of Java code we create a direct
            exchange 'my-direct' that is configured with an AE called
            'my-ae'. The latter is declared as a fanout exchange. We
            bind one queue 'routed' to 'my-direct' with a binding key
            of 'key1', and a queue 'unrouted' to 'my-ae'.
          </p>
        </doc:subsection>

        <doc:subsection>
          <doc:heading>Operation</doc:heading>
          <p>
            Whenever an exchange with a configured AE cannot route a
            message to any queue (or the message was marked as
            immediate and it cannot be delivered to any consumer) then
            it publishes the message to the specified AE instead. If
            that AE does not exist then a warning is logged.
          </p>
          <p>
            For example:
          </p>
          <pre class="sourcecode">
channel.basicPublish("my-direct", "key2", null, "test".getBytes());
GetResponse r2 = channel.basicGet("unrouted", true); //returns message
channel.basicPublish("my-direct", "key1", null, "test".getBytes());
GetResponse r1 = channel.basicGet("routed", true); //returns message</pre>
          <p>
            Here we first publish a message to 'my-direct' with a
            routing key of 'key1'. That message is routed to the
            'routed' queue, in accordance with the standard AMQP
            behaviour.  However, when publishing a message to
            'my-direct' with a routing key of 'key2', rather than
            being discarded the message is routed via our configured
            AE to the 'unrouted' queue.
          </p>
          <p>
            When an AE cannot route a message, it in turn publishes
            the message to its AE, if it has one configured. This
            process continues until either the message is successfully
            routed, the end of the chain of AEs is reached, or an AE
            is encountered which has already attempted to route the
            message.
          </p>
          <p>
            The semantics of the 'mandatory' and 'immediate' flags
            carries through to AEs. So, for example, if a sender
            specified the 'mandatory' flag on publication of a
            message, and that message could not be routed by the
            original exchange, but was then routed to a queue via an
            AE, then no <code>basic.return</code> is issued.
          </p>
          <p>
            Message properties are carried through when messages are
            routed via AEs. For example, when a message that was
            marked as persistent is routed to some queue via an AE
            then it does get persisted.
          </p>
          <p>
            The queues to which a messages is routed from an AE
            participate in AMQP's <code>tx</code> transactions,
            i.e. if an unroutable message was published inside a tx
            then it will only appear in the queues when that tx is
            committed.
          </p>

        </doc:subsection>

      </doc:section>

      <doc:section name="memsup">
        <doc:heading>Memory-based flow control</doc:heading>

        <p>
          In older versions of the RabbitMQ server it was possible for
          clients to attempt to store so many messages within the
          server that it outgrew the available memory. With the
          current release, the RabbitMQ server detects the total
          amount of RAM installed in the computer on startup. When the
          RabbitMQ server uses above 40% of the total RAM installed,
          it throttles publishers with the <code>channel.flow</code>
          AMQP command.
        </p>

        <p>
          The default memory threshold is set to 40% of total system
          memory. Note that this does not prevent the RabbitMQ server
          from using more RAM, it is merely the point at which
          publishers are throttled. Erlang's garbage collector can, in
          the worst case, cause double the amount of memory to be used
          (by default, 80% of RAM), and non-compliant AMQP clients can
          cause the RabbitMQ server to use more still. It is strongly
          recommended that OS swap or page files are enabled. 32-bit
          architectures impose a per process memory limit of 4GB, and
          common implementations of 64-bit architectures only permit
          a paltry 256TB per process.
        </p>

        <doc:subsection>
          <doc:heading>Usage</doc:heading>

          <p>
            The memory threshold at which the flow control is
            triggered can be adjusted by editing the <code
            class="">rabbitmq.config</code> file (in the appropriate
            location for your platform, as discussed in the <a
            href="install.html#configfile">installation guide</a>). An
            example is below, which sets the threshold to the default
            value of 0.4: <pre class="sourcecode">[{rabbit, [{vm_memory_high_watermark, 0.4}]}].</pre>
          </p>
          
          <p>
            The default value of 0.4 stands for 40% of RAM detected in
            your system. A value of 0 disables the memory monitor and
            <code>channel.flow</code>.
          </p>
          
          <p> 
            The configured threshold is appended to the
            <b>RABBITMQ_NODENAME</b>.log file when the RabbitMQ server
            starts:
            <pre class="sourcecode">
=INFO REPORT==== 29-Oct-2009::15:43:27 ===
Memory limit set to 2048MB.</pre>
          </p>

          <p>
            If the RabbitMQ server is unable to recognise your system,
            it will append a warning to
            the <b>RABBITMQ_NODENAME</b>.log file. It also then
            assumes than 1GB of RAM is installed:
            <pre class="sourcecode">
=WARNING REPORT==== 29-Oct-2009::17:23:44 ===
Unknown total memory size for your OS {unix,magic_homebrew_os}. Assuming memory size is 1024MB.</pre>

            In this case, the <code>vm_memory_high_watermark</code>
            configuration value is used to scale the assumed 1GB
            RAM. Thus in such a case, if you actually have 8GB RAM
            installed and you want to invoke <code>channel.flow</code>
            when the RabbitMQ server is using above 3GB,
            set <code>vm_memory_high_watermark</code> to 3.
          </p>

	</doc:subsection>
      </doc:section>

    </doc:div>
  </body>
</html>
