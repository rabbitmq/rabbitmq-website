<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
]>
<!--
Copyright (c) 2007-2019 Pivotal Software, Inc.

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License,
Version 2.0 (the "License”); you may not use this file except in compliance
with the License. You may obtain a copy of the License at

https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Authentication</title>
  </head>
  <body>
      <doc:section name="intro">
        <p>
          RabbitMQ has pluggable support for various SASL authentication
          mechanisms. There are three such mechanisms built into the
          server: <code>PLAIN</code>, <code>AMQPLAIN</code>,
          and <code>RABBIT-CR-DEMO</code>, and one - <code>EXTERNAL</code> -
          available as a <a href="plugins.html">plugin</a>.

          You can also implement your own authentication mechanism by
          implementing the <code>rabbit_auth_mechanism</code>
          behaviour in a plugin. See
          the <a href="plugin-development.html">plugin development
          guide</a> for more information on general plugin
          development.
        </p>
        <p>
          A separate guide covers <a href="/access-control.html">authentication and authorisation backends in RabbitMQ</a>
          and how they are configured. There's also a guide on <a href="/passwords.html">passwords</a>.
        </p>
      </doc:section>

      <doc:section name="built-in">
        <doc:heading>Built-in Mechanisms</doc:heading>
        <p>
          The built-in mechanisms are:
        </p>
        <dl>
          <dt>
            <code>PLAIN</code>
          </dt>
          <dd>
            SASL PLAIN authentication. This is enabled by default in
            the RabbitMQ server and clients, and is the default for most
            other clients.
          </dd>
          <dt>
            <code>AMQPLAIN</code>
          </dt>
          <dd>
            Non-standard version of PLAIN retained for backwards compatibility.
            This is enabled by default in the RabbitMQ server.
          </dd>

          <dt>
            <code>EXTERNAL</code>
          </dt>
          <dd>
            Authentication happens using an out-of-band mechanism
            such as <a href="https://github.com/rabbitmq/rabbitmq-auth-mechanism-ssl">x509 certificate peer verification</a>,
            client IP address range, or similar.
            Such mechanisms are usually provided by RabbitMQ plugins.
          </dd>

          <dt>
            <code>RABBIT-CR-DEMO</code>
          </dt>
          <dd>
            Non-standard mechanism which demonstrates
            challenge-response authentication. This mechanism has
            security equivalent to <code>PLAIN</code>, and
            is <b>not</b> enabled by default in the RabbitMQ server.
          </dd>
        </dl>
      </doc:section>

      <doc:section name="server-config">
        <doc:heading>Server configuration</doc:heading>
        <p>
          The configuration variable <code>auth_mechanisms</code> in
          the <code>rabbit</code> application determines which of the
          installed mechanisms are offered to connecting clients. This
          variable should be a list of atoms corresponding to
          mechanism names, for example
          <code>['PLAIN', 'AMQPLAIN']</code> by default. The server-side list is not
          considered to be in any particular order. See the
          <a href="configure.html#configuration-file">configuration file</a>
          documentation.
        </p>
      </doc:section>

      <doc:section name="client-config">
          <doc:heading>Client configuration</doc:heading>
        <doc:subsection name="java-config">
          <doc:heading>Java</doc:heading>
          <p>
            The Java client does not use
            the <code>javax.security.sasl</code> package by default
            since this can be unpredictable on non-Oracle JDKs and is
            missing entirely on Android. There is a RabbitMQ-specific
            SASL implementation, configured by
            the <code>SaslConfig</code> interface. A
            class <code>DefaultSaslConfig</code> is provided to make
            SASL configuration more convenient in the common case. A
            class <code>JDKSaslConfig</code> is provided to act as a
            bridge to <code>javax.security.sasl</code>.
          </p>
          <p>
            See <code>ConnectionFactory.getSaslConfig()</code>
          and <code>ConnectionFactory.setSaslConfig(SaslConfig)</code>
          </p>
        </doc:subsection>

        <doc:subsection name="erlang-config">
          <doc:heading>Erlang</doc:heading>
          <p>
            The Erlang client provides its own SASL mechanism
            implementations in the <code>amqp_auth_mechanisms</code>
            module. The <code>#amqp_params{}</code> record can be
            provided with a list of authentication functions in
            preference order for network connections.
          </p>
        </doc:subsection>

        <doc:subsection name="dotnet-config">
          <doc:heading>.NET</doc:heading>
          <p>
            The .Net client provides its own SASL mechanism
            implementations based on the <code>AuthMechanism</code>
            and <code>AuthMechanismFactory</code>
            interfaces. The <code>ConnectionFactory.AuthMechanisms</code>
            property is a list of authentication mechanism factories in
            preference order.
          </p>
        </doc:subsection>
      </doc:section>

      <doc:section name="failures">
        <doc:heading>Authentication Failures</doc:heading>

        <p>
          Per AMQP 0-9-1 spec, authentication failures should result
          in the server closing TCP connection immediately. However,
          with RabbitMQ clients can opt in to receive a more specific
          notification using the <a
          href="/auth-notification.html">authentication failure
          notification</a> extension to AMQP 0-9-1.
        </p>
      </doc:section>
  </body>
</html>
