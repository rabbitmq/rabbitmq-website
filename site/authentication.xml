<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html PUBLIC "bug in xslt processor requires fake doctype"
"otherwise css isn't included" [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
]>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc">
  <head>
    <title>RabbitMQ - SASL Authentication</title>
  </head>
  <body>
    <doc:div>
      <doc:toc class="compact">
        <doc:heading>Table of Contents</doc:heading>
      </doc:toc>

      <doc:section name="intro">
        <doc:heading>Introduction</doc:heading>
        <p>
          RabbitMQ has pluggable support for various SASL
          authentication mechanisms. There are four such mechanisms
          built into the server: <code>PLAIN</code>, <code>AMQPLAIN</code>,
          <code>EXTERNAL</code> and <code>RABBIT-CR-DEMO</code>.

          You can also implement your own authentication mechanism by
          implementing the <code>rabbit_auth_mechanism</code>
          behaviour in a plugin. See
          the <a href="plugin-development.html">plugin development
          guide</a> for more information on general plugin
          development.
        </p>
      </doc:section>

      <doc:section name="built-in">
        <doc:heading>Built-in mechanisms</doc:heading>
        <p>
          The four built-in mechanisms are:
        </p>
        <dl>
          <dt>
            <code>PLAIN</code>
          </dt>
          <dd>
            SASL PLAIN authentication. This is enabled by default in
            the RabbitMQ server and clients, and is the default for most
            other clients.
          </dd>
          <dt>
            <code>AMQPLAIN</code>
          </dt>
          <dd>
            Non-standard version of PLAIN as defined by the AMQP 0-8
            specification. This is enabled by default in the RabbitMQ
            server, and is the default for QPid's Python client.
          </dd>
          <dt>
            <code>EXTERNAL</code>
          </dt>
          <dd>
            <p>
              Authenticates the user taking the Common Name of the
              client's SSL certificate as the username. The user's
              password is not checked. In order to use this mechanism
              the client must connect over SSL, and present a client
              certificate. For safety the server must be configured
              with the SSL options <code>fail_if_no_peer_cert</code>
              set to <code>true</code> and <code>verify</code> set
              to <code>verify_peer</code>, to force all SSL clients to
              have a verifiable client certificate.
            </p>
            <p>
              This mechanism is <b>not</b> enabled by default in the
              RabbitMQ server.
            </p>
          </dd>
          <dt>
            <code>RABBIT-CR-DEMO</code>
          </dt>
          <dd>
            Non-standard mechanism which demonstrates
            challenge-response authentication. This mechanism has
            security equivalent to <code>PLAIN</code>, and
            is <b>not</b> enabled by default in the RabbitMQ server.
          </dd>
        </dl>
      </doc:section>

      <doc:section name="server-config">
        <doc:heading>Server configuration</doc:heading>
        <p>
          The configuration variable <code>auth_mechanisms</code> in
          the <code>rabbit</code> application determines which of the
          installed mechanisms are offered to connecting clients. This
          variable should be a list of atoms corresponding to
          mechanism names, for example <code>['PLAIN',
          'AMQPLAIN']</code> by default. The server-side list is not
          considered to be in any particular order. See
          the <a href="install.html#configfile">configuration file</a>
          documentation.
        </p>
      </doc:section>

      <doc:section name="client-config">
          <doc:heading>Client configuration</doc:heading>
        <doc:subsection name="java-config">
          <doc:heading>Java</doc:heading>
          <p>
            The Java client uses the <code>javax.security.sasl</code>
            mechanism, with a RabbitMQ-specific <code>SaslConfig</code>
            interface to define SASL configuration in one place. A
            class <code>DefaultSaslConfig</code> is provided to make
            SASL configuration more convenient in the common case.
          </p>
          <p>
            See <code>ConnectionFactory.getSaslConfig()</code>
          and <code>ConnectionFactory.setSaslConfig(SaslConfig)</code>
          </p>
        </doc:subsection>

        <doc:subsection name="erlang-config">
          <doc:heading>Erlang</doc:heading>
          <p>
            The Erlang client provides its own SASL mechanism
            implementations in the <code>amqp_auth_mechanisms</code>
            module. The <code>#amqp_params{}</code> record can be
            provided with a list of authentication functions in
            preference order for network connections.
          </p>
        </doc:subsection>

        <doc:subsection name="dotnet-config">
          <doc:heading>.Net</doc:heading>
          <p>
            The .Net client provides its own SASL mechanism
            implementations based on the <code>AuthMechanism</code>
            and <code>AuthMechanismFactory</code>
            interfaces. The <code>ConnectionFactory.AuthMechanisms</code>
            property is a list of authentication mechanism factories in
            preference order.
          </p>
        </doc:subsection>
      </doc:section>
    </doc:div>
  </body>
</html>
