<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!--
Copyright (c) 2007-2019 Pivotal Software, Inc.

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License,
Version 2.0 (the "License”); you may not use this file except in compliance
with the License. You may obtain a copy of the License at

https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Memory and Disk Alarms</title>
  </head>
  <body>
    <doc:section name="overview">
      <doc:heading>Overview</doc:heading>

      <p>
        There are two circumstances under which RabbitMQ will stop
        reading from client network sockets, in order to prevent
        crashes. They are:
      </p>
      <ul>
        <li>
          When <a href="memory-use.html">memory use</a> goes above the
          configured limit.
        </li>
        <li>
          When disk space drops below the configured limit.
        </li>
      </ul>

      <p>
        In both circumstances the server will temporarily <em>block</em>
        connections - the server will pause reading from the sockets of
        connected clients which publish messages. Connection
        heartbeat monitoring will be disabled too. All network
        connections will show in <code>rabbitmqctl</code> and the
        management plugin as either <code>blocking</code>, meaning they
        have not attempted to publish and can thus continue or
        <code>blocked</code>, meaning they have published and are now
        paused. Compatible clients will be <a href="#client-notifications">notified</a>
        when they are blocked.
      </p>

      <p>
        Connections that only consume are not blocked by resource alarms; deliveries
        to them continue as usual.
      </p>
    </doc:section>

    <doc:section name="client-notifications">
      <doc:heading>Client Notifications</doc:heading>
      <p>
        Modern client libraries should support <a href="/connection-blocked.html">connection.blocked notification</a>
        (a protocol extension), so applications can monitor when they are blocked.
      </p>
    </doc:section>

    <doc:section name="effects-on-clusters">
      <doc:heading>Alarms in Clusters</doc:heading>

      <p>
        When running RabbitMQ in a cluster, the memory and disk alarms
        are cluster-wide; if one node goes over the limit then all nodes
        will block connections.
      </p>

      <p>
        The intent here is to stop producers but let consumers continue
        unaffected. However, since the protocol permits producers and consumers
        to operate on the same channel, and on different channels of a
        single connection, this logic is necessarily imperfect. In
        practice that does not pose any problems for most applications
        since the throttling is observable merely as a
        delay. Nevertheless, other design considerations permitting, it
        is advisable to only use individual connections for either
        producing or consuming.
      </p>
    </doc:section>

    <doc:section name="file-descriptors">
      <doc:heading>Running Out of File Descriptors</doc:heading>
      <p>
        When the server is close to using all the file descriptors
        that the OS has made available to it, it will refuse client
        connections. See <a href="/networking.html">Networking guide</a> to learn more.
      </p>
    </doc:section>

    <doc:section name="transient-flow-control">
      <doc:heading></doc:heading>
        <p>
          When clients attempt to publish faster than the server can
          accept their messages, they go into transient <a
          href="flow-control.html">flow control</a>.
        </p>
    </doc:section>

    <doc:section name="related">
      <doc:heading>Relevant Topics</doc:heading>

      <ul>
        <li>
          <a href="memory.html">How the memory limit works</a>
        </li>
        <li>
          <a href="disk-alarms.html">How the disk limit works</a>
        </li>

        <li>
          <a href="connection-blocked.html">How clients can determine if they are blocked</a>
        </li>
      </ul>
    </doc:section>
  </body>
</html>
