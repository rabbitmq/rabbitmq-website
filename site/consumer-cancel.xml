<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!--
Copyright (C) 2007-2015 Pivotal Software, Inc. 

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License, 
Version 2.0 (the "License”); you may not use this file except in compliance 
with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Consumer Cancel Notification</title>
  </head>
  <body>
    <p>
      When a channel is consuming from a queue, there are various
      reasons which could cause the consumption to stop. One of
      these is obviously if the client issues a
      <code>basic.cancel</code> on the same channel, which will
      cause the consumer to be cancelled and the server replies
      with a <code>basic.cancel-ok</code>. Other events, such as
      the queue being deleted, or in a clustered scenario, the
      node on which the queue is located failing, will cause the
      consumption to be cancelled, but the client channel will not
      be informed, which is frequently unhelpful.
    </p>

    <p>
      To solve this, we have introduced an extension in which the
      broker will send to the client a <code>basic.cancel</code>
      in the case of such unexpected consumer cancellations. This
      is not sent in the case of the broker receiving a
      <code>basic.cancel</code> from the client. AMQP 0-9-1
      clients don't by default expect to receive
      <code>basic.cancel</code> methods from the broker
      asynchronously, and so in order to enable this behaviour,
      the client must present a <code>capabilities</code> table in
      its <code>client-properties</code> in which there is a key
      <code>consumer_cancel_notify</code> and a boolean value
      <code>true</code>. See the
      <a href="#capabilities">capabilities</a> section for further
      details on this.
    </p>

    <p>
      Our supported clients present this capability by default to
      the broker and thus will be sent the asynchronous
      <code>basic.cancel</code> method by the broker, which they
      present to the consumer callback. For example, in our Java
      client, the <code>Consumer</code> interface has a
      <code>handleCancel</code> callback, which can be overridden
      by sub-classing the <code>QueueingConsumer</code> class:
      <pre class="sourcecode">
channel.queueDeclare(queue, false, true, false, null);
Consumer consumer = new QueueingConsumer(channel) {
    @Override
    public void handleCancel(String consumerTag) throws IOException {
        // consumer has been cancelled unexpectedly
    }
};
channel.basicConsume(queue, consumer);</pre>
      It is not an error for the client to issue a
      <code>basic.cancel</code> for a consumer which has been
      unexpectedly cancelled (e.g. due to queue deletion). By
      definition, there is a race possible between a client
      issuing a <code>basic.cancel</code>, and the broker sending
      out the asynchronous notification. In such cases, the broker
      does not error when it receives the
      <code>basic.cancel</code> and replies with a
      <code>basic.cancel-ok</code> as normal.
    </p>

    <h3>Consumer Cancellation and HA failover</h3>
    <p>
      Clients supporting consumer cancel notification will always be
      informed when a queue is deleted or becomes
      unavailable. Consumers <em>may</em> request that they should be cancelled
      when a mirrored queue fails over (see the page on <a
      href="ha.html">mirrored queues</a> for why and how this can be
      done).
    </p>

      <doc:section name="capabilities">
        <doc:heading>Client and Server Capabilities</doc:heading>

        <p>
          The AMQP 0-8 specification defined a
          <code>capabilities</code> field as part of the
          <code>connection.open</code> method. This field was
          deprecated in the AMQP 0-9-1 specification and is not
          inspected by the RabbitMQ broker. As specified in AMQP 0-8,
          it also suffered from being a <code>shortstr</code>: a
          string of no more than 256 characters.
        </p>

        <p>
          There is good reason for both the client and the server
          being able to present extensions and capabilities that they
          support, thus we have introduced an alternative form of
          capabilities. In the <code>server-properties</code> field of
          <code>connection.start</code>, and in the
          <code>client-properties</code> field of
          <code>connection.start-ok</code>, the field value (a
          <code>peer-properties</code> table) can optionally contain a
          key named <code>capabilities</code> for which the value is
          another table, in which the keys name the capabilities
          supported. The values for these capability keys are
          typically booleans, indicating whether or not the capability
          is supported, but may vary based on the nature of the
          capability.
        </p>

        <p>
          For example, the <code>server-properties</code> presented by
          the RabbitMQ broker to a client may look like:

          <pre class="sourcecode">
{ "product"      = (longstr) "RabbitMQ",
  "platform"     = (longstr) "Erlang/OTP",
  "information"  = (longstr) "Licensed under the MPL.  See http://www.rabbitmq.com/",
  "copyright"    = (longstr) "Copyright (C) 2007-2011 VMware, Inc.",
  "capabilities" = (table)   { "exchange_exchange_bindings" = (bool) true,
                               "consumer_cancel_notify"     = (bool) true,
                               "basic.nack"                 = (bool) true,
                               "publisher_confirms"         = (bool) true },
  "version"      = (longstr) "2.4.0" }</pre>
        </p>

        <p>
          Note that it is optional for clients to present this
          <code>capabilities</code> table as part of the
          <code>client-properties</code> table: failure to present
          such a table does not preclude the client from being able to
          use extensions such as <a href="e2e.html">exchange to
          exchange bindings</a>. However, in some cases such as
          consumer cancellation notification, the client must present
          the associated capability otherwise the broker will have no
          way of knowing that the client is capable of receiving the
          additional notifications.
        </p>
      </doc:section>
  </body>
</html>
