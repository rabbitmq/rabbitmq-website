<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
]>
<!--
Copyright (c) 2007-2019 Pivotal Software, Inc.

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License,
Version 2.0 (the "License”); you may not use this file except in compliance
with the License. You may obtain a copy of the License at

https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Shovel Plugin</title>
  </head>
  <body show-in-this-page="true">
    <p>
      Sometimes it is necessary to reliably and
      continually move messages from a source (e.g. a <em>queue</em>) in one
      broker to a destination in another broker (e.g. an <em>exchange</em>).
      The <em>Shovel plugin</em> allows you to
      configure a number of <em>shovel</em>s, which do just that and
      start automatically when the broker starts.
    </p>
    <p>
      The source and destination can be on the same
      broker (typically in different vhosts) or distinct brokers. Since 3.7
      they can even use different protocols (AMQP 0.9.1 or AMQP 1.0).
    </p>
    <p>
      A shovel behaves like a well-written client application, which
      connects to its source and destination, reads and writes messages,
      and copes with connection failures. In fact, Shovels use the
      <a href="https://www.rabbitmq.com/erlang-client-user-guide.html">Erlang AMQP 0-9-1</a>
      and <a href="https://github.com/rabbitmq/rabbitmq-amqp1.0-client">Erlang AMQP 1.0</a>
      clients under the hood.
    </p>

    <p>
      The primary advantages of a shovel are:
    </p>
    <dl class="plain">
      <dt><strong>Loose coupling</strong></dt>
      <dd>
        A shovel can move messages between brokers (or clusters) in
        different administrative domains:
        <ul class="plain">
          <li>
            they may have different users and virtual hosts;
          </li>
          <li>
            they may run on different versions of RabbitMQ and Erlang.
          </li>
          <li>
            they may be different broker products.
          </li>
        </ul>
      </dd>
      <dt><strong>WAN-friendly</strong></dt>
      <dd>
        The Shovel plugin uses client connections to communicate between brokers, and
        is designed to tolerate intermittent connectivity without
        message loss.
      </dd>
      <dt><strong>Highly tailorable</strong></dt>
      <dd>
        When a shovel connects (either to the source or the
        destination) it can be configured to perform any number of
        explicit methods. For example, the source queue need not exist
        initially, and can be <em>declared</em> on connect (AMQP 0.9.1 only).
      </dd>
      <dt><strong>Supports multiple protocols</strong></dt>
      <dd>
        Starting with RabbitMQ 3.7.0 the shovel has support for multiple
        protocols. Currently implemented are AMQP 0.9.1 and AMQP 1.0.
        This means it is possible to shovel, e.g. from and AMQP 1.0
        broker source to a RabbitMQ destination and vice versa.
        Further protocols may be implemented in the future.
      </dd>
    </dl>

    <p>
      A comparison between <em>clustering</em>, <em>federated
      exchanges</em> and <em>shovels</em> is given on the
      <a href="distributed.html">Distributed Messaging</a> page.
    </p>

    <doc:section name="what-it-do">
      <doc:heading>What does it do?</doc:heading>
      <p>
        The Shovel plugin defines (and runs) an Erlang client
        application for each shovel.
      </p>
      <p>
        In essence, a shovel is a simple pump. Each shovel:
        <ul class="plain">
          <li>
            <strong><em>connects</em></strong> to the source broker and
            the destination broker,
          </li>
          <li>
            <strong><em>consumes</em></strong> messages from the queue,
          </li>
          <li>
            <strong><em>re-publishes</em></strong> each message to the
            destination broker (using, by default, the original exchange
            name and routing_key when applicable).
          </li>
        </ul>
      </p>
      <p>
        The shovel configuration allows each of these processes to be
        tailored.
      </p>
      <dl class="plain">
        <dt><strong><em>connects</em></strong></dt>
        <dd>
          <p>
            After connection to a source or a destination broker a
            series of configured <em>declarations</em> can be
            issued. For example, on an AMQP 0-9-1 endpoint, queues,
            exchanges and bindings can be declared.
          </p>
        </dd>
        <dd>
          <p>
            A shovel will attempt to reconnect to a broker if a failure
            occurs and multiple brokers can be specified for the source and
            destination so that another broker may be selected (at
            random) to reconnect to. A reconnection delay can be
            specified to avoid flooding the network with reconnection
            attempts, or to prevent reconnection on failure altogether.
          </p>
          <p>
            All configured <em>declarations</em> (for that source or
            destination) are re-issued upon re-connect.
          </p>
        </dd>
        <dt><strong><em>consumes</em></strong></dt>
        <dd>
          <p>
            The Shovel's consumer can <a href="/confirms.html">acknowledge</a> messages
            automatically on receipt, after (re-)publication, or after
            <a href="/confirms.html">confirmation of its publication</a> from the destination server.
          </p>
        </dd>
        <dt><strong><em>re-publishes</em></strong></dt>
        <dd>
          <p>
            Both the publish method and the message properties can be
            modified with explicit parameter values.
          </p>
        </dd>
      </dl>
    </doc:section>

    <doc:section name="getting-started">
      <doc:heading>Getting started</doc:heading>
      <p>
        The <em>Shovel plugin</em> is included in the RabbitMQ
        distribution. To enable it, use
        <a href="man/rabbitmq-plugins.8.html">rabbitmq-plugins</a>:
      </p>
<pre class="lang-bash">
rabbitmq-plugins enable rabbitmq_shovel
</pre>
      <p>
        You may also wish to enable the
        <code>rabbitmq_shovel_management</code> plugin (see
        <a href="#management-status">below</a>).
      </p>

      <p>
        There is no requirement to run the shovel on the same broker
        (or cluster) as its source or destination; the shovel can be
        entirely separate.
      </p>

      <p>
        There are two distinct ways to define
        shovels: <a href="shovel-static.html">static shovels</a> and
        <a href="shovel-dynamic.html">dynamic shovels</a>. The
        differences are as follows:
      </p>

    <table>
      <tr>
        <th><a href="shovel-static.html">Static Shovels</a></th>
        <th><a href="shovel-dynamic.html">Dynamic Shovels</a></th>
      </tr>
      <tr>
        <td>
          Defined in the broker <a href="configure.html">configuration file</a>.
        </td>
        <td>
          Defined using the broker's <a href="parameters.html">runtime parameters</a>.
        </td>
      </tr>
      <tr>
        <td>
          Require a restart of the hosting broker to change.
        </td>
        <td>
          Can be created and deleted at any time.
        </td>
      </tr>
      <tr>
        <td>
          Slightly more general: any queues, exchanges or bindings can
          be declared manually at startup.
        </td>
        <td>
          Slightly more opinionated: the queues, exchanges and
          bindings used by the shovel will be declared automatically.
        </td>
      </tr>
    </table>

    <p>
      Note that when using AMQP 1.0 the "nodes" may still need to be created
      outside of the shovel as the protocol does not include topology
      creation.
    </p>

    <doc:subsection name="configuration-format-differences">
      <doc:heading>Configuration Format Differences</doc:heading>
      <p>
        Versions prior to 3.7.0 use a slightly different configuration format.
        See: <a href="shovel-static-legacy.html">static shovels (legacy)</a> and
        <a href="shovel-dynamic-legacy.html">dynamic shovels (legacy)</a> for
        details. Static shovel created by the old format will still work
        in 3.7.0+ but it is recommended to upgrade at earliest convenience.
      </p>
    </doc:subsection>
    </doc:section>


    <doc:section name="authn-authz-for-shovels">
      <doc:heading>Authentication and Authorization for Shovels</doc:heading>

      <p>
        The plugin uses <a href="https://www.rabbitmq.com/erlang-client-user-guide.html">Erlang AMQP 0-9-1</a>
        and <a href="https://github.com/rabbitmq/rabbitmq-amqp1.0-client">Erlang AMQP 1.0</a>
        clients under the hood to open connections to its source and/or destination. Just like any other
        client library connection, a Shovel connection must <a href="/access-control.html">successfully authenticate</a>
        with RabbitMQ server and be <a href="/access-control.html">authorized to access</a>
        the vhost it is trying to connect to.
      </p>
      <p>
        Authentication and authorization failures of Shovel connections will be
        visible in the logs of the node that opens them.
      </p>
    </doc:section>


    <doc:section name="clustering">
      <doc:heading>Shovels Between Clusters</doc:heading>
      <p>
        It's normally desirable to ensure that shovels are resilient
        to failure of any node in the source or destination clusters,
        or the cluster hosting the shovel.
      </p>

      <p>
        You can ensure that shovels can fail over to different nodes
        in the source or destination clusters by specifying multiple
        source and/or destination URIs for each shovel.
      </p>

      <p>
        Dynamic shovels are automatically defined on all nodes of the
        hosting cluster on which the shovel plugin is enabled. Each
        shovel will only start on one node (arbitrarily), but will
        fail over to another node if that one goes down.
      </p>

      <p>
        Static shovels should be defined in the configuration file for
        all nodes of the hosting cluster on which the shovel plugin is
        enabled. Again each shovel will only start on one node and
        fail over when needed.
      </p>
    </doc:section>


    <doc:section name="tls-connections">
      <doc:heading>Securing Shovel Connections with TLS</doc:heading>
      <p>
        Shovel connections can be secured with TLS. Because Shovel uses
        client libraries under the hood, it is necessary to both configure
        the source broker to <a href="/ssl.html">listen for TLS connections</a>
        and the Shovel/Erlang client to use TLS.
      </p>
      <p>
        To configure Shovel to use TLS, one needs to

        <ul>
          <li>Specify CA certificate and client certificate/key pair via
          <a href="/uri-query-parameters.html">URI query parameters</a></li>
          <li><a href="/ssl.html">Configure Erlang client to use TLS</a></li>
        </ul>
      </p>

      <p>
        Just like with "regular" client connections, server's CA should be
        trusted on the node where Shovel runs, and vice versa.
      </p>
    </doc:section>


    <doc:section name="status">
      <doc:heading>Monitoring shovels</doc:heading>
      <p>
        There are two ways of discovering the status of shovels.
      </p>
      <doc:subsection name="management-status">
        <doc:heading>Use shovel management</doc:heading>
        <p>
          Shovel status can be reported on the
          <a href="management.html">Management plugin</a> user interface
          by enabling the <code>rabbitmq_shovel_management</code> plugin
          wherever you have the management plugin enabled.
        </p>
        <p>
          Information about configured shovels will automatically appear
          in the management API and UI.
        </p>
      </doc:subsection>

      <doc:subsection name="direct-status">
        <doc:heading>CLI tools</doc:heading>
        <p>
          Shovel status can be obtained by direct query of the Shovel
          plugin app. Issue the following <code>rabbitmqctl</code>
          command:
        </p>
<pre class="lang-bash">
rabbitmqctl eval 'rabbit_shovel_status:status().'
</pre>
        <p>
          This calls the <code>status</code> method in a module of the
          <code>rabbitmq_shovel</code> plugin, which will return an
          Erlang list, with one element for each configured shovel.
        </p>
        <p>
          Each element of the list is a map with several fields fields:
          <code>
            {<em><strong>Name</strong></em>,
             <em><strong>Type</strong></em>,
             <em><strong>Status</strong></em>,
             <em><strong>Timestamp</strong></em>}
          </code>
        </p>
        <sl>
          <li>
            <code><strong><em>Name</em></strong></code>
            is the shovel name,
          </li>
          <li>
            <code><strong><em>Type</em></strong></code>
            is either <code>static</code> or <code>dynamic</code>,
          </li>
          <li>
            <code><strong><em>Status</em></strong></code>
            is the current shovel state,
          </li>
          <li>
            and <code><strong><em>Timestamp</em></strong></code> is the
            time when the shovel <em>entered</em> this state.
          </li>
        </sl>
        <p>
          <code><strong><em>Timestamp</em></strong></code> is a local
          calendar time of the form
          <code>{{YYYY, MM, DD}, {HH, MM, SS}}</code>.
        </p>
        <p>
          <code><strong><em>Status</em></strong></code> takes one of
          three forms:
        </p>
        <ul>
          <li>
            The shovel is starting up, connecting and creating
            resources:
<pre class="lang-erlang">
'starting'
</pre>
          </li>
          <li>
            The shovel is running normally:
<pre class="lang-erlang">
{ 'running', [{'src_protocol', <em>Protocol</em>},
              {'src_uri', <em>Source</em>},
              {'dest_protocol', <em>Protocol</em>},
              {'dest_uri', <em>Destination</em>}]}:
</pre>
            <p>
              where <code><em>Source</em></code> and
              <code><em>Destination</em></code> terms give the
              respective connection parameters and <code><em>Protocol</em></code>
              is either <code>amqp091</code> or <code>amqp10</code>
            </p>
          </li>
          <li>
            The shovel has terminated:
<pre class="lang-erlang">
{'terminated', <em>Reason</em>}
</pre>
              <p>
                where <code><em>Reason</em></code> is an Erlang term that
                indicates the reason for the termination.
              </p>
            </li>
          </ul>
      </doc:subsection>

    </doc:section>
  </body>
</html>
