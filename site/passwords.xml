<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!--
Copyright (c) 2007-2016 Pivotal Software, Inc.

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License,
Version 2.0 (the "License”); you may not use this file except in compliance
with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Password Hashing Algorithms</title>
  </head>
  <body>
    <doc:section name="overview">
      <doc:heading>Overview</doc:heading>
      <p>
        This guide covers password hashing algorithms used by the internal authentication
        backend. If a different authentication backend (or mechanism) is used, the material
        in this guide is not applicable.
      </p>
      <p>
        As of version 3.6.0, RabbitMQ can be configured to use several password hashing functions:

        <ul>
          <li>SHA-256</li>
          <li>SHA-512</li>
          <li>MD5 (only for backwards compatibility)</li>
        </ul>

        SHA-256 is used by default. More algorithms can be provided by plugins.
      </p>
    </doc:section>

    <doc:section name="changing-algorithm">
      <doc:heading>Configuring Algorithm to Use</doc:heading>
      <p>
        It is possible to change what algorithm is used via <a href="/configure.html#config-file">RabbitMQ configuration file</a>,
        for example, to use SHA-512:
<pre class="sourcecode">
password_hashing_module = rabbit_password_hashing_sha512
</pre>

Or, using the <a href="/configure.html#erlang-term-config-file">classic config format</a>:

<pre class="sourcecode">
[
  {rabbit, [{password_hashing_module, rabbit_password_hashing_sha512}]}
].
</pre>

        Out of the box, the following hashing modules are provided:
        <ul>
          <li><code>rabbit_password_hashing_sha256</code> (default)</li>
          <li><code>rabbit_password_hashing_sha512</code></li>
          <li><code>rabbit_password_hashing_md5</code> (for backwards compatibility)</li>
        </ul>
      </p>
      <p>
        Updated hashing algorithm will be applied to newly created users
        or when password is changed using <a href="/man/rabbitmqctl.1.man.html">rabbitmqctl</a>.
      </p>
    </doc:section>

<doc:section name="upgrading-to-3-6-x">
      <doc:heading>Upgrading from pre-3.6.0 to 3.6.1 or Later Versions</doc:heading>
      <p>
        When upgrading from a pre-3.6 version to RabbitMQ 3.6.1 or later,
        all existing users are marked as using the legacy password hashing function,
        therefore they will be able to authenticate. No upgrade steps are required.
      </p>
      <p>
        When importing definitions exported from versions earlier than
        3.6.0 into a 3.6.1 or later release, existing user records will use
        MD5 for password hashing. In order to migrate them to a more secure algorithm,
        use <a href="/man/rabbitmqctl.1.man.html">rabbitmqctl</a> to update their passwords.
      </p>      
    </doc:section>

    <doc:section name="upgrading-to-3-6-0">
      <doc:heading>Upgrading from pre-3.6.0 to 3.6.0</doc:heading>
      <p>
        When upgrading from a pre-3.6 version to RabbitMQ 3.6.0 (but not later versions),
        all existing users are marked as using the legacy password hashing function,
        therefore they will be able to authenticate. No upgrade steps are required.
      </p>
      <p>
        If you'd like to avoid using MD5 for existing users, you need to update passwords
        for all users using <a href="/man/rabbitmqctl.1.man.html">rabbitmqctl</a> after upgrading.
      </p>
      <p>
        When importing definitions exported from versions earlier than
        3.6.0, it is possible to go back to MD5 (as a temporary
        measure) by setting this to <code>rabbit_password_hashing_md5</code>:

        <ul>
          <li>Set rabbit.password_hashing_module to <code>rabbit_password_hashing_md5</code> in the config. This means
          all imported (or newly created any other way) user records will have MD5 applied for hashing, with a relevant
          hint stored for later authentication.</li>
          <li>Perform definitions import</li>
          <li>Stop the (new) node</li>
          <li>Set <code>rabbit.password_hashing_module</code> to <code>rabbit_password_hashing_sha256</code> in the config</li>
        </ul>
      </p>
      <p>
        The above steps are only necessary for those who perform an export on a
        pre-3.6.0 node and then an import to 3.6.0. Those who upgrade
        "in place" or move definitions from a 3.6.0+ node to another
        3.6.0+ node do not need to do anything.
      </p>
      <p>
        The most secure thing to do is to update passwords for all existing users, if possible,
        to avoid relying on MD5 for anything.
      </p>
    </doc:section>
  </body>
</html>
