<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!--
Copyright (c) 2007-2016 Pivotal Software, Inc.

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License,
Version 2.0 (the "License”); you may not use this file except in compliance
with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Credentials and Passwords</title>
  </head>
  <body>
    <doc:section name="overview">
      <doc:heading>Overview</doc:heading>
      <p>
        This guide covers a variety of topics related to credentials
        and passwords used by the internal authentication backend. If
        a different authentication backend (or mechanism) is used, the
        material in this guide is not applicable.
      </p>
      <p>
        RabbitMQ supports multiple <a href="/authentication.html">authentication mechanisms</a>. Some of them use
        username/password pairs. These credential pairs are then handed over to an <a href="/access-control.html">authentication backends</a>
        that perform authentication. One of the backends, known as internal or built-in, uses internal RabbitMQ data store
        to store user credentials. When a new user is added using <code>rabbitmqctl</code>, her password is combined with a salt value
        and hashed.
      </p>
      <p>
        As of version 3.6.0, RabbitMQ can be configured to use several password hashing functions:

        <ul>
          <li>SHA-256</li>
          <li>SHA-512</li>
          <li>MD5 (only for backwards compatibility)</li>
        </ul>

        SHA-256 is used by default. More algorithms can be provided by plugins.
      </p>
    </doc:section>

    <doc:section name="changing-algorithm">
      <doc:heading>Configuring Algorithm to Use</doc:heading>
      <p>
        It is possible to change what algorithm is used via <a href="/configure.html#config-file">RabbitMQ configuration file</a>,
        for example, to use SHA-512:
<pre class="sourcecode">
password_hashing_module = rabbit_password_hashing_sha512
</pre>

Or, using the <a href="/configure.html#erlang-term-config-file">classic config format</a>:

<pre class="sourcecode">
[
  {rabbit, [{password_hashing_module, rabbit_password_hashing_sha512}]}
].
</pre>

        Out of the box, the following hashing modules are provided:
        <ul>
          <li><code>rabbit_password_hashing_sha256</code> (default)</li>
          <li><code>rabbit_password_hashing_sha512</code></li>
          <li><code>rabbit_password_hashing_md5</code> (for backwards compatibility)</li>
        </ul>
      </p>
      <p>
        Updated hashing algorithm will be applied to newly created users
        or when password is changed using <a href="/man/rabbitmqctl.1.man.html">rabbitmqctl</a>.
      </p>
    </doc:section>

<doc:section name="upgrading-to-3-6-x">
      <doc:heading>Upgrading from pre-3.6.0 to 3.6.1 or Later Versions</doc:heading>
      <p>
        When upgrading from a pre-3.6 version to RabbitMQ 3.6.1 or later,
        all existing users are marked as using the legacy password hashing function,
        therefore they will be able to authenticate. No upgrade steps are required.
      </p>
      <p>
        When importing definitions exported from versions earlier than
        3.6.0 into a 3.6.1 or later release, existing user records will use
        MD5 for password hashing. In order to migrate them to a more secure algorithm,
        use <a href="/man/rabbitmqctl.1.man.html">rabbitmqctl</a> to update their passwords.
      </p>
    </doc:section>

    <doc:section name="upgrading-to-3-6-0">
      <doc:heading>Upgrading from pre-3.6.0 to 3.6.0</doc:heading>
      <p>
        When upgrading from a pre-3.6 version to RabbitMQ 3.6.0 (but not later versions),
        all existing users are marked as using the legacy password hashing function,
        therefore they will be able to authenticate. No upgrade steps are required.
      </p>
      <p>
        If you'd like to avoid using MD5 for existing users, you need to update passwords
        for all users using <a href="/man/rabbitmqctl.1.man.html">rabbitmqctl</a> after upgrading.
      </p>
      <p>
        When importing definitions exported from versions earlier than
        3.6.0, it is possible to go back to MD5 (as a temporary
        measure) by setting this to <code>rabbit_password_hashing_md5</code>:

        <ul>
          <li>Set rabbit.password_hashing_module to <code>rabbit_password_hashing_md5</code> in the config. This means
          all imported (or newly created any other way) user records will have MD5 applied for hashing, with a relevant
          hint stored for later authentication.</li>
          <li>Perform definitions import</li>
          <li>Stop the (new) node</li>
          <li>Set <code>rabbit.password_hashing_module</code> to <code>rabbit_password_hashing_sha256</code> in the config</li>
        </ul>
      </p>
      <p>
        The above steps are only necessary for those who perform an export on a
        pre-3.6.0 node and then an import to 3.6.0. Those who upgrade
        "in place" or move definitions from a 3.6.0+ node to another
        3.6.0+ node do not need to do anything.
      </p>
      <p>
        The most secure thing to do is to update passwords for all existing users, if possible,
        to avoid relying on MD5 for anything.
      </p>
    </doc:section>

    <doc:section name="credential-validation">
      <doc:heading>Credential Validation</doc:heading>
      <p>
        Starting with version <code>3.6.7</code> it is possible to define
        a <code>credential validator</code>. It only has effect on the internal
        authentication backend and kicks in when a new user is added or password
        of an existing user is changed.
      </p>
      <p>
        Validators are modules that implement a validation
        function. To use a validator, it is necessary to specify it
        and its additional settings in the <a
        href="/configure.html">config file</a>. There are three
        credential validators available out of the box:

        <ul>
          <li><code>rabbit_credential_validator_accept_everything</code>: unconditionally accepts all values. This validator is used by default for backwards compatibility.</li>
          <li><code>rabbit_credential_validator_min_password_length</code>: validates password length</li>
          <li><code>rabbit_credential_validator_password_regexp</code>: validates that password matches a regular expression</li>
        </ul>
      </p>
      <p>
        The following example demonstrates how <code>rabbit_credential_validator_min_password_length</code> is used:

        <pre class="example">
credential_validator.validation_backend = rabbit_credential_validator_min_password_length
credential_validator.min_length = 30
        </pre>

        In the <a href="/configure.html">classic config format</a> that would be

        <pre class="example">
[
 {rabbit, [
           {credential_validator, [{validation_backend,
                                    rabbit_credential_validator_min_password_length},
                                   {min_length, 30}]}
          ]}
].
        </pre>
      </p>
      <p>
        The following example demonstrates how <code>rabbit_credential_validator_password_regexp</code> is used:
        <pre class="example">
credential_validator.validation_backend = rabbit_credential_validator_password_regexp
credential_validator.regexp = ^[a-bA-Z0-9$]{20,100}
        </pre>

        which becomes

        <pre class="example">
[
 {rabbit, [
           {credential_validator, [{validation_backend,
                                    rabbit_credential_validator_password_regexp},
                                   {regexp, &lt;&lt;"^[a-bA-Z0-9$]{20,100}"&gt;&gt;}]}
          ]}
].
        </pre>

        in the <a href="/configure.html">classic config format</a>.
      </p>

      <doc:subsection name="credential-validation">
        <doc:heading>Custom Credential Validators</doc:heading>
        <p>
          Every credential validator is a module that implements a single function
          behaviour, <a href="https://github.com/rabbitmq/rabbitmq-server/blob/master/src/rabbit_credential_validator.erl">rabbit_credential_validator</a>.
          Plugins therefore can provide more implementations.
        </p>
        <p>
          Credential validators can also validate usernames or apply any other logic
          (e.g. make sure that provided username and password are not identical).
        </p>
      </doc:subsection>
    </doc:section>
  </body>
</html>
