<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
]>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:r="http://www.rabbitmq.com/namespaces/ad-hoc/conformance"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>RabbitMQ - Plugins</title>
  </head>
  <body>
    <r:plugin-ver name="mochiweb" ver="1.3-rmq&version-server;-git9a53dbd"/>
    <r:plugin-ver name="webmachine" ver="1.7.0-rmq&version-server;-hg0c4b60a"/>
    <r:plugin-ver name="eldap" ver="&version-server;-gite309de4"/>
    <r:plugin-ver name="rfc4627_jsonrpc" ver="&version-server;-git30c8498"/>

    <doc:div>
      <doc:toc class="compact">
        <doc:heading>Table of Contents</doc:heading>
      </doc:toc>

      <doc:section name="overview">
        <doc:heading>Overview</doc:heading>
        <p>
          RabbitMQ supports a variety of plugins. This page contains links
          to some of our plugins, packaged as .ez files. The links on this
          page reference plugins built for the latest version of the
          server, &version-server;. To find plugins for earlier versions
          of the server, consult <a href="/releases/plugins/">the
            archive</a>. Note that we did not make binary plugins available
          prior to release 2.0.0.
        </p>

        <p>
          The simplest way to <a href="#installing-plugins">install plugins</a> is to download all the
          required .ez files from this page, drop them in your <a href="#plugins-directory">plugins
          directory</a> and restart RabbitMQ.
        </p>
      </doc:section>

      <doc:section name="index">
        <doc:heading>Plugin Index</doc:heading>
        <r:plugin-index />
      </doc:section>

      <doc:section>
        <r:plugin-group id="maintained" name="Maintained">
          <r:plugin name="rabbitmq_auth_backend_ldap">
            Authentication / authorisation plugin using an external LDAP
            server. See the <r:readme-link repo="rabbitmq-auth-backend-ldap"/>
            for more information.
            <r:plugin-dependency name="eldap"/>
          </r:plugin>

          <r:plugin name="rabbitmq_auth_mechanism_ssl">
            Authentication mechanism plugin using SASL EXTERNAL to authenticate
            using SSL client certificates. See the
            <r:readme-link repo="rabbitmq-auth-mechanism-ssl"/> for more
            information.
          </r:plugin>

          <r:plugin name="rabbitmq_management">
            A management / monitoring API over HTTP, along with a
            browser-based UI. For more information,
            see <a href="management.html">the page on the management
            plugin</a>.
            <r:plugin-dependency name="mochiweb"/>
            <r:plugin-dependency name="webmachine"/>
            <r:plugin-dependency name="rabbitmq_mochiweb"/>
            <r:plugin-dependency name="amqp_client"/>
            <r:plugin-dependency name="rabbitmq_management_agent"/>
          </r:plugin>

          <r:plugin name="rabbitmq_management_agent">
            When installing the management plugin on <b>some</b>
            of the nodes in a cluster, you must install
            <r:plugin-link name="rabbitmq_management_agent"/>
            on <b>all</b> of the nodes in the cluster. You can install the
            full management plugin on as many of the nodes as you
            want.
          </r:plugin>

          <r:plugin name="rabbitmq_shovel">
            A plug-in for RabbitMQ that shovels messages from a queue on one
            broker to an exchange on another broker. Please see the
            <r:readme-link repo="rabbitmq-shovel"/> for more information or
            take a look
            at <a href="https://github.com/rabbitinaction/sourcecode/blob/master/configs/rabbitmq/rabbitmq.config.shovel">a
              working Shovel configuration</a>.
            <r:plugin-dependency name="amqp_client"/>
            <r:plugin-dependency name="erlando"/>
            <r:plugin-dependency name="rabbitmq_shovel_management" optional="true">
              Shows shovel status in the management API and UI. Only
              of use when using rabbitmq_shovel in conjunction with
              rabbitmq_management. In a heterogenous cluster this
              should be installed on the same nodes as rabbitmq_management.
            </r:plugin-dependency>
          </r:plugin>

          <r:plugin name="rabbitmq_stomp">
            <p>
              A gateway for exposing AMQP functionality via
              the <a href="http://stomp.codehaus.org/Protocol">STOMP
                protocol</a>, as implemented by
              many <a href="http://stomp.codehaus.org/Clients">clients</a>
              for various programming languages, and a few
              other <a href="http://stomp.codehaus.org/Brokers">servers</a>
              besides RabbitMQ.
            </p>
            <p>
              Please see the <a href="stomp.html">documentation</a> and
              our various
              <a href="http://www.lshift.net/blog/index.php?s=stomp">blog
                articles</a> about the adapter for more information on
              compiling and configuring it.
            </p>
            <r:plugin-dependency name="amqp_client"/>
          </r:plugin>
        </r:plugin-group>

        <r:plugin-group id="experimental" name="Experimental">
          <p>
            Currently, all plugins below are <em>experimental</em>. This
            means we make no claims about their fitness for purpose or
            stability, though they are in general under active
            development. In particular, the version numbers of the packages
            do not guarantee compatibility with versions of the RabbitMQ
            server<sup><a href="#compatibility">[1]</a></sup>.
          </p>

          <r:plugin name="rabbitmq_federation">
            Scalable publish / subscribe messaging across WANs and
            administrative domains. See the
            <r:readme-link repo="rabbitmq-federation"/> for more
            information.
            <r:plugin-dependency name="amqp_client"/>
          </r:plugin>

          <r:plugin name="rabbitmq_jsonrpc_channel">
            An AMQP-over-HTTP protocol binding for RabbitMQ and some
            Javascript libraries for interacting with RabbitMQ over HTTP.
            <r:plugin-dependency name="mochiweb"/>
            <r:plugin-dependency name="webmachine"/>
            <r:plugin-dependency name="rfc4627_jsonrpc"/>
            <r:plugin-dependency name="amqp_client"/>
            <r:plugin-dependency name="rabbitmq_mochiweb"/>
            <r:plugin-dependency name="rabbitmq_jsonrpc"/>
            <r:plugin-dependency name="rabbitmq_jsonrpc_channel_examples" optional="true">
              Adds some example web applications: a shared whiteboard, a
              chat application, and some tests.
            </r:plugin-dependency>
          </r:plugin>
        </r:plugin-group>
      </doc:section>

      <doc:section name="installing-plugins">
      <doc:heading>Installing Plugins</doc:heading>
        <doc:subsection name="compatibility">
        <doc:heading>Compatibility</doc:heading>
        <p>
          We compile the plugins when we make a release of the server,
          so in general, each plugin has been compiled against the
          latest release of the server code (and the plugin's
          dependencies). We may also from time to time post "known
          good" binaries; these will be marked with a particular
          server version with which they are known to work.
        </p>
        </doc:subsection>

        <doc:subsection name="plugins-directory">
        <doc:heading>Plugins Directory</doc:heading>
        <p>        
          The plugins directory location is determined by the
          <b>RABBITMQ_PLUGINS_DIR</b> environment variable whose default
          value depends on how you installed RabbitMQ. Some common values
          are:

          <table>
            <tr><th>Installation method</th><th>Plugins directory</th></tr>
            <tr>
              <th>Deb / RPM packages</th>
              <td>
                <code>/usr/lib/rabbitmq/lib/rabbitmq_server-<i>version</i>/plugins</code>
              </td>
            </tr>
            <tr>
              <th>Windows</th>
              <td>
                Typically <code>C:\Program
                  Files\RabbitMQ\rabbitmq_server-<i>version</i>\plugins</code>
                (depending on where it was installed)
              </td>
            </tr>
            <tr>
              <th>Macports</th>
              <td>
                <code>/opt/local/lib/rabbitmq/lib/rabbitmq_server-<i>version</i>/plugins</code>
              </td>
            </tr>
            <tr>
              <th>Homebrew</th>
              <td>
              <code>/usr/local/Cellar/rabbitmq/<i>version</i>/lib/rabbitmq/erlang/lib/rabbitmq-<i>version</i>/plugins</code>
              </td>
            </tr>
            <tr>
              <th>Generic Unix</th>
              <td>
                <code>rabbitmq_server-<i>version</i>/plugins</code>
                (depending on where it was installed)
              </td>
            </tr>
          </table>
        </p>
        <p>
          Since the default location of the plugins directory is
          version-specific, installing / upgrading to a new version of
          the server disables all plugins. That is the safest option
          since often plugins depend on specific versions of the
          server. Alternatively, plugins can be retained across
          upgrades by setting <b>RABBITMQ_PLUGINS_DIR</b> to a
          location shared by all installed rabbitmq server versions.
        </p>        
       </doc:subsection>
        <doc:subsection name="install-plugins">
          <doc:heading>Install Plugins</doc:heading>
          <ul>
            <li>
              Plugins will generally be available in two forms. The expected form for a packaged plugin
              will be a .ez erlang archive. Alternatively, more developmental plugins may be distributed
              directly from source control, whereby they will be a directory containing (at least) an ebin
              subdirectory.
            </li>
            <li>
              In both cases, the plugin archive (or directory) should be placed into the plugins subdirectory
              within the rabbitmq-server installation directory (ie, the directory that the ebin directory
              resides within). If this directory does not exist, it can be safely created.
            </li>
            <li>
              After adding new plugins to the plugins subdirectory,
              restart the RabbitMQ server. As it starts, it scans the
              plugins subdirectory and activates all the plugins it
              finds there automatically before continuing to load.
            </li>
          </ul>
        </doc:subsection>
       
        <doc:subsection name="uninstall-plugins">
          <doc:heading>Un-install Plugins</doc:heading>
          
          <p>
            To remove an installed plugin from the broker, delete the
            .ez file or directory from the plugins directory. When the
            broker is restarted, the deleted plugin will no longer be
            started.
          </p>
        </doc:subsection>

        <doc:subsection name="disable-all-plugins">
          <doc:heading>Disable all Plugins</doc:heading>
          <p>
            In the event of broker mis-behaviour, it is recommended
            that all plugins be disabled as a first
            port-of-call. Either move the plugins subdirectory away,
            or delete it.  When Rabbit is restarted, no custom plugins
            will be loaded.
          </p>
        </doc:subsection> 
        
        <doc:subsection name="windows-restart">
          <doc:heading>Restarting RabbitMQ Windows Service</doc:heading>
          <p>
              Each time you add or remove any plugins in the plugins directory, you must re-run the
<pre>
rabbitmq-service.bat remove
rabbitmq-service.bat install
rabbitmq-service.bat start
</pre>
              commands to ensure that the service configuration is updated to perform
              an appropriate boot sequence.
        </p>
        </doc:subsection>
        </doc:section>

      <doc:section name="building">
        <doc:heading>Building Plugins</doc:heading>
        <p>
          You can also build plugins from source. We do not explicitly
          release source tarballs for plugins, but the repositories
          can all be found on
          our <a href="http://hg.rabbitmq.com/">Mercurial
          server</a>. See the <a href="plugin-development.html">plugin
          development</a> guide for more information on building
          plugins from source.
        </p>
        <p>
          Note that plugins tend to be strongly bound to the a certain
          version of rabbitmq-server. For example, if you are running
          RabbitMQ &version-server;, you should check out all plugins
          with the tag <code>&version-server-hg;</code>.
        </p>
      </doc:section>
    </doc:div>

    <x:related-links key="plugins.html" />

  </body>
</html>
