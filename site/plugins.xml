<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
]>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:r="http://www.rabbitmq.com/namespaces/ad-hoc/conformance"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Plugins</title>
  </head>
  <body>
      <doc:section name="overview">
        <p>
          RabbitMQ supports a variety of plugins. This page documents
          the plugins that ship with RabbitMQ
          &version-server;.
        </p>
        <p>
          To enable plugins, use
          the <a href="man/rabbitmq-plugins.1.man.html">rabbitmq-plugins</a>
          tool:
        </p>
        <pre class="example">    rabbitmq-plugins enable <i>plugin-name</i></pre>
        <p>And to disable plugins again, use:</p>
        <pre class="example">    rabbitmq-plugins disable <i>plugin-name</i></pre>
        <p>You can see a list of which plugins are enabled with:</p>
        <pre class="example">    rabbitmq-plugins list</pre>
        <p>
          After enabling or disabling plugins you will need to restart
          RabbitMQ. If you are running RabbitMQ as a Windows service,
          <a href="#windows-restart">see below</a>.
        </p>
        <p>
          For more information on <code>rabbitmq-plugins</code>,
          consult <a href="man/rabbitmq-plugins.1.man.html">the manual
          page</a>.
        </p>
        <!-- TODO: remove this after a suitable transition period -->
        <p>
          <b>Note: </b> Releases prior to 2.7.0 did not include
          plugins with the server, and any plugins that were installed
          were always activated; <code>rabbitmq-plugins</code> did not
          exist. You can download binary plugin files for older
          releases from <a href="/releases/plugins/">the
          archive</a>. Note further that we did not make binary
          plugins available prior to release 2.0.0.
        </p>
      </doc:section>

      <doc:section name="maintained">
        <doc:heading>Maintained Plugins</doc:heading>
        <table>
          <r:plugin name="rabbitmq_auth_backend_ldap">
            Authentication / authorisation plugin using an external LDAP
            server. See the <r:readme-link repo="rabbitmq-auth-backend-ldap"/>
            for more information.
          </r:plugin>

          <r:plugin name="rabbitmq_auth_mechanism_ssl">
            Authentication mechanism plugin using SASL EXTERNAL to authenticate
            using SSL client certificates. See the
            <r:readme-link repo="rabbitmq-auth-mechanism-ssl"/> for more
            information.
          </r:plugin>

          <r:plugin name="rabbitmq_federation">
            Scalable publish / subscribe messaging across WANs and
            administrative domains. See <a href="federation.html">the
            page on the federation plugin</a> for more information.
          </r:plugin>

          <r:plugin name="rabbitmq_management">
            A management / monitoring API over HTTP, along with a
            browser-based UI. For more information,
            see <a href="management.html">the page on the management
            plugin</a>.
          </r:plugin>

          <r:plugin name="rabbitmq_management_agent">
            When installing the management plugin on <b>some</b>
            of the nodes in a cluster, you must install
            <r:plugin-link name="rabbitmq_management_agent"/>
            on <b>all</b> of the nodes in the cluster. You can install the
            full management plugin on as many of the nodes as you
            want.
          </r:plugin>

          <r:plugin name="rabbitmq_shovel">
            A plug-in for RabbitMQ that shovels messages from a queue on one
            broker to an exchange on another broker. Please see the
            <r:readme-link repo="rabbitmq-shovel"/> for more information or
            take a look
            at <a href="https://github.com/rabbitinaction/sourcecode/blob/master/configs/rabbitmq/rabbitmq.config.shovel">a
              working Shovel configuration</a>.
          </r:plugin>

          <r:plugin name="rabbitmq_shovel_management">
            Shows shovel status in the management API and UI. Only
            of use when using rabbitmq_shovel in conjunction with
            <code>rabbitmq_management</code>. In a heterogenous cluster this
            should be installed on the same nodes as rabbitmq_management.
          </r:plugin>

          <r:plugin name="rabbitmq_stomp">
            A gateway for exposing AMQP functionality via
            the <a href="http://stomp.github.com">STOMP protocol</a>.
            (Some clients and servers supporting STOMP are
            listed <a href="http://stomp.github.com/implementations.html">
            here</a>.)
              Please see the <a href="stomp.html">documentation</a> and
              various
              <a href="http://www.lshift.net/blog/index.php?s=stomp">blog
                articles</a> about the adapter for more information on
              compiling and configuring it.
          </r:plugin>
        </table>
      </doc:section>

      <doc:section name="experimental">
        <doc:heading>Experimental Plugins</doc:heading>
        <p>
          Currently, all plugins below are <em>experimental</em>. This
          means we make no claims about their fitness for purpose or
          stability, though they are in general under active
          development.
        </p>

        <table>
          <r:plugin name="rabbitmq_management_visualiser">
            Broker topology visualiser plugin which is itself a plugin
            to the management plugin. Adds a <i>Visualiser</i> tab to
            the management web interface, which then flexibly and
            interactively displays channels, queues and exchanges, and
            the links between them.
          </r:plugin>

          <r:plugin name="rabbitmq_consistent_hash_exchange">
            Consistent hash exchange type. Please see the
            <r:readme-link repo="rabbitmq-consistent-hash-exchange" extension=".md"/>
            for more information.
          </r:plugin>

          <r:plugin name="rabbitmq_tracing">
            Adds message tracing to the management plugin. Logs
            messages from the <a href="firehose.html">firehose</a> in
            a couple of formats.
          </r:plugin>

          <r:plugin name="rabbitmq_jsonrpc_channel">
            An AMQP-over-HTTP protocol binding for RabbitMQ and some
            Javascript libraries for interacting with RabbitMQ over HTTP.
          </r:plugin>

          <r:plugin name="rabbitmq_jsonrpc_channel_examples" optional="true">
            Adds some example web applications
            to <code>rabbitmq_jsonrpc_channel</code>: a shared
            whiteboard, a chat application, and some tests.
          </r:plugin>
        </table>
      </doc:section>

      <doc:section name="installing-plugins">
      <doc:heading>Installing Additional Plugins</doc:heading>
      <p>
        Some plugins are also available from third party
        sources. Plugins will generally be available in two forms. The
        expected form for a packaged plugin will be a .ez erlang
        archive. Alternatively, more developmental plugins may be
        distributed directly from source control, in which case
        see <a href="#building">Building Plugins</a> below. Once you
        have one or more .ez archives for your plugins, you need to
        copy them to the plugins directiory.
      </p>
      <p>
        The plugins directory location is determined by the
        <b>RABBITMQ_PLUGINS_DIR</b> variable.  Its default value
        depends on how you installed RabbitMQ. Some common values are:
      </p>
      <table>
        <tr><th>Installation method</th><th>Plugins directory</th></tr>
        <tr>
          <th>Deb / RPM packages</th>
          <td>
            <code>/usr/lib/rabbitmq/lib/rabbitmq_server-<i>version</i>/plugins</code>
          </td>
        </tr>
        <tr>
          <th>Windows</th>
          <td>
            Typically <code>C:\Program
              Files\RabbitMQ\rabbitmq_server-<i>version</i>\plugins</code>
            (depending on where it was installed)
          </td>
        </tr>
        <tr>
          <th>Macports</th>
          <td>
            <code>${install_prefix}/lib/rabbitmq/lib/rabbitmq_server-<i>version</i>/plugins</code>
            (the Macports <code>${install_prefix}</code> defaults to <code>/opt/local</code>)
          </td>
        </tr>
        <tr>
          <th>Homebrew</th>
          <td>
            <code>/usr/local/Cellar/rabbitmq/<i>version</i>/lib/rabbitmq/erlang/lib/rabbitmq-<i>version</i>/plugins</code>
          </td>
        </tr>
        <tr>
          <th>Generic Unix</th>
          <td>
            <code>rabbitmq_server-<i>version</i>/plugins</code>
            (depending on where it was installed)
          </td>
        </tr>
      </table>
      <p>
        The variable's meaning has changed in 2.7.0: whereas it
        previously referred to the directory of installed plugins, it
        now refers to the directory with all available plugins.  The
        <code>rabbitmq-plugins</code> tool can only enable plugins
        found in this directory.
      </p>
      </doc:section>
      <doc:section name="upgrades">
        <doc:heading>Plugins and Upgrades</doc:heading>
        <p>
          The enabled plugins configuration is preserved between
          upgrades, so there is no need to re-enable plugins after an
          upgrade, but because the plugins directory changes between
          versions, any third party plugins will need to be copied to
          the new directory. It's very possible that due to API
          changes you may need to check for updates to third party
          plugins at this point.
        </p>
      </doc:section>
      <doc:section name="windows-restart">
        <doc:heading>Restarting RabbitMQ Windows Service</doc:heading>
        <p>
          Each time you enable or disable a plugin, you must run the
          following commands to ensure that the service configuration
          is updated and the server restarted:
<pre class="code">
rabbitmq-service.bat stop
rabbitmq-service.bat install
rabbitmq-service.bat start
</pre>
         This only applies if you are running RabbitMQ as a Windows service.
        </p>
      </doc:section>

      <doc:section name="building">
        <doc:heading>Building Plugins</doc:heading>
        <p>
          You can also build plugins from source.  The sources for a
          particular version of the plugins is distributed in the same
          archive as the broker with that version.  The source code
          repositories can all be found on our <a
          href="http://hg.rabbitmq.com/">Mercurial server</a>. See the
          <a href="plugin-development.html">plugin development</a>
          guide for more information on building plugins from source.
        </p>
        <p>
          Note that plugins tend to be strongly bound to the a certain
          version of rabbitmq-server. For example, if you are running
          RabbitMQ &version-server;, you should check out all plugins
          with the tag <code>&version-server-hg;</code>.
        </p>
      </doc:section>
  </body>
</html>
