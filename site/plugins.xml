<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
]>
<!--
Copyright (c) 2007-2018 Pivotal Software, Inc.

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License,
Version 2.0 (the "License”); you may not use this file except in compliance
with the License. You may obtain a copy of the License at

https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:r="http://www.rabbitmq.com/namespaces/ad-hoc/conformance"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Plugins</title>
  </head>
  <body show-in-this-page="true">
    <doc:section name="overview">
      <doc:heading>Overview</doc:heading>

      <p>
        RabbitMQ supports plugins. Plugins extend core broker functionality in a variety of ways: with support
        for more protocols, system state <a href="/monitoring.html">monitoring</a>, additional AMQP 0-9-1 exchange types,
        node <a href="/federation.html">federation</a>, and more. A number of features are implemented as plugins
        that ship in the core distribution.
      </p>
      <p>
        This guide covers the plugin mechanism and plugins that ship with RabbitMQ &version-server;.
        3rd party plugins can be installed separately. A set of <a href="#plugin-tiers">curated plugins</a> is also available.
      </p>
      <p>
        Plugins are activated when a node is started or at runtime when a <a href="cli.html">CLI tool</a>
        is used. For a plugin to be activated at boot, it must be enabled. To enable a plugin, use
        the <a href="cli.html">rabbitmq-plugins</a>:

        <pre class="sourcecode bash">rabbitmq-plugins enable <i>plugin-name</i></pre>

        And to disable a plugin, use:

        <pre class="sourcecode bash">rabbitmq-plugins disable <i>plugin-name</i></pre>
      </p>

      <p>
        A list of plugins available locally (in the node's <a href="/relocate.html">plugins directory</a>) as well
        as their status (enabled or disabled) can be obtained using <code></code>:

        <pre class="sourcecode bash">rabbitmq-plugins list</pre>
      </p>
    </doc:section>

    <doc:section name="ways-to-enable-plugins">
      <doc:heading>Different Ways to Enable Plugins</doc:heading>

      <p>
        The <code>rabbitmq-plugins</code> comand enables or
        disables plugins by contacting the running node to tell it to
        start or stop plugins as needed. It is possible to contact an arbitrary
        node <code>-n</code> option to specify a different node.
      </p>

      <p>
        Having a node running before the plugins are enabled is not always practical
        or operator-friendly. For those cases <code>rabbitmq-plugins</code>
        provides an alternative way. If the <code>--offline</code> flag is specified,
        the tool will not contact any nodes and instead will modify the file containing
        the list of enabled plugins (appropriately named <code>enabled_plugins</code>) directly.
        This option is often optimal for node provisioning automation.
      </p>

      <p>
        The <code>enabled_plugins</code> file is usually <a href="/relocate.html">located</a> in the node
        data directory or under <code>/etc</code>, together with configuration files. The file contains
        a list of plugin names ending with a dot. For example, when <a href="/management.html">rabbitmq_management</a> and
        <a href="/shovel.html">rabbitmq_shovel</a> plugins are enabled,
        the file contents will look like this:


<pre class="sourcecode erlang">
[rabbitmq_management,rabbitmq_management_agent,rabbitmq_shovel].
</pre>

        Note that dependencies of plugins are not listed. Plugins with correct dependency metadata
        will specify their dependencies there and they will be enabled first at the time of
        plugin activation. Unlike <code>rabbitmq-plugins disable</code> calls against a running node,
        changes to the file require a node restart.
      </p>

      <p>
        The file can be generated by deployment tools. This is another automation-friendly approach.
        When a plugin must be disabled, it should be removed from the list and the node must be restarted.
      </p>

      <p>
        For more information on <code>rabbitmq-plugins</code>,
        consult <a href="man/rabbitmq-plugins.8.html">the manual
        page</a>.
      </p>
    </doc:section>


    <doc:section name="plugin-directories">
      <doc:heading>Plugin Directories</doc:heading>

      <p>
        RabbitMQ loads plugins from the local filesystem. Plugins are distributed as
        archives (<code>.ez</code> files) with compiled code modules and metadata.
        Since some plugins <a href="/#plugin-tiers">ship with RabbitMQ</a>, every
        node has at least one default plugin directory. The path varies between
        package types and can be <a href="/relocate.html">overridden</a> using the
        <code>RABBITMQ_PLUGINS_DIR</code> <a href="/configure.html#customise-environment">environment variable</a>.
        Please see <a href="/relocate.html">File and Directory Locations guide</a> to learn about the default
        value on various platforms.
      </p>

      <p>
        The built-in plugin directory is by definition version-independent: its contents will change
        from release to release. So will its exact path (by default) which contains version number,
        e.g. <code>/usr/lib/rabbitmq/lib/rabbitmq_server-3.7.7/plugins</code>. Because of this
        automated installation of 3rd party plugins into this directory is harder and more error-prone,
        and therefore not recommended. To solve this problem, the plugin directory can be a list
        of paths separated by a colon (on Linux, MacOS, BSD):

<pre class="sourcecode sh">
# Example rabbitmq-env.conf file that features a colon-separated list of plugin directories
PLUGINS_DIR="/usr/lib/rabbitmq/plugins:/usr/lib/rabbitmq/lib/rabbitmq_server-3.7.7/plugins"
</pre>

        On Windows, a semicolon is used as path separator:

<pre class="sourcecode powershell">
# Example rabbitmq-env-conf.bat file that features a colon-separated list of plugin directories
PLUGINS_DIR="C:\Example\RabbitMQ\plugins;C:\Example\RabbitMQ\rabbitmq_server-3.7.7\plugins"
</pre>
      </p>

      <p>
        Plugin directory paths that don't have a version-specific component and are not updated
        by RabbitMQ package installers during upgrades are optimal for 3rd party plugin installation.
        Provisioning automation tools can rely on those directories to be stable and only managed
        by them.
      </p>

      <p>
        3rd party plugin directories will differ from platform to platform and installation method
        to installation method. For example, <code>/usr/lib/rabbitmq/plugins</code> is a 3rd party plugin directory
        path used by RabbitMQ <a href="/install-debian.html">Debian packages</a>.
      </p>

      <p>
        Plugin directory can be located by executing the following command on the host
        with a running RabbitMQ node:

<pre class="sourcecode sh">
rabbitmqctl eval 'application:get_env(rabbit, plugins_dir).'
# => {ok,"/usr/lib/rabbitmq/plugins:/usr/lib/rabbitmq/lib/rabbitmq_server-3.7.7/plugins"}
</pre>

        The first directory in the example above is the 3rd party plugin directory.
        The second one contains plugins that ship with RabbitMQ and will change as
        installed RabbitMQ version changes between upgrades.
      </p>

      <doc:subsection name="plugin-expansion">
        <doc:heading>Plugin Expansion (Extraction)</doc:heading>
        <p>
          Not every plugin can be loaded from an archive <code>.ez</code> file.
          For this reason RabbitMQ will extracts plugin archives on boot into a separate
          directory that is then added to its code path. This directory is known
          as the expanded plugins directory. It is usually managed entirely by RabbitMQ
          but if node directories are changed to non-standard ones, that directory will likely
          need to be overridden, too. It can be done using the <code>RABBITMQ_PLUGINS_EXPAND_DIR</code>
          <a href="/configure.html#customise-environment">environment variable</a>. The directory
          must be readable and writable by the effective operating system user of the RabbitMQ node.
        </p>
      </doc:subsection>
    </doc:section>

    <doc:section name="plugin-tiers">
      <doc:heading>Plugin Tiers</doc:heading>

      <p>
        Plugins that ship with the RabbitMQ distributions are often referred
        to as tier 1 plugins. Provided that a standard distribution package is
        used they do not need to be <a href="/installing-plugins.html">installed</a> but do need to be
        enabled before they can be used.
      </p>

      <p>
        In addition to the plugins bundled with the server, team RabbitMQ
        offers binary downloads of curated plugins which have been
        contributed by authors in the community. See the <a
        href="community-plugins.html">community plugins page</a> for
        more details.
      </p>

      <p>
        Even more plugins can be found on GitHub, GitLab, Bitbucket and similar
        services.
      </p>
    </doc:section>

    <doc:section name="tier1-plugins">
      <doc:heading>Tier 1 (Core) Plugins</doc:heading>

      <p>
        The table below lists tier 1 (core) plugins that ship with RabbitMQ.
      </p>

      <table class="plugins">
        <r:plugin name="rabbitmq_amqp1_0">
          AMQP 1.0 protocol support.

          This plugin is several years old and is moderately
          mature. It may have certain limitations with its current
          architecture but most major AMQP 1.0 features should be in
          place.

          <ul>
            <li><r:readme-link repo="rabbitmq-amqp1.0" extension=".md"/></li>
          </ul>
        </r:plugin>

        <r:plugin name="rabbitmq_auth_backend_ldap">
          Authentication / authorisation plugin using an external
          LDAP server.
          <ul>
            <li><a href="ldap.html">Documentation for the LDAP
            plugin</a></li>
          </ul>
        </r:plugin>

        <r:plugin name="rabbitmq_auth_backend_http">
          Authentication / authorisation plugin that uses an external HTTP API.
          <ul>
            <li><r:readme-link repo="rabbitmq-auth-backend-http" extension=".md"/></li>
          </ul>
        </r:plugin>

        <r:plugin name="rabbitmq_auth_mechanism_ssl">
          Authentication mechanism plugin using SASL EXTERNAL to authenticate
          using TLS (x509) client certificates.
          <ul>
            <li><r:readme-link repo="rabbitmq-auth-mechanism-ssl" extension=".md"/></li>
          </ul>
        </r:plugin>

        <r:plugin name="rabbitmq_consistent_hash_exchange">
          Consistent hash exchange type.
          <ul>
            <li><r:readme-link repo="rabbitmq-consistent-hash-exchange" extension=".md"/></li>
          </ul>
        </r:plugin>

        <r:plugin name="rabbitmq_federation">
          Scalable messaging across WANs and administrative
          domains.
          <ul>
            <li><a href="federation.html">Documentation for the
            federation plugin</a></li>
          </ul>
        </r:plugin>

        <r:plugin name="rabbitmq_federation_management">
          Shows federation status in the management API and UI. Only
          of use when using rabbitmq_federation in conjunction with
          <code>rabbitmq_management</code>. In a heterogenous cluster this
          should be installed on the same nodes as rabbitmq_management.
        </r:plugin>

        <r:plugin name="rabbitmq_management">
          A management / monitoring API over HTTP, along with a
          browser-based UI.
          <ul>
            <li><a href="management.html">Documentation for the
            management plugin</a></li>
          </ul>
        </r:plugin>

        <r:plugin name="rabbitmq_management_agent">
          When installing the management plugin on <em>some</em>
          of the nodes in a cluster, you must install
          <code>rabbitmq_management_agent</code>
          on <em>all</em> of the nodes in the cluster. You can install the
          full management plugin on as many of the nodes as you
          want.
        </r:plugin>

        <r:plugin name="rabbitmq_mqtt">
          An adapter implementing the MQTT 3.1 protocol.
          <ul>
            <li><a href="mqtt.html">Documentation for the MQTT plugin</a></li>
          </ul>
        </r:plugin>

        <r:plugin name="rabbitmq_shovel">
          A plug-in for RabbitMQ that shovels messages from a queue on
          one broker to an exchange on another broker.
          <ul>
            <li><a href="/shovel.html">Documentation for the Shovel plugin</a></li>
          </ul>
        </r:plugin>

        <r:plugin name="rabbitmq_shovel_management">
          Shows shovel status in the management API and UI. See the
          plugin <r:readme-link repo="rabbitmq-shovel-management"/>.
          Only of use when using <code>rabbitmq_shovel</code> in
          conjunction with <code>rabbitmq_management</code>. In a
          heterogenous cluster this should be installed on the same
          nodes as <code>rabbitmq_management</code>.
        </r:plugin>

        <r:plugin name="rabbitmq_stomp">
          Provides <a href="http://stomp.github.io/stomp-specification-1.2.html">STOMP protocol</a> support in RabbitMQ.
          <ul>
            <li><a href="stomp.html">Documentation for the STOMP plugin</a><br/></li>
          </ul>
        </r:plugin>

        <r:plugin name="rabbitmq_tracing">
          Adds message tracing to the management plugin. Logs
          messages from the <a href="firehose.html">firehose</a> in
          a couple of formats.
        </r:plugin>

        <r:plugin name="rabbitmq_trust_store">
          Provides a client x509 certificate trust store.
          <ul>
            <li><r:readme-link repo="rabbitmq-trust-store" extension=".md"/></li>
          </ul>
        </r:plugin>

        <r:plugin name="rabbitmq_web_stomp">
          STOMP-over-WebSockets: a bridge exposing <code>rabbitmq_stomp</code> to web
          browsers using WebSockets.
          <ul>
            <li><a href="web-stomp.html">Documentation for the
            web-stomp plugin</a></li>
          </ul>
        </r:plugin>

        <r:plugin name="rabbitmq_web_mqtt">
          MQTT-over-WebSockets: a bridge exposing <a href="/mqtt.html">rabbitmq_mqtt</a> to Web
          browsers using WebSockets.
          <ul>
            <li><a href="web-mqtt.html">Documentation for the
            web-mqtt plugin</a></li>
          </ul>
         </r:plugin>

        <r:plugin name="rabbitmq_web_stomp_examples" optional="true">
          Adds some basic examples to
          <code>rabbitmq_web_stomp</code>: a simple "echo" service
          and a basic canvas-based collaboration tool.

          <ul>
            <li><r:readme-link repo="rabbitmq-web-stomp-examples" extension=".md"/></li>
          </ul>
        </r:plugin>

        <r:plugin name="rabbitmq_web_mqtt_examples" optional="true">
          Adds some basic examples to
          <code>rabbitmq_web_mqtt</code>: a simple "echo" service
          and a basic canvas-based collaboration tool.

          <ul>
            <li><r:readme-link repo="rabbitmq-web-mqtt-examples" extension=".md"/></li>
          </ul>
        </r:plugin>
      </table>
    </doc:section>

    <doc:section name="discontinued">
      <doc:heading>Discontinued</doc:heading>
      <p>
        All plugins below have been <em>discontinued</em>. They don't (or won't) ship
        with the RabbitMQ distribution and are no longer maintained.
      </p>

      <table class="plugins">
        <r:plugin name="rabbitmq_management_visualiser">
          Broker topology visualiser plugin which is itself a plugin
          to the management plugin. Adds a <i>Visualiser</i> tab to
          the management web interface, which then flexibly and
          interactively displays channels, queues and exchanges, and
          the links between them.
        </r:plugin>
      </table>
    </doc:section>
  </body>
</html>
