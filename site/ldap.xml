<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
]>
<!--
Copyright (c) 2007-2016 Pivotal Software, Inc.

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License,
Version 2.0 (the "License”); you may not use this file except in compliance
with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>LDAP Plugin</title>
  </head>
  <body show-in-this-page="true">
    <doc:section name="overview">
      <p>
        The LDAP plugin provides the ability for your RabbitMQ server to
        perform authentication (determining who can log in) and
        authorisation (determining what permissions they have) by deferring
        to an external LDAP server. To use this plugin, some editing of the
        RabbitMQ configuration file is required. You must enable the plugin,
        and then configure it. You are advised to read this entire page
        before starting.
      </p>

      <p>
        The LDAP plugin is included in the RabbitMQ distribution. To
        enable it, use
        <a href="man/rabbitmq-plugins.1.man.html">rabbitmq-plugins</a>:
      </p>
      <pre class="example">rabbitmq-plugins enable rabbitmq_auth_backend_ldap</pre>
      <p>
        You will then need to set the value of the <code>auth_backends</code>
        configuration item for the <code>rabbit</code> application to include
        <code>rabbit_auth_backend_ldap</code>. <code>rabbit.auth_backends</code> is a
        list of authentication/authoriation providers to try in order. For
        more information, see the <a href="/access-control.html">Access Control</a>
        guide.
      </p>

      <p>
        The following example
        will configure RabbitMQ to <b>only</b> check LDAP for users,
        and ignore the internal database:
      </p>
      <pre class="example">auth_backends.1 = ldap</pre>

          Or, in the <a href="/configure.html#erlang-term-config-file">classic config format</a>:

      <pre class="example">{rabbit,[{auth_backends, [rabbit_auth_backend_ldap]}]}</pre>

      <p>
        This will check LDAP first, and then fall back to the internal
        database if the user cannot be authenticated through LDAP:
      </p>
      <pre class="example">auth_backends.1 = ldap
auth_backends.2 = internal</pre>

          Or, in the <a href="/configure.html#erlang-term-config-file">classic config format</a>:

      <pre class="example">{rabbit,[{auth_backends, [rabbit_auth_backend_ldap, rabbit_auth_backend_internal]}]}</pre>

      <p>
        The example below will check LDAP first. If the user is found in LDAP then the
        password will be checked against LDAP and subsequent authorisation
        checks will be performed against the internal database (therefore
        users in LDAP must exist in the internal database as well, but do not
        need a password there). If the user is not found in LDAP then a second
        attempt is made using only the internal database.
      </p>

      <pre class="example">auth_backends.1.authn = ldap
auth_backends.1.authz = internal
auth_backends.2 = internal</pre>

          Or, in the <a href="/configure.html#erlang-term-config-file">classic config format</a>:

      <pre class="example">{rabbit,[{auth_backends, [{rabbit_auth_backend_ldap, rabbit_auth_backend_internal},
                                                     rabbit_auth_backend_internal]}]}</pre>
    </doc:section>

    <doc:section name="basic">
      <doc:heading>Basic configuration</doc:heading>
      <p>
        You must then configure the plugin. This plugin has quite a few
        configuration options, but most have sensible defaults.
      </p>

      <p>
        The most complex part of configuring the plugin pertains to
        authorisation (i.e. granting permissions to your users via LDAP). This
        is documented separately below and can be skipped if only using the
        plugin for authentication.
      </p>
      <p>
        The default configuration allows all users to access all objects in
        all vhosts, but does not make them administrators. If you're happy
        with that, there is no need to read the documentation on authorisation.
      </p>
      <p>
        Listed options can be defined using <a href="/configure.html">sysctl config format</a> in
        <code>rabbitmq.conf</code>
        The options not directly related to authorisation are:
      </p>

      <dl>
        <dt><code>servers</code></dt>
        <dd>
          List of LDAP servers to attempt to bind to, in order. You almost
          certainly want to change this. Default: <code>["ldap"]</code>
          Example of configuration using the sysctl config format:
          <pre class="example">
rabbit_auth_backend_ldap.servers.1 = some_server
rabbit_auth_backend_ldap.servers.2 = some_other_server
          </pre>
          Using the classic config format:
          <pre class="example">[{rabbitmq_auth_backend_ldap, [{servers, ["some_server", "some_other_server"]}]}].</pre>
        </dd>
        <dt><code>user_dn_pattern</code></dt>
        <dd>
          <p>
            There are two ways to convert a username as provided through AMQP to
            a Distinguished Name. The simplest way is via string substitution
            with <code>user_dn_pattern</code>. To do this, set
            <code>user_dn_pattern</code> to a string containing exactly one
            instance of <code>${username}</code>.
          </p>
          <p>
            For example, setting user_dn_pattern to:
            <code>"cn=${username},ou=People,dc=example,dc=com"</code>
          </p>
          <p>
            would cause the username <code>simon</code> to be converted to the
            DN <code>cn=simon,ou=People,dc=example,dc=com</code>
          </p>
          <p>
            Default: <code>"${username}"</code>
          </p>
        </dd>
        <dt><code>dn_lookup_attribute</code>, <code>dn_lookup_base</code> and <code>dn_lookup_bind</code></dt>
        <dd>
          <p>
            The other way to convert a username to a Distinguished
            Name is via an LDAP lookup.
          </p>
          <p>
            To do this, set <code>dn_lookup_attribute</code> to the
            name of the attribute that represents the user name,
            and <code>dn_lookup_base</code> to the base DN for the
            query.
          </p>
          <p>
            The lookup can be done at one of two times, either before
            attempting to bind as the user in question, or afterwards.
          </p>
          <p>
            If you want to do the lookup after binding, you can leave
            <code>dn_lookup_bind</code> set to its default
            of <code>as_user</code>. The LDAP plugin will then bind
            with the user's unadorned username to do the login, then
            look up its DN. In order for this to work your LDAP server
            needs to be configured to allow binding with the unadorned
            username (Microsoft Active Directory typically does this).
          </p>
          <p>
            If you want to do the lookup before binding, you must
            set <code>dn_lookup_bind</code> to a tuple <code>{UserDN,
            Password}</code>. The LDAP plugin will then bind with
            these credentials first to do the lookup, then bind with
            the user's DN and password to do the login.
          </p>
          <p>
            For example, if I set
          </p>
          <pre class="example">
rabbit_auth_backend_ldap.dn_lookup_attribute = userPrincipalName
rabbit_auth_backend_ldap.dn_lookup_base = DC=gopivotal,DC=com</pre>
          <p>
            I can authenticate as <code>smacmullen@gopivotal.com</code> and have my
            local Active Directory server return my real DN.
          </p>
          <p>
            If you set both <code>dn_lookup_attribute</code>
            and <code>user_dn_pattern</code> then the approaches are
            combined: the plugin fills out the template and then
            searches for the DN.
          </p>
          <p>
            Default: <code>none</code>, <code>none</code> and <code>as_user</code>
          </p>
        </dd>
        <dt><code>other_bind</code></dt>
        <dd>
          <p>
            For authentication this plugin binds to the LDAP server as the
            user it is trying to authenticate. This option controls how to
            bind for authorisation queries, and to retrieve the details of a
            user who is logging in without presenting a password (e.g. SASL
            EXTERNAL).
          </p>
          <p>
            This option must either be one of the
            atoms <code>as_user</code> (to bind as the authenticated
            user) or <code>anon</code> (to bind anonymously), or be presented by two
            options <code>other_bind.user_dn</code> and <code>other_bind.password</code>
            to bind with a specified username and password.
            For example:
            <pre class="example">
rabbit_auth_backend_ldap.other_bind.user_dn = username
rabbit_auth_backend_ldap.other_bind.password = password</pre>

            Using the classic config format:
            <pre class="example">[{rabbitmq_auth_backend_ldap, [{other_bind, {"username", "password"}}]}].</pre>
          </p>
          <p>
            Note that it is not possible to use the
            default <code>as_user</code> configuration when users connect
            without passwords. You must set <code>other_bind</code>
            to <code>anon</code>, or with user_dn and password for users
            to log in without passwords.
          </p>
          <p>
            Default: <code>as_user</code>
          </p>
        </dd>
        <dt><code>use_ssl</code></dt>
        <dd>
          Whether to use LDAP over SSL. Default:
          <code>false</code>
        </dd>
        <dt><code>use_starttls</code></dt>
        <dd>
          Whether to use LDAP secured with StartTLS. Requires Erlang
          R16B03 or later. Default:
          <code>false</code>
          <p>Only one of <code>use_ssl</code> and
          <code>use_starttls</code> can be <code>true</code>.</p>
        </dd>
        <dt><code>ssl_options</code></dt>
        <dd>
          SSL client options to use with <code>use_ssl</code> or
          <code>use_starttls</code>. Uses the same <a href="ssl.html">SSL
          configuration</a> as elsewhere in RabbitMQ. Requires Erlang
          R16A or later. Default:
          <code>[]</code>
        </dd>
        <dt><code>port</code></dt>
        <dd>
          Port on which to connect to the LDAP servers. Default:
          <code>389</code>.
        </dd>
        <dt><code>timeout</code></dt>
        <dd>
          LDAP connection timeout in milliseconds, or 'infinity' for
          no timeout. Default:
          <code>infinity</code>.
        </dd>
        <dt><code>log</code></dt>
        <dd>
          <p>
            Select <code>true</code> for verbose logging of the logic used by
            the LDAP plugin to make decisions. This is typically useful for
            debugging.
          </p>
          <p>
            Select <code>network</code> to <b>additionally</b> cause LDAP
            network traffic to be logged at a somewhat lower level. This will
            typically cause passwords to be written to the logs; exercise
            caution.
          </p>
          <p>
            Default: <code>false</code>
          </p>
        </dd>
      </dl>
    </doc:section>

    <doc:section name="authorisation">
      <doc:heading>Configuring Authorisation</doc:heading>
      <p>
        Since LDAP has a view of the world which is rather different
        from that of RabbitMQ, we need to be able to configure the
        LDAP plugin to execute various queries against the LDAP
        database to determine whether the user is authorised to do
        various things. Authorisation is therefore controlled by
        three configuration options:
      </p>

      <ul>
        <li><code>vhost_access_query</code></li>
        <li><code>resource_access_query</code></li>
        <li><code>tag_queries</code></li>
      </ul>

      <p>
        Queries are complex erlang terms, so they can be defined only using the
        <a href="/configure.html#erlang-term-config-file">classic config format</a>. When using the sysctl
        format, <config>additional.config</config> can be used for query definitions
      </p>

      <p>
        Note that in order for a user to be able to access a virtual
        host, it must have been created within RabbitMQ; unlike users
        and permissions, virtual hosts cannot live entirely within
        LDAP.
      </p>

      <p>
        Each defines a query that will determine whether a user has
        access to a vhost, whether they have access to a resource
        (e.g. exchange, queue, binding) and
        which <a href="management.html#permissions">tags</a> they
        have.
      </p>

      <p>
        The default values for these queries are <code>{constant,
        true}</code>, <code>{constant, true}</code>
        and <code>[{administrator, {constant, false}}]</code>
        respectively, granting all users access to all objects in all
        vhosts, but not making them administrators.
      </p>

      <p>
        A query can be of one of several types, defined below. Since
        you are likely to write several queries, and since queries can
        be nested, it can be helpful to switch on the <code>log</code>
        configuration parameter documented above. This will cause the
        LDAP plugin to write fairly verbose descriptions of the
        queries it executes and the decisions it therefore makes to
        the RabbitMQ log.
      </p>

      <p>
        All of the query types which take strings support string
        substitution, where variables pertaining to the query being
        made can be substituted in. Each of the three queries allow
        different substitutions:
      </p>

      <p><code>vhost_access_query</code> allows</p>
      <ul>
        <li><code>${username}</code> - the user name provided at authentication</li>
        <li><code>${user_dn}</code> - the distinguished name of the user</li>
        <li><code>${vhost}</code> - the virtual host for which we are querying access</li>
      </ul>

      <p><code>resource_access_query</code> allows</p>
      <ul>
        <li><code>${username}</code> - the user name provided at authentication</li>
        <li><code>${user_dn}</code> - the distinguished name of the user</li>
        <li><code>${vhost}</code> - the virtual host in which the resource resides</li>
        <li><code>${resource}</code> - one of "exchange" or "queue" for the type of resource</li>
        <li><code>${name}</code> - the name of the resource</li>
        <li><code>${permission}</code> - one of "configure", "write" or "read" for the type of access being requested to the resource</li>
      </ul>

      <p>
        The terms configure, write and read for resource access have the
        same meanings that they do for the built-in RabbitMQ permissions
        system, see http://www.rabbitmq.com/access-control.html
      </p>

      <p><code>tag_queries</code> allows</p>
      <ul>
        <li><code>${username}</code> - the user name provided at authentication</li>
        <li><code>${user_dn}</code> - the distinguished name of the user</li>
      </ul>

      <p>
        Note that tag_queries consists of a proplist, mapping the name
        of a tag to a query to perform to determine whether or not the
        user has that tag. You must list queries for all tags that you
        want your users to be able to have.
      </p>
    </doc:section>

    <doc:section name="query-reference">
      <doc:heading>Authorisation Query Reference</doc:heading>

      <doc:subsection>
        <doc:heading>Constant Query</doc:heading>
        <pre>{constant, Bool}</pre>
        <p>
          This will always return either true or false, unconditionally granting
          or denying access.
        </p>
        <p>Example:</p>
        <pre class="example">{tag_queries, [{administrator, {constant, false}},
               {management,    {constant, true}}]}</pre>
        <p>
          This grants all users the ability to use the management
          plugin, but makes none of them administrators.
        </p>
      </doc:subsection>

      <doc:subsection>
        <doc:heading>Exists Query</doc:heading>
        <pre>{exists, Pattern}</pre>
        <p>
          This will substitute variables into the pattern, and return true if
          there exists an object with the resulting DN.
        </p>
        <p>Example:</p>
        <pre class="example">{vhost_access_query, {exists, "ou=${vhost},ou=vhosts,dc=example,dc=com"}}</pre>
        <p>
          This grants access to all virtual hosts which exist as
          organisational units
          within <code>ou=vhosts,dc=example,dc=com</code> to all
          users.
        </p>
      </doc:subsection>

      <doc:subsection>
        <doc:heading>In Group Query</doc:heading>
        <pre>{in_group, Pattern}</pre>
        <pre>{in_group, Pattern, AttributeName}</pre>
        <p>
          Like the Exists Query, substitutes arguments into a pattern to look
          for an object. However, this query returns true if the logged in
          user is a member; checking either against the <code>member</code>
          attribute, or any named attribute.
        </p>
        <p>Example:</p>
        <pre class="example">{vhost_access_query, {in_group, "cn=${vhost}-users,ou=vhosts,dc=example,dc=com"}}</pre>
        <p>
          This grants access to virtual hosts when the user is listed
          as a <code>member</code> attribute of an appropriately named
          object (such as a <code>groupOfNames</code>)
          within <code>ou=vhosts,dc=example,dc=com</code>.
        </p>
      </doc:subsection>

      <doc:subsection>
        <doc:heading>For Query</doc:heading>
        <pre>{for, [{Name, Value, SubQuery}, ...]}</pre>
        <p>
          This allows you to split up a query and handle different cases with
          different subqueries.
        </p>
        <p>
          Options should be a list of three-tuples, with each tuple containing
          a name, value and subquery. The name is the name of a variable
          (i.e. something that would go into a <code>${}</code>
          substitution). The value is a possible value for that variable.
        </p>
        <p>
          Note that the values are of different Erlang types;
          <code>resource</code> and <code>permission</code> have atom
          values (e.g. <code>resource</code> could be
          <code>exchange</code>) while the other keys have binary
          values (e.g. <code>name</code> might be
          <code>&lt;&lt;"amq.fanout"&gt;&gt;</code>).
        </p>
        <p>
          Example:
        </p>
<pre class="example">{resource_access_query,
 {for, [{resource, exchange, {for, [{permission, configure,
                                     {in_group, "cn=wheel,dc=example,dc=com"}
                                    },
                                    {permission, write, {constant, true}},
                                    {permission, read,  {constant, true}}
                                   ]}},
        {resource, queue,    {constant, true}}]}}</pre>

        <p>
          This allows members of the <code>wheel</code> group to declare and
          delete exchanges, and allow all users to do everything else.
        </p>
      </doc:subsection>

      <doc:subsection>
        <doc:heading>Boolean Queries</doc:heading>
        <pre>{'not', SubQuery}</pre>
        <pre>{'and', [SubQuery1, SubQuery2, SubQuery3, ...]}</pre>
        <pre>{'or', [SubQuery1, SubQuery2, SubQuery3, ...]}</pre>
        <p>
          These can be used to combine subqueries with boolean logic. The
          'and' and 'or' queries each take an arbitrarily long list of
          subqueries, returning true if all or any subqueries evaluate to true
          respectively.
        </p>
        <p>
          Note that 'and', 'or' and 'not' are reserved words in Erlang,
          therefore the keywords need to be quoted with single quotes in the
          configuration file, as above.
        </p>
        <p>Example:</p>
        <pre class="example">{resource_access_query,
 {'or',
  [{'and',
    [{equals, "${name}", "test1"},
     {equals, "${username}", "user1"}]},
   {'and',
    [{equals, "${name}", "test2"},
     {'not', {equals, "${username}", "user1"}}]}
  ]}}</pre>
        <p>
          This example gives full access to objects called "test1" to "user1",
          and access to "test2" to everyone but "user1".
        </p>
      </doc:subsection>

      <doc:subsection>
        <doc:heading>Equals Query</doc:heading>
        <pre>{equals, StringSubQuery1, StringSubQuery2}</pre>
        <p>
          Takes two strings, and checks that the one matches the
          other. Note that both strings are subqueries (of the
          <code>string</code> and <code>attribute</code> types below)
          in turn.
        </p>
        <p>
          This can be useful in order to compare the value of one of
          the string substitution variables with a constant, or with
          an attribute value, etc.
        </p>
        <p>Example:</p>
        <pre class="example">{resource_access_query,
 {for, [{permission, configure, {equals, {attribute, "${user_dn}", "description"},
                                         {string, "can-declare-${resource}s"}
                                }
        },
        {permission, write, {constant, true}},
        {permission, read,  {constant, true}}
       ]
 }</pre>
        <p>
          This grants permissions to declare and delete exchanges and
          queues based on the presence of the strings
          "can-declare-exchanges" and "can-declare-queues" in the
          user's description field, and grants permission to write and
          read exchanges to everyone.
        </p>
      </doc:subsection>

      <doc:subsection>
        <doc:heading>Match Query</doc:heading>
        <pre>{match, StringSubQuery, RESubQuery}</pre>
        <p>
          Takes a string and a regular expression, and checks that the one
          matches the other. Note that the string and the regular expression are
          both subqueries (of the <code>string</code> and <code>attribute</code>
          types below) in turn.
        </p>
        <p>Example:</p>
        <pre class="example">{resource_access_query, {match, {string, "${name}"},
                                {string, "^${username}-"}}
}</pre>
        <p>
          This allows users to configure, read and write any object whose name
          begins with their own username followed by a hyphen.
        </p>
      </doc:subsection>

      <doc:subsection>
        <doc:heading>String Sub-query</doc:heading>
        <pre>{string, Pattern}</pre>
        <p>
          Just substitutes arguments into a string. As this returns a string
          rather than a boolean it should be used within a <code>match</code>
          or <code>equals</code> query. See above for example. As a shorthand
          you can use a plain string instead of <code>{string,
          Pattern}</code>.

        </p>
      </doc:subsection>

      <doc:subsection>
        <doc:heading>Attribute Sub-query</doc:heading>
        <pre>{attribute, DNPattern, AttributeName}</pre>
        <p>
          Returns the value of an attribute of an object retrieved from
          LDAP. As this returns a string rather than a boolean it should be
          used within a <code>match</code> or <code>equals</code> query. See
          above for example.
        </p>
      </doc:subsection>
    </doc:section>
    <doc:section name="example">
      <doc:heading>Example configuration</doc:heading>
      <p>
        Bringing it all together, here's a sample configuration. It uses both the <a href="/configure.html#config-file">standard config</a> and
        <a href="/configure.html#advanced-config-file">advanced config</a> files together. This
        makes all users able to access the management plugin, but
        makes none of them administrators. Access to virtual hosts is
        controlled by membership of a group per virtual host. Only
        members of <code>admin</code> can declare, delete or
        bind exchanges and queues, but all users can publish to
        exchanges and declare from queues.
      </p>
      The <a href="/configure.html#config-file">standard config</a>
      (rabbitmq.conf) is used to configure authentication backends and
      several LDAP plugin parameters:

<pre class="example">
auth_backends.1 = ldap

rabbit_auth_backend_ldap.servers.1  = my-ldap-server
rabbit_auth_backend_ldap.user_dn_pattern = cn=${username},ou=People,dc=example,dc=com
rabbit_auth_backend_ldap.use_ssl    = false
rabbit_auth_backend_ldap.port       = 389
rabbit_auth_backend_ldap.log        = false
</pre>
    <a href="/configure.html#advanced-config-file">Advanced config</a> is used to define LDAP queries:
<pre class="example">
[{rabbitmq_auth_backend_ldap,[
    {vhost_access_query,    {in_group,
                              "ou=${vhost}-users,ou=vhosts,dc=example,dc=com"}},
     {resource_access_query,
      {for, [{permission, configure, {in_group, "cn=admin,dc=example,dc=com"}},
             {permission, write,
              {for, [{resource, queue,    {in_group, "cn=admin,dc=example,dc=com"}},
                     {resource, exchange, {constant, true}}]}},
             {permission, read,
              {for, [{resource, exchange, {in_group, "cn=admin,dc=example,dc=com"}},
                     {resource, queue,    {constant, true}}]}}
            ]
      }},
     {tag_queries,           [{administrator, {constant, false}},
                              {management,    {constant, true}}]}
]}].
</pre>

    Alternatively, you can use the <a href="/configure.html#erlang-term-config-file">classic config format</a>
    to configure everything in a single file:

<pre class="example">[
  {rabbit, [{auth_backends, [rabbit_auth_backend_ldap]}]},
  {rabbitmq_auth_backend_ldap,
   [ {servers,               ["my-ldap-server"]},
     {user_dn_pattern,       "cn=${username},ou=People,dc=example,dc=com"},
     {use_ssl,               false},
     {port,                  389},
     {log,                   false},
     {vhost_access_query,    {in_group,
                              "ou=${vhost}-users,ou=vhosts,dc=example,dc=com"}},
     {resource_access_query,
      {for, [{permission, configure, {in_group, "cn=admin,dc=example,dc=com"}},
             {permission, write,
              {for, [{resource, queue,    {in_group, "cn=admin,dc=example,dc=com"}},
                     {resource, exchange, {constant, true}}]}},
             {permission, read,
              {for, [{resource, exchange, {in_group, "cn=admin,dc=example,dc=com"}},
                     {resource, queue,    {constant, true}}]}}
            ]
      }},
     {tag_queries,           [{administrator, {constant, false}},
                              {management,    {constant, true}}]}
   ]
  }
].</pre>
    </doc:section>
  </body>
</html>
