<?xml-stylesheet type="text/xml" href="page.xsl"?>
<html xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc">
  <head>
    <title>RabbitMQ - Administration Guide</title>
  </head>
  <body>
    <doc:div>
      <p class="intro">
        This is the RabbitMQ Server Administrator's Guide. <i>(Note: it
        is still under development. Please contact us if you have any
        suggestions or wished-for features!)</i>
      </p>
      <p>See also this <a href="/how.html#management">list of new community tools</a> have appeared for 'dashboard' access to core management functionality.</p>

      <doc:toc class="compact">
        <doc:heading>Table of Contents</doc:heading>
      </doc:toc>

      <doc:section name="installation">
        <doc:heading>Building and installation</doc:heading>
        <p>
          Please see the <a href="build-server.html">build</a> and <a
          href="install.html">installation</a> guides for instructions
          on compiling, installing, starting and shutting down the
          server. See the <a href="service-guide.html">service</a> 
          guide for instructions on running the server as a Windows
          Service.
        </p>
      </doc:section>

      <doc:section name="default-state">
        <doc:heading>Default database contents</doc:heading>

        <p>
          When the server first starts running, and detects that its
          database is uninitialised or has been deleted, it
          initialises a fresh database with the following resources:
        </p>

        <ul class="compact">
          <li>
            a virtual host named <code>/</code>
          </li>
          <li>
            a user named <code>guest</code> with a default password of
            <code>guest</code>, granted full access to the
            <code>/</code> virtual host.
          </li>
        </ul>

        <p>
          It is advisable to <a href="man/rabbitmqctl.1.man.html#change_password">change the
          password</a> of the <code>guest</code> user to something
          private, particularly if your broker is accessible publicly.
        </p>
      </doc:section>

      <doc:section name="management">
        <doc:heading>Management</doc:heading>
        <p>
          <code>rabbitmqctl</code> is a command line tool for managing
          a RabbitMQ broker.
          For (much) more information on <code>rabbitmqctl</code>, please see
          <a href="man/rabbitmqctl.1.man.html">the rabbitmqctl(1) man page</a>.
        </p>
      </doc:section>

      <doc:section name="access-control">
        <doc:heading>Access control</doc:heading>

        <p>
          When an AMQP client establishes a connection to an AMQP
          server, it specifies a virtual host within which it intends
          to operate. A first level of access control is enforced at
          this point, with the server checking whether the user has
          any permissions to access the virtual hosts, and rejecting
          the connection attempt otherwise.
        </p>

        <p>
          Resources, i.e. exchanges and queues, are named entities
          inside a particular virtual host; the same name denotes a
          different resource in each virtual host. A second level of
          access control is enforced when certain operations are
          performed on resources.
        </p>

        <p>
          RabbitMQ distinguishes between <em>configure</em>,
          <em>write</em> and <em>read</em> operations on a
          resource. The <em>configure</em> operations create or
          destroy resources, or alter their behaviour. The
          <em>write</em> operations inject messages into a
          resource. And the <em>read</em> operations retrieve messages
          from a resource.
        </p>

        <p>
          In order to perform an operation on a resource the user must
          have been granted the appropriate permissions for it. The
          following table shows what permissions on what type of
          resource are required for all the AMQP commands which
          perform permission checks.
          <table>
            <tr>
              <th>AMQP command</th>
              <th>configure</th>
              <th>write</th>
              <th>read</th>
            </tr>
            <tr>
              <td>exchange.declare</td><td>exchange</td><td/><td/>
            </tr>
            <tr>
              <td>exchange.delete</td><td>exchange</td><td/><td/>
            </tr>
            <tr>
              <td>queue.declare</td><td>queue</td><td/><td/>
            </tr>
            <tr>
              <td>queue.delete</td><td>queue</td><td/><td/>
            </tr>
            <tr>
              <td>queue.bind</td><td/><td>queue</td><td>exchange</td>
            </tr>
            <tr>
              <td>basic.publish</td><td/><td>exchange</td><td/>
            </tr>
            <tr>
              <td>basic.get</td><td/><td/><td>queue</td>
            </tr>
            <tr>
              <td>basic.consume</td><td/><td/><td>queue</td>
            </tr>
            <tr>
              <td>queue.purge</td><td/><td/><td>queue</td>
            </tr>
          </table>
        </p>

        <p>
          Permissions are expressed as a triple of regular expressions
          - one each for configure, write and read - on per-vhost
          basis. The user is granted the respective permission for
          operations on all resources with names matching the regular
          expressions. <i>(Note: For convenience RabbitMQ maps AMQP's
          default exchange's blank name to 'amq.default' when
          performing permission checks.)</i>
        </p>

        <p>
          Some AMQP operations can create resources with
          server-generated names. Every user has configure, write and
          read permissions for such resources. However, the names are
          strong and not discoverable as part of the protocol, only
          through management functionality. Therefore these resources
          are in effect private to the user unless they choose to
          dilvuge their names to other users.
        </p>

        <p>
          The regular expression <code>^$</code>, i.e. matching
          nothing but the empty string, exactly covers resources with
          server-generated names. That, for example, allows an
          administrator to restrict a user to declaring private
          resources only.  The empty string, <code>""</code> is a
          synonym for <code>^$</code> and restricts permissions in the
          exact same way.
        </p>

        <p>
          RabbitMQ may cache the results of access control checks on a
          per-connection or per-channel basis. Hence changes to user
          permissions may only take effect when the user reconnects.
        </p>
        <p>
          For details of how to set up access control, please see the
          <a href="man/rabbitmqctl.1.man.html#Access%20control">Access Control section</a>
          of the <a href="man/rabbitmqctl.1.man.html">rabbitmqctl(1) man page</a>.
        </p>

      </doc:section>

      <doc:section name="plugins">
        <doc:heading>Plugins</doc:heading>
        
        <p>
          RabbitMQ provides a plugin mechanism allowing for additional OTP applications to be run 
          within the broker node. Plugins should not be seen as a general purpose mechanism for writing
          applications, but instead as a specialised tool when additional functionality is required
          at the broker level.
        </p>
        <p>
          The RabbitMQ plugin mechanism makes use of a custom OTP .boot file, to start additional OTP 
          applications within the broker node, and thus comes with a number of caveats:
        </p>
        <ul>
          <li>
            Custom Boot files require that all applications (including standard OTP applications) have
            explicit versions listed. This means that if your OTP installation is upgraded, then Rabbit
            will most likely not start until the plugin activation script is run again.
          </li>
          <li>
            Since the plugin runs in the same node as the broker, it should not be assumed that any access
            controls configured on the broker will be observed by the plugin. Whilst plugins can interact
            with the ACL mechanism to ensure enforcement of security mechanisms, it is also possible for
            plugins to completely ignore security configuration.
          </li>
          <li>
            <strong>
              Again, since the plugin runs in the same node as the broker, an action that results in the node
              halting will shut down the RabbitMQ broker as well. Well-written plugins can be built to avoid
              this occuring, however Administrators should be aware of the risks of installing plugins - especially
              those that are not known to have undergone a rigorous QA procedure.
            </strong>
          </li>
        </ul>

        <doc:subsection name="installing-plugins">
          <doc:heading>Plugin Installation</doc:heading>
          <ul>
            <li>
              Plugins will generally be available in two forms. The expected form for a packaged plugin
              will be a .ez erlang archive. Alternatively, more developmental plugins may be distributed
              directly from source control, whereby they will be a directory containing (at least) an ebin
              subdirectory.
            </li>
            <li>
              In both cases, the plugin archive (or directory) should be placed into the plugins subdirectory
              within the rabbitmq-server installation directory (ie, the directory that the ebin directory
              resides within). If this directory does not exist, it can be safely created.
            </li>
            <li>
              Once the desired plugins have been placed in the plugins directory, run the following as root:
              <pre>rabbitmq-activate-plugins</pre> 
              Note that on some platforms it has been observed that many spurious warnings are printed along the lines
              of:
              <pre>*WARNING* mnesia: Object code (mnesia) out of date</pre>
              It is our experience that warnings of this variety can be safely ignored.
            </li>
            <li>
              Upon successful completion of the script, restart Rabbit. All installed plugins will be started
              automatically.
            </li>
            <li>
              <strong>Note for users with RabbitMQ installed as a Windows Service:</strong>
              When first activating, or deactivating, plugins, the 
              <pre>rabbitmq-service.bat install</pre>
              command will need to be re-run to ensure that the service configuration is updated to perform
              an appropriate boot sequence.
            </li>
          </ul> 
        </doc:subsection>
       
        <doc:subsection name="uninstalling-plugins">
          <doc:heading>Plugin Un-installation</doc:heading>
          
          <p>
            To remove an installed plugin from the broker, delete the .ez file or directory from the plugins
            directory, and re-run the rabbitmq-activate-plugins script. When the broker is restarted, the deleted
            plugin will no longer be started.
          </p>
        </doc:subsection>

        <doc:subsection name="disabling-all-plugins">
          <doc:heading>Disabling all Plugins</doc:heading>

          <p>
            In the event of broker mis-behaviour, it is recommended that all plugins be disabled as a first
            port-of-call. Instead of manually removing all files from the plugins directory, the deactivate
            plugins script can be used to disable all plugins until rabbitmq-activate-plugins is next run. To do this,
            execute:
            <pre>rabbitmq-deactivate-plugins</pre>
            
            When Rabbit is restarted, no custom plugins will be loaded.
          </p>
        </doc:subsection> 
      </doc:section>
    </doc:div>
  </body>
</html>
