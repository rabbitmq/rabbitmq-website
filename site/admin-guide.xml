<?xml-stylesheet type="text/xml" href="page.xsl"?>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>RabbitMQ - Administration Guide</title>
  </head>
  <body>
    <doc:div>
      <p class="intro">
        This is the RabbitMQ Server Administrator's Guide.
      </p>
      <doc:toc class="compact">
        <doc:heading>Table of Contents</doc:heading>
      </doc:toc>

      <doc:section name="installation">
        <doc:heading>Building and installation</doc:heading>
        <p>
          Please see the <a href="build-server.html">build</a> and <a
          href="install.html">installation</a> guides for instructions
          on compiling, installing, starting and shutting down the server.
          To change default settings, see the
          <a href="configure.html">configuration guide</a>. 
          See the <a href="service-guide.html">service</a>
          guide for instructions on running the server as a Windows
          Service.
        </p>
      </doc:section>

      <doc:section name="management">
        <doc:heading>Management and monitoring</doc:heading>
        <p>
          To monitor the broker's connections, channels,
          queues and exchanges you can use:          
        <dl>
        <dt>Web UI and HTTP API</dt>
        <dd>
          To view, manage and monitor the current state of a RabbitMQ broker, the <a href="management.html">management
          plugin</a> provides a web UI and HTTP API.
        </dd>
        <dt>Command Line Tool</dt>
        <dd>
          <code>rabbitmqctl</code> is a command line tool for managing
          a RabbitMQ broker. Please see the 
          <a href="man/rabbitmqctl.1.man.html">rabbitmqctl(1) man page</a> for information.
        </dd>
        <dt>Other tools</dt>
        <dd>There are
          several <a href="how.html#management"> community-maintained
          management tools</a>.
        </dd>
        </dl>
        </p>
      </doc:section>

      <doc:section name="default-state">
        <doc:heading>Default database access</doc:heading>

        <p>
          When the server first starts running, and detects that its
          database is uninitialised or has been deleted, it
          initialises a fresh database with the following resources:
        </p>

        <ul class="compact">
          <li>
            a virtual host named <code>/</code>
          </li>
          <li>
            a user named <code>guest</code> with a default password of
            <code>guest</code>, granted full access to the
            <code>/</code> virtual host.
          </li>
        </ul>

        <p>
          It is advisable
          to <a href="man/rabbitmqctl.1.man.html#delete_user">delete</a>
          the <code>guest</code> user
          or <a href="man/rabbitmqctl.1.man.html#change_password">change
          the password</a> to something private, particularly if your
          broker is accessible publicly.
        </p>
      </doc:section>

      <doc:section name="access-control">
        <doc:heading>Access control</doc:heading>

        <p>
          When an AMQP client establishes a connection to an AMQP
          server, it specifies a virtual host within which it intends
          to operate. A first level of access control is enforced at
          this point, with the server checking whether the user has
          any permissions to access the virtual hosts, and rejecting
          the connection attempt otherwise.
        </p>

        <p>
          Resources, i.e. exchanges and queues, are named entities
          inside a particular virtual host; the same name denotes a
          different resource in each virtual host. A second level of
          access control is enforced when certain operations are
          performed on resources.
        </p>

        <p>
          RabbitMQ distinguishes between <em>configure</em>,
          <em>write</em> and <em>read</em> operations on a
          resource. The <em>configure</em> operations create or
          destroy resources, or alter their behaviour. The
          <em>write</em> operations inject messages into a
          resource. And the <em>read</em> operations retrieve messages
          from a resource.
        </p>

        <p>
          In order to perform an operation on a resource the user must
          have been granted the appropriate permissions for it. The
          following table shows what permissions on what type of
          resource are required for all the AMQP commands which
          perform permission checks.
          <table>
            <tr>
              <th>AMQP command</th>
              <th>configure</th>
              <th>write</th>
              <th>read</th>
            </tr>
            <tr>
              <td>exchange.declare (passive=false)</td><td>exchange</td><td/><td/>
            </tr>
            <tr>
              <td>exchange.delete</td><td>exchange</td><td/><td/>
            </tr>
            <tr>
              <td>queue.declare (passive=false)</td><td>queue</td><td/><td/>
            </tr>
            <tr>
              <td>queue.delete</td><td>queue</td><td/><td/>
            </tr>
            <tr>
              <td>exchange.bind</td><td/><td>exchange (destination)</td><td>exchange (source)</td>
            </tr>
            <tr>
              <td>exchange.unbind</td><td/><td>exchange (destination)</td><td>exchange (source)</td>
            </tr>
            <tr>
              <td>queue.bind</td><td/><td>queue</td><td>exchange</td>
            </tr>
            <tr>
              <td>queue.unbind</td><td/><td>queue</td><td>exchange</td>
            </tr>
            <tr>
              <td>basic.publish</td><td/><td>exchange</td><td/>
            </tr>
            <tr>
              <td>basic.get</td><td/><td/><td>queue</td>
            </tr>
            <tr>
              <td>basic.consume</td><td/><td/><td>queue</td>
            </tr>
            <tr>
              <td>queue.purge</td><td/><td/><td>queue</td>
            </tr>
          </table>
        </p>

        <p>
          Permissions are expressed as a triple of regular expressions
          - one each for configure, write and read - on per-vhost
          basis. The user is granted the respective permission for
          operations on all resources with names matching the regular
          expressions. <i>(Note: For convenience RabbitMQ maps AMQP's
          default exchange's blank name to 'amq.default' when
          performing permission checks.)</i>
        </p>

        <p>
          The regular expression <code>'^$'</code>, i.e. matching
          nothing but the empty string, covers all resources and
          effectively stops the user from performing any operation.
          Standard AMQP resource names are prefixed with
          <code>amq.</code> and server generated names are prefixed
          with <code>amq.gen</code>.  For example,
          <code>'^amq\.gen.*|amq\.default$'</code> gives a user access to
          server-generated names and the default exchange.  The empty
          string, <code>''</code> is a synonym for <code>'^$'</code>
          and restricts permissions in the exact same way.
        </p>

        <p>
          RabbitMQ may cache the results of access control checks on a
          per-connection or per-channel basis. Hence changes to user
          permissions may only take effect when the user reconnects.
        </p>
        <p>
          For details of how to set up access control, please see the
          <a href="man/rabbitmqctl.1.man.html#Access%20control">Access Control section</a>
          of the <a href="man/rabbitmqctl.1.man.html">rabbitmqctl(1) man page</a>.
        </p>

      </doc:section>

      <doc:section name="plugins">
        <doc:heading>Plugins</doc:heading>
        
        <p>
          RabbitMQ provides a plugin mechanism allowing for additional OTP applications to be run 
          within the broker node. Plugins should not be seen as a general purpose mechanism for writing
          applications, but instead as a specialised tool when additional functionality is required
          at the broker level.
        </p>
        <p>
          The RabbitMQ plugin mechanism makes use of a custom OTP .boot file, to start additional OTP 
          applications within the broker node, and thus comes with a number of caveats:
        </p>
        <ul>
          <li>
            Since the plugin runs in the same node as the broker, it should not be assumed that any access
            controls configured on the broker will be observed by the plugin. Whilst plugins can interact
            with the ACL mechanism to ensure enforcement of security mechanisms, it is also possible for
            plugins to completely ignore security configuration.
          </li>
          <li>
            <strong>
              Again, since the plugin runs in the same node as the broker, an action that results in the node
              halting will shut down the RabbitMQ broker as well. Well-written plugins can be built to avoid
              this occuring, however Administrators should be aware of the risks of 
              <a href="plugins.html#installing-plugins">installing plugins</a> - especially
              those that are not known to have undergone a rigorous QA procedure.
            </strong>
          </li>
        </ul>
      </doc:section>
    </doc:div>

    <x:related-links key="admin-guide.html" />
    
  </body>
</html>
