<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!--
Copyright (c) 2007-2019 Pivotal Software, Inc.

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License,
Version 2.0 (the "License”); you may not use this file except in compliance
with the License. You may obtain a copy of the License at

https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:xi="http://www.w3.org/2003/XInclude"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Troubleshooting Network Connectivity</title>
  </head>
  <body>
    <doc:section name="troubleshooting-where-to-start">
      <doc:subsection name="troubleshooting-intro">
        <doc:heading>Introduction</doc:heading>
        <p>
          This guide accompanies the one <a href="/networking.html">on networking</a> and focuses on troublshooting of
          network connections.
        </p>
        <p>
          For connections that use TLS there is an additional <a href="/troubleshooting-ssl.html">guide on troubleshooting TLS</a>.
        </p>
      </doc:subsection>

      <doc:subsection name="troubleshooting-intro">
        <doc:heading>Troubleshooting Client Connection Issues: the Methodology</doc:heading>
        <p>
          Troubleshooting of network connectivity issues is a broad topic. There are entire
          books written about it. This guide explains a methodology and widely available networking tools
          that help narrow most common issues down efficiently.
        </p>

        <p>
          Networking protocols are <a href="https://en.wikipedia.org/wiki/OSI_model#Comparison_with_TCP.2FIP_model">layered</a>.
          So are problems with them. An effective troubleshooting
          strategy typically uses the process of elimination to pin point the issue (or multiple issues),
          starting at higher levels. Specifically for messaging technologies, the following steps
          are often effective and sufficient:

          <ul>
            <li><a href="#verify-client">Verify client configuration</a></li>
            <li>
              <a href="#verify-server">Verify server configuration</a> using <code><a href="/man/rabbitmqctl.8.html">rabbitmqctl</a> status</code> (specifically the <code>listeners</code> section)
              and <code>rabbitmqctl environment</code>
            </li>
            <li>Inspect <a href="#server-logs">server logs</a></li>
            <li>Verify <a href="#hostname-resolution">hostname resolution</a></li>
            <li>Verify what TCP <a href="#ports">port are used and their accessibility</a></li>
            <li>Verify <a href="#ip-routing">IP routing</a></li>
            <li>If needed, <a href="#traffic-capture">take and analyze a traffic dump</a> (traffic capture)</li>
          </ul>

          These steps, when performed in sequence, usually help identify the root cause of
          the vast majority of networking issues. Troubleshooting tools and techniques for
          levels lower than the <a href="https://en.wikipedia.org/wiki/Internet_protocol_suite#Internet_layer">Internet (networking) layer</a>
          are outside of the scope of this guide.
        </p>

        <p>
          Certain problems only happen in environments with a <a href="#detecting-high-connection-churn">high degree of connection churn</a>.
          Client connections can be inspected using the <a href="/management.html">management UI</a>.
          It is also possible to <a href="#inspecting-connections">inspect all TCP connections of a node and their state</a>.
          That information collected over time, combined with server logs, will help detect connection churn,
          file descriptor exhaustion and related issues.
        </p>
      </doc:subsection>

      <doc:subsection name="verify-client">
        <doc:heading>Verify Client Configuration</doc:heading>

        <p>
          All developers and operators have been there: typos,
          outdated values, issues in provisioning tools, mixed up
          public and private key paths, and so on. Step one is to
          double check application and client library
          configuration.
        </p>
      </doc:subsection>

      <doc:subsection name="verify-server">
        <doc:heading>Verify Server Configuration</doc:heading>

        <p>
          Verifying server configuration helps prove that RabbitMQ is running
          with the expected set of settings related to networking. It also verifies
          that the node is actually running. Here are the recommended steps:

          <ul>
            <li>Make sure the node is running using <code><a href="/man/rabbitmqctl.8.html">rabbitmqctl</a> status</code></li>
            <li>Verify <a href="/configure.html">config file is correctly placed and has correct syntax/structure</a></li>
            <li>Inspect the <code>listeners</code> section in <code><a href="/man/rabbitmqctl.8.html">rabbitmqctl</a> status</code> output</li>
            <li>Inspect effective configuration using <code><a href="/man/rabbitmqctl.8.html">rabbitmqctl</a> environment</code></li>
          </ul>
        </p>

        <p>
          The listeners sections will look something like this:

<pre class="lang-erlang">
 % ...
 {listeners,
     [{clustering,25672,"::"},
      {amqp,5672,"::"},
      {'amqp/ssl',5671,"::"},
      {http,15672,"::"}]}
 % ...
</pre>

          In this example, there are 4 TCP listeners on the node:

          <ul>
            <li>Inter-node and CLI tool communication port, <code>25672</code></li>
            <li>AMQP 0-9-1 (and 1.0, if enabled) listener for non-TLS connections, <code>5672</code></li>
            <li>AMQP 0-9-1 (and 1.0, if enabled) listener for TLS-enabled connections, <code>5671</code></li>
            <li><a href="/management.html">HTTP API</a>, 15672</li>
          </ul>

          All listeners are bound to all available interfaces.
        </p>
        <p>
          Inspecting TCP listeners used by a node helps spot non-standard port configuration,
          protocol plugins (e.g. <a href="/mqtt.html">MQTT</a>) that are supposed to be configured but aren't,
          cases when the node is limited to only a few network interfaces, and so on. If a port is not on the
          listener list it means the node cannot accept any connections on it.
        </p>
      </doc:subsection>
<a href="/logging.html">server logs</a>

      <doc:subsection name="server-logs">
        <doc:heading>Inspect Server Logs</doc:heading>

        <p>
          RabbitMQ nodes will <a href="/logging.html">log</a> key
          client <a href="/logging.html#connection-lifecycle-events">connection lifecycle events</a>.
          A TCP connection must be successfully established and at least 1 byte of data must be
          sent by the peer for a connection to be considered (and
          logged as) accepted. If no events are logged, this means
          that either there were no successful TCP connections or they
          sent no data.
        </p>
      </doc:subsection>

      <doc:subsection name="hostname-resolution">
        <doc:heading>Hostname Resolution</doc:heading>

        <p>
          It is very common for applications to use hostnames or URIs with hostnames when connecting
          to RabbitMQ. <a href="https://en.wikipedia.org/wiki/Dig_(command)">dig</a> and <a href="https://en.wikipedia.org/wiki/Nslookup">nslookup</a> are
          commonly used tools for troubleshooting hostnames resolution.
        </p>
      </doc:subsection>

      <doc:subsection name="ports">
        <doc:heading>Port Access</doc:heading>

        <p>
          Besides hostname resolution and IP routing issues,
          TCP port inaccessibility for outside connections is a common reason for
          failing client connections. <a href="https://en.wikipedia.org/wiki/Telnet">telnet</a> is a commonly
          used, very minimalistic tool for testing TCP connections to a particular hostname and port.
        </p>
        <p>
          The following example uses <code>telnet</code> to connect to host <code>localhost</code> on port <code>5672</code>.
          There is a running node with stock defaults running on <code>localhost</code> and nothing blocks access to the port, so
          the connection succeeds. <code>12345</code> is then entered for input followed by Enter. Since <code>12345</code> is not a correct AMQP protocol header,
          so the server closes TCP connection:

          <pre class="lang-bash">
telnet localhost 5672
# => Trying ::1...
# => Connected to localhost.
# => Escape character is '^]'.
12345 # enter this and hit Enter to send
# => AMQP	Connection closed by foreign host.
</pre>

          After <code>telnet</code> connection succeeds, use <code>Control + ]</code> and then <code>Control + D</code> to
          quit it.

          The following example connects to <code>localhost</code> on port <code>5673</code>.
          The connection fails (refused by the OS) since there is no process listening on that port.

          <pre class="lang-bash">
telnet localhost 5673
# => Trying ::1...
# => telnet: connect to address ::1: Connection refused
# => Trying 127.0.0.1...
# => telnet: connect to address 127.0.0.1: Connection refused
# => telnet: Unable to connect to remote host
</pre>
        </p>
        <p>
          Failed or timing out <code>telnet</code> connections
          strongly suggest there's a proxy, load balancer or firewall
          that blocks incoming connections on the target port. It
          could also be due to RabbitMQ process not running on the
          target node or uses a non-standard port. Those scenarios
          should be eliminated at the step that double checks server
          listener configuration.
        </p>
        <p>
          There's a great number of firewall, proxy and load balancer tools and products.
          <a href="https://en.wikipedia.org/wiki/Iptables">iptables</a> is a commonly used
          firewall on Linux and other UNIX-like systems. There is no shortage of <code>iptables</code>
          tutorials on the Web.
        </p>
        <p>
          Open ports, TCP and UDP connections of a node can be inspected using <a href="https://en.wikipedia.org/wiki/Netstat">netstat</a>,
          <a href="https://linux.die.net/man/8/ss">ss</a>, <a href="https://en.wikipedia.org/wiki/Lsof">lsof</a>.
        </p>
        <p>
          The following example uses <code>lsof</code> to display OS processes that listen on port 5672 and use IPv4:

<pre class="lang-ini">
sudo lsof -n -i4TCP:5672 | grep LISTEN
</pre>

          Similarly, for programs that use IPv6:

<pre class="lang-ini">
sudo lsof -n -i6TCP:5672 | grep LISTEN
</pre>

          On port 1883:

<pre class="lang-ini">
sudo lsof -n -i4TCP:1883 | grep LISTEN
</pre>

<pre class="lang-ini">
sudo lsof -n -i6TCP:1883 | grep LISTEN
</pre>


          If the above commands produce no output then no local OS processes listen on the given port.
        </p>
        <p>
          The following example uses <code>ss</code> to display listening TCP sockets that use IPv4 and their OS processes:

<pre class="lang-ini">
sudo ss --tcp -f inet --listening --numeric --processes
</pre>

          Similarly, for TCP sockets that use IPv6:

<pre class="lang-ini">
sudo ss --tcp -f inet6 --listening --numeric --processes
</pre>
        </p>
        <p>
          For the list of ports used by RabbitMQ and its various
          plugins, see above. Generally all ports used for external
          connections must be allowed by the firewalls and proxies.
        </p>

        <p>
          <a href="/cli.html">rabbitmqctl status</a>
          can be used to list configured ports as well.
        </p>

        <p>
        </p>
      </doc:subsection>

      <doc:subsection name="ip-routing">
        <doc:heading>IP Routing</doc:heading>

        <p>
          Messaging protocols supported by RabbitMQ use TCP and require IP routing between
          clients and RabbitMQ hosts to be functional. There are several tools and techniques
          that can be used to verify IP routing between two hosts. <a href="https://en.wikipedia.org/wiki/Traceroute">traceroute</a> and <a href="https://en.wikipedia.org/wiki/Ping_(networking_utility)">ping</a>
          are two common options available for many operating systems. Most routing table inspection tools are OS-specific.
        </p>

        <p>
          Note that both <code>traceroute</code> and <code>ping</code> use <a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol">ICMP</a>
          while RabbitMQ client libraries and inter-node connections use TCP.
          Therefore a successful <code>ping</code> run alone does not guarantee successful client connectivity.
        </p>

        <p>
          Both <code>traceroute</code> and <code>ping</code> have Web-based and GUI tools built on top.
        </p>
      </doc:subsection>

      <doc:subsection name="traffic-capture">
        <doc:heading>Capturing Traffic</doc:heading>

        <p>
          All network activity can be inspected, filtered and analyzed using a traffic capture.
        </p>

        <p>
          <a href="https://en.wikipedia.org/wiki/Tcpdump">tcpdump</a> and its GUI sibling <a href="https://www.wireshark.org">Wireshark</a>
          are the industry standards for capturing traffic, filtering and analysis. Both support all protocols supported by RabbitMQ.
          See the <a href="/amqp-wireshark.html">Using Wireshark with RabbitMQ</a> guide for an overview.
        </p>
      </doc:subsection>

      <doc:subsection name="tls">
        <doc:heading>TLS Connections</doc:heading>

        <p>
          For connections that use TLS there is a separate <a href="/troubleshooting-ssl.html">guide on troubleshooting TLS</a>.
        </p>

        <p>
          When adopting TLS it is important to make sure that clients
          use correct port to connect (see the list of ports above)
          and that they are instructed to use TLS (perform TLS
          upgrade). A client that is not configured to use TLS will
          successfully connect to a TLS-enabled server port but its connection
          will then time out since it never performs the TLS upgrade that the server
          expects.
        </p>

        <p>
          A TLS-enabled client connecting to a non-TLS enabled port will successfully
          connect and try to perform a TLS upgrade which the server does not expect, this
          triggering a protocol parser exception. Such exceptions will be logged by the server.
        </p>
      </doc:subsection>


      <doc:subsection name="inspecting-connections">
        <doc:heading>Inspecting Connections</doc:heading>
        <p>
          Open ports, TCP and UDP connections of a node can be inspected using <a href="https://en.wikipedia.org/wiki/Netstat">netstat</a>,
          <a href="https://linux.die.net/man/8/ss">ss</a>, <a href="https://en.wikipedia.org/wiki/Lsof">lsof</a>.
        </p>

        <p>
          The following example uses <code>netstat</code> to list all TCP connection sockets regardless of their state and interface.
          IP addresses will be displayed as numbers instead of being resolved to domain names. Program names will be printed next
          to numeric port values (as opposed to protocol names).

          <pre class="lang-bash">
sudo netstat --all --numeric --tcp --programs
</pre>

          Both inbound (client, peer nodes, CLI tools) and outgoing (peer nodes,
          Federation links and Shovels) connections can be inspected this way.
        </p>

        <p>
          <code>rabbitmqctl list_connections</code> and management UI can be used to inspect
          more connection properties, some of which are RabbitMQ- or messaging protocol-specific:

          <ul>
            <li>Network traffic flow, both inbound and outbound</li>
            <li>Messaging (application-level) protocol used</li>
            <li>Connection virtual host</li>
            <li>Time of connection</li>
            <li>Username</li>
            <li>Number of channels</li>
            <li>Client library details (name, version, capabilities)</li>
            <li>Effective heartbeat timeout</li>
            <li>TLS details</li>
          </ul>
        </p>

        <p>
          Combining connection information from management UI or CLI tools with those of <code>netstat</code> or <code>ss</code>
          can help troubleshoot misbehaving applications, application instances and client libraries.
        </p>
      </doc:subsection>

      <doc:subsection name="detecting-high-connection-churn">
        <doc:heading>Detecting High Connection Churn</doc:heading>
        <p>
          High connection churn (lots of connections opened and closed after a brief
          period of time) <a href="/networking.html#dealing-with-high-connection-churn">can lead to resource exhaustion</a>.
          It is therefore important to be able to identify such scenarios. <code>netstat</code> and <code>ss</code>
          are most popular options for <a href="troubleshooting-inspecting-connections">inspecting TCP connections</a>.
          A lot of connections in the <code>TIME_WAIT</code> state is a likely symptom of high connection churn.
          Lots of connections in states other than <code>ESTABLISHED</code> also might be a symptom worth investigating.
        </p>

        <p>
          Evidence of short lived connections can be found in RabbitMQ log files. E.g. here's an example
          of such connection that lasted only a few milliseconds:

<pre class="lang-ini">
2018-06-17 16:23:29.851 [info] &lt;0.634.0&gt; accepting AMQP connection &lt;0.634.0&gt; (127.0.0.1:58588 -> 127.0.0.1:5672)
2018-06-17 16:23:29.853 [info] &lt;0.634.0&gt; connection &lt;0.634.0&gt; (127.0.0.1:58588 -> 127.0.0.1:5672): user 'guest' authenticated and granted access to vhost '/'
2018-06-17 16:23:29.855 [info] &lt;0.634.0&gt; closing AMQP connection &lt;0.634.0&gt; (127.0.0.1:58588 -> 127.0.0.1:5672, vhost: '/', user: 'guest')
</pre>
        </p>
      </doc:subsection>
    </doc:section>
  </body>
</html>
