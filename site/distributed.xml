<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
]>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Distributed Messaging</title>
  </head>
  <body>
    <p class="intro">
      There are three ways in which RabbitMQ brokers can be connected
      on more than one machine: with clustering, with federation, and
      using the shovel. This page explains the purpose of each approach.
    </p>
    <p>
      Note that you do not need to pick a single approach - you can
      connect clusters together with federation, or the shovel, or both.
    </p>

    <h2>Clustering</h2>
    <p>
      <a href="clustering.html">Clustering</a> connects multiple
      machines together to form a single logical broker. Communication
      is via Erlang message-passing, so all nodes in the cluster must
      have the same Erlang cookie. The network links between machines
      in a cluster <b>must</b> be reliable, and all machines in the
      cluster must run the same versions of RabbitMQ and Erlang.
    </p>
    <p>
      Virtual hosts, exchanges, users, and permissions are
      automatically mirrored across all nodes in a cluster. Queues may
      be located on a single node, or <a href="ha.html">mirrored
      across multiple nodes</a>. A client connecting to any node in a
      cluster can see all queues in the cluster, even if they are not
      located on that node.
    </p>
    <p>
      Typically you would use clustering for high availability and
      increased throughput, with machines in a single location.
    </p>

    <h2>Federation</h2>
    <p>
      <a href="federation.html">Federation</a>
      allows an exchange on one broker to receive messages published
      to an exchange on another (the brokers may be individual machines, or
      clusters). Communication is via AMQP (with optional SSL), so for
      two exchanges to federate they must be granted appropriate users
      and permissions.
    </p>
    <p>
      Federated exchanges are connected with one way point-to-point
      links. By default, messages will only be forwarded over a
      federation link once, but this can be increased to allow for
      more complex routing topologies.
    </p>
    <p>
      Some messages may not be forwarded over the link;
      if a message would not be routed to a queue after reaching the
      federated exchange, it will not be forwarded in the first place.
    </p>
    <p>
      Typically you would use federation to link brokers across the
      internet for pub/sub messaging.
    </p>

    <h2>The Shovel</h2>
    <p>
      Connecting brokers
      with <a href="shovel.html">the
      shovel</a> is conceptually similar to connecting them with
      federation. However, the shovel works at a lower level.
    </p>
    <p>
      Whereas federation aims to mirror messages from one exchange to
      another (with optimisations to ensure that messages are not
      forwarded unless needed), the shovel simply consumes messages
      from a queue on one broker, and forwards them to an exchange on
      another.
    </p>
    <p>
      Typically you would use the shovel to link brokers across the
      internet when you need more control than federation provides.
    </p>

    <h2>Summary</h2>
    <table>
      <tr>
        <th>Federation / Shovel</th>
        <th>Clustering</th>
      </tr>
      <tr>
        <td>
          Brokers are logically separate and may have different owners.
        </td>
        <td>
          A cluster forms a single logical broker.
        </td>
      </tr>
      <tr>
        <td>
          Brokers can run different versions of RabbitMQ and Erlang.
        </td>
        <td>
          Nodes must run the same version of RabbitMQ, and frequently Erlang.
        </td>
      </tr>
      <tr>
        <td>
          Brokers can be connected via unreliable WAN
          links. Communication is via AMQP (optionally secured by
          SSL), requiring appropriate users and permissions to be set up.
        </td>
        <td>
          Brokers must be connected via reliable LAN
          links. Communication is via Erlang internode messaging,
          requiring a shared Erlang cookie.
        </td>
      </tr>
      <tr>
        <td>
          Brokers can be connected in whatever topology you
          arrange. Links can be one- or two-way.
        </td>
        <td>
          All nodes connect to all other nodes in both directions.
        </td>
      </tr>
      <tr>
        <td>
          Chooses Availability and Partition Tolerance from
          the <a href="http://en.wikipedia.org/wiki/CAP_theorem">CAP
          theorem</a>.
        </td>
        <td>
          Chooses Consistency and Availability from the CAP theorem.
        </td>
      </tr>
      <tr>
        <td>
          Some exchanges in a broker may be federated while some may be local.
        </td>
        <td>
          Clustering is all-or-nothing.
        </td>
      </tr>
      <tr>
        <td>
          A client connecting to any broker can only see queues in that broker.
        </td>
        <td>
          A client connecting to any node can see queues on all nodes.
        </td>
      </tr>
    </table>
  </body>
</html>
