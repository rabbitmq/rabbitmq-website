<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (C) 2007-2015 Pivotal Software, Inc. 

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License, 
Version 2.0 (the "License”); you may not use this file except in compliance 
with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<?xml-stylesheet type="text/xml" href="page.xsl"?>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Queue Length Limit</title>
  </head>
  <body>
    <p>
      The maximum length of a queue can be limited to a set number of
      messages, or a set number of bytes (the total of all message
      body lengths, ignoring message properties and any overheads), or
      both.
    </p>

    <p>
      For any given queue, the maximum length (of either type) can be
      defined by clients using the queue's arguments, or in the server
      using <a href="parameters.html#policies">policies</a>. In the
      case where both policy and arguments specify a maximum length,
      the minimum of the two values is applied.
    </p>

    <p>
      In all cases the number of <i>ready</i> messages is used;
      unacknowledged messages do not count towards the limit. The
      fields <code>messages_ready</code> and
      <code>message_bytes_ready</code> from <code>rabbitmqctl
      list_queues</code> and the management API show the values that
      would be limited.
    </p>

    <p>
      Messages will be dropped or dead-lettered from the front of the
      queue to make room for new messages once the limit is reached.
    </p>

    <h3>Configuration using arguments</h3>
    <p>
      Maximum number of messages can be set by supplying the
      <code>x-max-length</code> queue declaration argument with a
      non-negative integer value.
    </p>
    <p>
      Maximum length in bytes can be set by supplying the
      <code>x-max-length-bytes</code> queue declaration argument with a
      non-negative integer value.
    </p>
    <p>
      If both arguments are set then both will apply; whichever limit
      is hit first will be enforced.
    </p>
    <p>
      This example in Java declares a queue with a maximum length
      of 10 messages:
    </p>
    <pre class="sourcecode">
Map&lt;String, Object> args = new HashMap&lt;String, Object>();
args.put("x-max-length", 10);
channel.queueDeclare("myqueue", false, false, false, args);</pre>

      <h3>Configuration using policy</h3>

      <p>
        To specify a maximum length using policy, add the key
        <code>max-length</code> and / or <code>max-length-bytes</code>
        to a policy definition. For example:
      </p>

      <table>
        <tr>
          <th>rabbitmqctl</th>
          <td>
            <pre>rabbitmqctl set_policy Ten "^one-meg$" '{"max-length-bytes":1000000}' --apply-to queues</pre>
          </td>
        </tr>
        <tr>
          <th>rabbitmqctl (Windows)</th>
          <td>
            <pre>rabbitmqctl set_policy Ten "^one-meg$" "{""max-length-bytes"":1000000}" --apply-to queues</pre>
          </td>
        </tr>
      </table>

      <p>
        This ensures the queue called <code>one-meg</code> can contain
        no more than 1MB of message bodies.
      </p>

      <p>
        Policies can also be defined using the management plugin, see
        the <a href="parameters.html#policies">policy
        documentation</a> for more details.
      </p>
  </body>
</html>
