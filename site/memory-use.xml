<?xml-stylesheet type="text/xml" href="page.xsl"?>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Memory Use</title>
  </head>
  <body>
    <p>
      RabbitMQ can report on its own memory use, to let you see where
      your system is using memory.
    </p>
    <p>
      Note that all measurements are somewhat approximate, based on
      values returned by the underlying Erlang virtual machine;
      however they should still be accurate enough to be useful.
    </p>
    <p>
      You can obtain the memory use report by
      invoking <code>rabbitmqctl status</code>, or by looking at the
      node details page in
      the <a href="management.html">management</a> web UI. Memory use
      is split into the following categories (which do not overlap):
    </p>

    <h3>Connections and Channels</h3>
    <p>
      This includes memory used by incoming connections and
      channels, and outgoing ones if the appropriate plugins are
      loaded. It also includes memory used by the SSL system.
    </p>

    <h3>Queues</h3>
    <p>
      Memory used by individual queue processes. Note that queues
      will swap their contents out to disc when under memory
      pressure. Message bodies do not show up here but in
      Binaries.
    </p>

    <h3>Plugins</h3>
    <p>
      Memory used by plugins (apart from the Erlang client which
      is counted under Connections and channels, and the
      management database which is counted separately).
    </p>

    <h3>Other process memory</h3>
    <p>
      Memory belonging to processes not counted above, and memory
      assigned to "processes" by the Erlang VM, but not to any one
      process. Memory that has recently been garbage collected can
      show up here briefly.
    </p>

    <h3>Mnesia</h3>
    <p>
      Mnesia keeps an in-memory copy of all its data (even on disc
      nodes). Typically this will only be large when there are a
      large number of queues, exchanges, bindings, users or
      virtual hosts.
    </p>

    <h3>Message store index</h3>
    <p>
      The default message store implementation keeps an in-memory
      index of all messages, including those paged out to disc.
    </p>

    <h3>Management database</h3>
    <p>
      The management database (if the management plugin is
      loaded). In a cluster, this will only be present on one
      node.
    </p>

    <h3>Other ETS tables</h3>
    <p>
      Other in-memory tables besides the three sets above. Note
      that due to a bug in current versions of the Erlang runtime,
      some memory will be counted under this heading for all
      tables, including the three sets above.
    </p>

    <h3>Binaries</h3>
    <p>
      Memory used by shared binary data in the Erlang
      VM. In-memory message bodies show up here.
    </p>

    <h3>Code</h3>
    <p>
      Memory used by code. Should be fairly constant.
    </p>

    <h3>Atoms</h3>
    <p>
      Memory used by atoms. Should be fairly constant.
    </p>

    <h3>Other system memory</h3>
    <p>
      Other memory used by Erlang. One contributor to this value
      is the number of available file descriptors.
    </p>
  </table>
</body>
</html>
