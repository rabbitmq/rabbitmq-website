<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!--
Copyright (C) 2007-2015 Pivotal Software, Inc.

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License,
Version 2.0 (the "License”); you may not use this file except in compliance
with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<html xmlns="http://www.w3.org/1999/xhtml"
    xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
    xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Exchange to Exchange Bindings</title>
  </head>
  <body>
    <doc:section name="classoverview">
      <doc:heading>Overview</doc:heading>
      <p>
        The <code>queue.bind</code> method binds a queue to an
        exchange so that messages flow (subject to various criteria)
        from the exchange (the <em>source</em>) to the queue (the
        <em>destination</em>). We have introduced an
        <code>exchange.bind</code> method which binds one
        exchange to another exchange. The binding is semantically
        identical to exchange-to-queue bindings: unidirectional,
        binding keys and exchange types operate as normal, but both
        endpoints (the source and destination) of the binding are
        exchanges. This allows far richer routing topologies to be
        created. Note the <code>source</code> and
        <code>destination</code> fields in the
        <code>exchange.bind</code> method reflect the flow of
        messages: from the exchange at the source, and to the
        exchange at the destination.
      </p>

      <p>
        Just like with <code>queue.bind</code>, multiple distinct
        bindings can be created between the same
        binding-endpoints. We detect and eliminate cycles during
        message delivery, and ensure that transitively, over any
        routing topology, for every queue to which a given message
        is routed, each queue will receive exactly one copy of that
        message. Exchanges which are declared as
        <code>auto-delete</code> will still be removed when all
        their bindings are removed, regardless of whether those
        bindings are to queues or exchanges. Note that an
        auto-delete exchange will only be deleted when bindings for
        which the exchange is the <em>source</em> are removed: if
        you add exchange-to-exchange bindings for which the given
        exchange is the <em>destination</em> then that exchange will
        not be auto-deleted on removal of those bindings.
      </p>
    </doc:section>

    <doc:section name="java-example">
      <doc:heading>Java Client Example</doc:heading>
      <p>
        Use the <code>Channel#exchangeBind</code> method.
        The following example binds an exchange <code>"destination"</code>
        to <code>"source"</code> with routing key <code>"routingKey"</code>.
      </p>

<pre class="sourcecode">
Channel ch = conn.createChannel();
ch.exchangeBind("destination", "source", "routingKey");
</pre>
    </doc:section>

    <doc:section name="dotnet-example">
      <doc:heading>.NET Client Example</doc:heading>
      <p>
        Use the <code>IModel#ExchangeBind</code> method.
        The following example binds an exchange <code>"destination"</code>
        to <code>"source"</code> with routing key <code>"routingKey"</code>.
      </p>

<pre class="sourcecode">
var ch = conn.CreateChannel();
ch.ExchangeBind("destination", "source", "routingKey");
</pre>
    </doc:section>
  </body>
</html>
