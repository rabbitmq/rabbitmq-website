<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xml" href="page.xsl"?>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Consumer Prefetch</title>
  </head>
  <body>
    <p class="intro">
      A more natural and efficient way to limit unacknowledged
      messages.
    </p>

    <p>
      AMQP specifies the <code>basic.qos</code> method to allow you to
      limit the number of unacknowledged messages on a channel (or
      connection) when consuming (aka "prefetch count"). Unfortunately
      the channel is not the ideal scope for this - since a single
      channel may consume from multiple queues, the channel and the
      queue(s) need to coordinate with each other for every message
      sent to ensure they don't go over the limit. This is slow on a
      single machine, and very slow when consuming across a cluster.
    </p>

    <p>
      Furthermore for many uses it is simply more natural to specify
      a prefetch count that applies to each consumer.
    </p>

    <p>
      Therefore RabbitMQ redefines the meaning of the
      <code>global</code> flag in the <code>basic.qos</code> method:
    </p>

    <table class="styled-table">
      <tr>
        <th><code>global</code></th>
        <th>Meaning of <code>prefetch_count</code> in AMQP 0-9-1</th>
        <th>Meaning of <code>prefetch_count</code> in RabbitMQ</th>
      </tr>
      <tr>
        <th>false</th>
        <td>shared across all consumers on the channel</td>
        <td>applied separately to each new consumer on the channel</td>
      </tr>
      <tr>
        <th>true</th>
        <td>shared across all consumers on the connection</td>
        <td>shared across all consumers on the channel</td>
      </tr>
    </table>

    <p>
      Note that the default value for the <code>global</code> flag is
      <code>false</code> in most APIs.
    </p>

    <h3>Example - single consumer</h3>

    <p>
      The following basic (Java) example will receive a maximum of 10
      unacknowledged messages at once:
    </p>

      <pre class="sourcecode">
Channel channel = ...;
Consumer consumer = ...;
channel.basicQos(10); // Per consumer limit
channel.basicConsume("my-queue", false, consumer);</pre>

    <h3>Example - multiple independent consumers</h3>

    <p>
      This example starts two consumers on the same channel, each of
      which will independently receive a maximum of 10 unacknowledged
      messages at once:
    </p>

      <pre class="sourcecode">
Channel channel = ...;
Consumer consumer1 = ...;
Consumer consumer2 = ...;
channel.basicQos(10); // Per consumer limit
channel.basicConsume("my-queue1", false, consumer1);
channel.basicConsume("my-queue2", false, consumer2);</pre>

    <h3>Example - multiple consumers sharing the limit</h3>

    <p>
      The AMQP specification does not explain what happens if you
      invoke <code>basic.qos</code> multiple times with different
      <code>global</code> values. RabbitMQ interprets this as meaning
      that the two prefetch limits should be enforced independently of
      each other; consumers will only receive new messages when neither
      limit on unacknowledged messages has been exceeded.
    </p>

    <p>
      For example:
    </p>

      <pre class="sourcecode">
Channel channel = ...;
Consumer consumer1 = ...;
Consumer consumer2 = ...;
channel.basicQos(10, false); // Per consumer limit
channel.basicQos(15, true);  // Per channel limit
channel.basicConsume("my-queue1", false, consumer1);
channel.basicConsume("my-queue2", false, consumer2);</pre>

    <p>
      These two consumers will only ever have 15 unacknowledged
      messages between them, with a maximum of 10 messages for each
      consumer. This will be slower than the above examples, due to
      the additional overhead of coordinating between the channel and
      the queues to enforce the global limit.
    </p>

  </body>
</html>
