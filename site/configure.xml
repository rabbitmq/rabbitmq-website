<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
]>
<!--
Copyright (c) 2007-2016 Pivotal Software, Inc.

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License,
Version 2.0 (the "License”); you may not use this file except in compliance
with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>RabbitMQ Configuration</title>
  </head>
  <body show-in-this-page="true">
      <doc:section name="introduction">
        <doc:heading>Overview</doc:heading>
      <p>
      RabbitMQ comes with default built-in settings which will probably be
			sufficient for running your RabbitMQ server effectively. If your server
			runs fine, then you probably don't need any further configuration.
      </p>
      <p>
          RabbitMQ provides three general ways to customise the server:
      <dl>
          <dt>
              <a href="#define-environment-variables">Environment Variables</a>
          </dt>
          <dd>
              define ports, file locations and names (taken from the shell, or
	      set in <code>rabbitmq-env.conf</code>/<code>rabbitmq-env-conf.bat</code>)
          </dd>
					<br/>
					<dt>
              <a href="#configuration-file">Configuration File(s)</a>
          </dt>
          <dd>
							defines server component and plugin settings for settings for permissions,
							limits and clusters
          </dd>
					<br/>
          <dt>
              <a href="parameters.html">Runtime Parameters and Policies</a>
          </dt>
          <dd>
              defines cluster-wide settings that can be changed at run time
          </dd>
      </dl>

      Most settings are configured using the first two methods. This guide,
      therefore, focuses on them.
      </p>

      <doc:subsection name="config-file-location">
        <doc:heading>Config File Locations</doc:heading>
        <p>
          <a href="/configure.html#config-location">Default config file locations</a>
          vary between operating systems and <a
          href="/download.html">package types</a>.

          This topic is covered in more detail in the rest of this guide.
        </p>

        <p>
          To verify the effective RabbitMQ config file location, see the section below.
        </p>
      </doc:subsection>

      <doc:subsection name="verify-configuration">
        <doc:heading>How to Find the Config File</doc:heading>
        <p>
          The active configuration file can be verified by inspecting the
          RabbitMQ log file. It will show up in the <a href="relocate.html">log file</a>
          at the top, along with the other broker boot log entries. For example:

           <pre class="example">
node           : rabbit@example
home dir       : /var/lib/rabbitmq
config file(s) : /etc/rabbitmq/advanced.config
               : /etc/rabbitmq/rabbitmq.conf
</pre>

          If the log file cannot be found or read by RabbitMQ, the log entry
          will say so:

           <pre class="example">
node           : rabbit@example
home dir       : /var/lib/rabbitmq
config file(s) : /var/lib/rabbitmq/hare.conf (not found)</pre>
        </p>
      </doc:subsection>
      </doc:section>

      <doc:section name="customise-environment">
        <doc:heading>Customise RabbitMQ Environment</doc:heading>

        <p>
          Certain server parameters can be configured using environment variables:
          node name, RabbitMQ configuration file location, AMQP 0-9-1 and inter-node communication ports,
          and so on.
        </p>

        <doc:subsection name="customise-general-unix-environment">
        <doc:heading>Unix (general)</doc:heading>
          <p>
              On Unix-based systems (including Linux and MacOSX) you can create/edit
              <code><span class="path">rabbitmq-env.conf</span></code>
              to define environment variables.
              Its <a href="#config-location">location</a> is configurable
              using the <span class="envvar">RABBITMQ_CONF_ENV_FILE</span> environment variable.
            </p>
            <p>
							Use the standard environment variable names, but without the <code>RABBITMQ_</code>
							prefix. For example, the <code>RABBITMQ_CONFIG_FILE</code> parameter appears
							below as <code>CONFIG_FILE</code>:
              <pre class="sourcecode">
#example rabbitmq-env.conf file entries
#Rename the node
NODENAME=bunny@myhost
#Config file location and new filename bunnies.config
CONFIG_FILE=/etc/rabbitmq/testdir/bunnies</pre>
							More info on using <code>rabbitmq-env.conf</code> can be found <a href="man/rabbitmq-env.conf.5.man.html">here</a>.
            </p>
        </doc:subsection>

        <doc:subsection name="customise-windows-environment">
        <doc:heading>Windows</doc:heading>
            <p>
               If you need to customise names, ports or locations, it is easiest
               to configure environment variables in the Windows dialogue:
               Start&#xA0;>&#xA0;Settings&#xA0;>&#xA0;Control&#xA0;Panel&#xA0;>&#xA0;System&#xA0;>&#xA0;Advanced&#xA0;>&#xA0;Environment&#xA0;Variables. Then create or edit the system variable name and value.
             </p>
            <p>
              Alternatively, you can create/edit
              <code><span class="path">rabbitmq-env-conf.bat</span></code>
              to define environment variables.
              Its <a href="#config-location">location</a> is configurable
              using the <span class="envvar">RABBITMQ_CONF_ENV_FILE</span> environment variable.
            </p>
            <p>
							<b>NOTE:</b> <em>For environment changes to take effect on Windows, the service must be
              re-installed</em>. It is <em>not sufficient</em> to restart the service.

              This can be done using the installer or on the command line
              with administrator permissions:
              <ul>
                <li><a href="https://technet.microsoft.com/en-us/library/cc947813%28v=ws.10%29.aspx">Start an admin command prompt</a></li>
                <li>cd into the sbin folder under the <em>RabbitMQ server installation directory</em> (e.g. <code>C:\Program Files (x86)\RabbitMQ Server\rabbitmq_server-&version-server;\sbin</code>)</li>
                <li>Run <code>rabbitmq-service.bat remove</code></li>
                <li>Set environment variables via command line, i.e. run commands like the following: <code>set RABBITMQ_BASE=c:\Data\RabbitMQ</code></li>
                <li>Run <code>rabbitmq-service.bat install</code></li>
              </ul>

              Alternatively, if the new configuration needs to take effect after the next broker restart,
              the service removal step can be skipped:

              <ul>
                <li><a href="https://technet.microsoft.com/en-us/library/cc947813%28v=ws.10%29.aspx">Start an admin command prompt</a></li>
                <li>cd into the sbin folder under <em>RabbitMQ server installation directory</em></li>
                <li>Set environment variables via command line</li>
                <li>Run <code>rabbitmq-service.bat install</code>, which will only update service parameters</li>
              </ul>
            </p>
        </doc:subsection>
      </doc:section>

      <doc:section name="define-environment-variables">
        <doc:heading>RabbitMQ Environment Variables</doc:heading>
        <p>
          RabbitMQ environment variable names have the
          prefix <code>RABBITMQ_</code>. A typical variable
          called <code>RABBITMQ_</code><i>var_name</i> is set as
          follows:
          <ul>
            <li>
              a shell environment variable called
              <code>RABBITMQ_</code><i>var_name</i> is used if it is defined;
            </li>
            <li><i>otherwise</i>, a variable called <i>var_name</i> is used if
              it is set in the <code>rabbitmq-env.conf</code> file;</li>
            <li><i>otherwise</i>, a system-specified default value is used.</li>
          </ul>
          <p>
            In this way, variables set in the shell environment take
            priority over variables set
            in <code>rabbitmq-env.conf</code>, which in turn over-ride
            RabbitMQ built-in defaults.
          </p>
        </p>
        <p>
          It is unlikely you will need to set any of these environment
          variables. If you have non-standard requirements, then RabbitMQ
          environment variables include, but are not limited to:
        </p>
        <div>
          <table>
            <tr><th>Name</th><th>Default</th><th>Description</th></tr>

            <tr>
              <td>RABBITMQ_NODE_IP_ADDRESS</td>
              <td>
                the empty string, meaning that it should bind to all network interfaces.
              </td>
              <td>
                Change this if you only want to bind to one network interface.
                Binding to two or more interfaces can be set up in the configuration file.
              </td>
            </tr>

            <tr>
              <td>RABBITMQ_NODE_PORT</td>
              <td>5672</td>
              <td></td>
            </tr>

            <tr>
              <td>RABBITMQ_DIST_PORT</td>
              <td>RABBITMQ_NODE_PORT + 20000</td>
              <td>
                Port used for inter-node and CLI tool communition. Ignored if your config
                file sets <code>kernel.inet_dist_listen_min</code> or
                <code>kernel.inet_dist_listen_max</code> keys. See <a href="/networking.html">Networking</a> for details.
              </td>
            </tr>

            <tr>
              <td>RABBITMQ_NODENAME</td>
              <td>
                <ul>
                  <li>
                    <b>Unix*:</b>
                    <code>rabbit@<span class="envvar">$HOSTNAME</span></code>
                  </li>
                  <li>
                    <b>Windows:</b>
                    <code>rabbit@<span class="envvar">%COMPUTERNAME%</span></code>
                  </li>
                </ul>
              </td>
              <td>
                The node name should be unique per
                erlang-node-and-machine combination. To run multiple nodes,
                see the
                <a href="clustering.html">clustering guide</a>.
              </td>
            </tr>

            <tr>
              <td>RABBITMQ_CONFIG_FILE</td>
              <td>
                <ul>
                  <li><b>Generic UNIX</b> - <span class="path"><span class="envvar">$RABBITMQ_HOME</span>/etc/rabbitmq/rabbitmq</span>
                  </li>
                  <li><b>Debian</b> - <span class="path">/etc/rabbitmq/rabbitmq</span></li>
                  <li><b>RPM</b> - <span class="path">/etc/rabbitmq/rabbitmq</span></li>
                  <li>
                    <b>Mac OS X (Homebrew)</b> - <span class="path"><span
                    class="envvar">${install_prefix}</span>/etc/rabbitmq/rabbitmq</span>,
                    the Homebrew prefix is usually <code>/usr/local</code>
                  </li>
                  <li><b>Windows</b> - <span class="path"><span class="envvar">%APPDATA%</span>\RabbitMQ\rabbitmq</span></li>
                </ul>
              </td>
              <td>
                Main RabbitMQ config file path without the <code>.conf</code>
                (or <code>.config</code>, for the classic format) extension.
                For example, it should be <span class="path">/data/rabbitmq/rabbitmq</span>,
                not <span class="path">/data/rabbitmq/rabbitmq.conf</span>.
              </td>
            </tr>

            <tr>
              <td>RABBITMQ_ADVANCED_CONFIG_FILE</td>
              <td>
                <ul>
                  <li><b>Generic UNIX</b> - <span class="path"><span class="envvar">$RABBITMQ_HOME</span>/etc/rabbitmq/advanced</span>
                  </li>
                  <li><b>Debian</b> - <span class="path">/etc/rabbitmq/advanced</span></li>
                  <li><b>RPM</b> - <span class="path">/etc/rabbitmq/advanced</span></li>
                  <li>
                    <b>Mac OS X (Homebrew)</b> - <span class="path"><span
                    class="envvar">${install_prefix}</span>/etc/rabbitmq/advanced</span>,
                    the Homebrew prefix is usually <code>/usr/local</code>
                  </li>
                  <li><b>Windows</b> - <span class="path"><span class="envvar">%APPDATA%</span>\RabbitMQ\advanced</span></li>
                </ul>
              </td>
              <td>
                "Advanced" (Erlang term-based) RabbitMQ config file path without the <code>.config</code> file extension.
                For example, it should be <span class="path">/data/rabbitmq/advanced</span>,
                not <span class="path">/data/rabbitmq/advanced.config</span>.
              </td>
            </tr>

            <tr>
              <td>RABBITMQ_CONF_ENV_FILE</td>
              <td>
                <ul>
                  <li><b>Generic UNIX</b> - <span class="path"><span class="envvar">$RABBITMQ_HOME</span>/etc/rabbitmq/rabbitmq-env.conf</span>
                  </li>
                  <li><b>Debian</b> - <span class="path">/etc/rabbitmq/rabbitmq-env.conf</span></li>
                  <li><b>RPM</b> - <span class="path">/etc/rabbitmq/rabbitmq-env.conf</span></li>
                  <li>
                    <b>Mac OS X (Homebrew)</b> - <span class="path"><span
                    class="envvar">${install_prefix}</span>/etc/rabbitmq/rabbitmq-env.conf</span>,
                    the Homebrew prefix is usually <code>/usr/local</code>
                  </li>
                  <li><b>Windows</b> - <span class="path"><span class="envvar">%APPDATA%</span>\RabbitMQ\rabbitmq-env-conf.bat</span></li>
                </ul>
              </td>
              <td>
                Location of the file that contains environment variable definitions (without the <span class="envvar">RABBITMQ_</span>
                prefix). Note that the file name on Windows is different from other operating systems.
              </td>
            </tr>

            <tr>
              <td>RABBITMQ_USE_LONGNAME</td>
              <td></td>
              <td>
                When set to <code>true</code> this will cause RabbitMQ
                to use fully qualified names to identify nodes. This
                may prove useful on EC2. Note that it is not possible
                to switch between using short and long names without
                resetting the node.
              </td>
            </tr>

            <tr>
              <td>RABBITMQ_SERVICENAME</td>
              <td><b>Windows Service:</b>
                RabbitMQ</td>
              <td>
                The name of the installed service. This will appear in
                <code>services.msc</code>.
            </td>
            </tr>

            <tr>
              <td>RABBITMQ_CONSOLE_LOG</td>
              <td><b>Windows Service:</b></td>
              <td>
                Set this variable to <code>new</code> or <code>reuse</code>
                to redirect console output from the server to a file named
                <span class="envvar">%RABBITMQ_SERVICENAME%</span>. Debug in the
                default <b>RABBITMQ_BASE</b> directory.
                <ul>
                  <li>If not set, console output from the server will be discarded (default).</li>
                  <li><code>new</code> A new file will be created
                    each time the service starts.</li>
                  <li><code>reuse</code> The file will be overwritten each time
                    the service starts.</li>
                </ul>
              </td>
            </tr>

            <tr>
              <td>RABBITMQ_CTL_ERL_ARGS</td>
              <td>None</td>
              <td>
                Parameters for the <code>erl</code> command used when invoking
                <code>rabbitmqctl</code>. This should be overridden for
                debugging purposes only.
              </td>
            </tr>

            <tr>
              <td>RABBITMQ_SERVER_ERL_ARGS</td>
              <td>
                <ul>
                  <li><b>Unix*:</b>
                    <span class="sourcecode">"+K true +A30 +P 1048576 -kernel inet_default_connect_options [{nodelay,true}]"</span>
                  </li>
                  <li><b>Windows:</b> None</li>
                </ul>
              </td>
              <td>
                Standard parameters for the <code>erl</code> command used when
                invoking the RabbitMQ Server. This should be overridden for
                debugging purposes only. Overriding this variable
                <em>replaces</em> the default value.
              </td>
            </tr>

            <tr>
              <td>RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS</td>
              <td>
                <ul>
                  <li><b>Unix*:</b> None</li>
                  <li><b>Windows:</b> None</li>
                </ul>
              </td>
              <td>
                Additional parameters for the <code>erl</code> command used when
                invoking the RabbitMQ Server. The value of this variable
                is <em>appended</em> to the default list of arguments (<b>RABBITMQ_SERVER_ERL_ARGS</b>).
              </td>
            </tr>

            <tr>
              <td>RABBITMQ_SERVER_START_ARGS</td>
              <td>None</td>
              <td>
                Extra parameters for the <code>erl</code> command used when
                invoking the RabbitMQ Server. This will not override
                <b>RABBITMQ_SERVER_ERL_ARGS</b>.
              </td>
            </tr>
          </table>
          * Unix, Linux, MacOSX
          <p>
            In addition, there are several environment variables which
            tell RabbitMQ <a href="relocate.html">where to locate its
            database, log files, plugins, configuration etc</a>.
          </p>

          <p>
            Other variables upon which RabbitMQ depends are:
          </p>
          <table>
            <th>Name</th><th>Default</th><th>Description</th>

            <tr>
              <td>HOSTNAME</td>
              <td><ul>
                  <li><b>Unix, Linux:</b> `env&#xA0;hostname`</li>
                  <li><b>MacOSX:</b> `env&#xA0;hostname&#xA0;-s`</li>
                </ul>
              </td>
              <td>The name of the current machine</td>
            </tr>

            <tr>
              <td>COMPUTERNAME</td>
              <td><b>Windows:</b> localhost</td>
              <td>The name of the current machine</td>
            </tr>

            <tr>
              <td>ERLANG_SERVICE_MANAGER_PATH</td>
              <td><b>Windows Service:</b>
                <span class="path">
                  <span class="envvar">%ERLANG_HOME%</span>\erts-<var>x.x.x</var>\bin</span>
              </td>
              <td>
                This path is the location of <code>erlsrv.exe</code>,
                the Erlang service wrapper script.
              </td>
            </tr>
          </table>
        </div>
      </doc:section>

      <doc:section name="configuration-files">
        <doc:heading>Configuration File(s)</doc:heading>

        <doc:subsection name="config-file-intro">
          <doc:heading>Introduction</doc:heading>
          <p>
            While some settings in RabbitMQ can be tuned using environment variables,
            most are configured using the configuration file <code>rabbitmq.conf</code>.
            This includes core server configuration as well as plugins.
            The sections below cover the file format, how to configure things to which
            the format isn't well-suited, where to find examples, and so on.
          </p>
        </doc:subsection>

        <doc:subsection name="config-file-formats">
          <doc:heading>The New and Old Config File Formats</doc:heading>
          <p>
            Prior to RabbitMQ 3.7.0, RabbitMQ config file was named
            <code>rabbitmq.config</code> and was a <a
            href="http://www.erlang.org/doc/man/config.html">standard Erlang
            configuration file</a>. It is still possible to use this
            format with versions older than 3.7.0 to maintain backwards
            compatibility. Those running 3.7.0 or later are encouraged
            to consider the new sysctl format first.
          </p>
          <p>
            The new format is easier to generate for tools such as Chef, Puppet, or BOSH.
            Compare

            <pre class="sourcecode">
ssl_options.cacertfile           = /path/to/testca/cacert.pem
ssl_options.certfile             = /path/to/server/cert.pem
ssl_options.keyfile              = /path/to/server/key.pem
ssl_options.verify               = verify_peer
ssl_options.fail_if_no_peer_cert = true
</pre>

and

<pre class="sourcecode">
  [
    {rabbit, [{ssl_options, [{cacertfile,           "/path/to/testca/cacert.pem"},
                             {certfile,             "/path/to/server/cert.pem"},
                             {keyfile,              "/path/to/server/key.pem"},
                             {verify,               verify_peer},
                             {fail_if_no_peer_cert, true}]}]}
  ].
</pre>
          </p>
          <p>
            While the new config format is more convenient for humans to edit
            and machines to generate, it is also relatively limited compared
            to the classic config format used prior to RabbitMQ 3.7.0. For
            example, when configuring <a href="/ldap.html">LDAP support</a>,
            it may be necessary to use deeply nested data structures to
            express desired configuration. To accommodate this need,
            RabbitMQ still supports the classic <code>rabbitmq.config</code>
            config files as well as ability to use both formats at the same time
            (<code>advanced.config</code>). This is covered in more detail in the following sections.
          </p>
        </doc:subsection>

        <doc:subsection name="config-file">
        <doc:heading>The rabbitmq.conf File</doc:heading>
        <p>
          The configuration file <code>rabbitmq.conf</code>
          allows the RabbitMQ server and plugins to be configured.
          Starting with RabbitMQ 3.7.0, the format is in the <a href="https://github.com/basho/cuttlefish/wiki/Cuttlefish-for-Application-Users">sysctl format</a>.

          The syntax can be briefly explained in 3 lines:

          <ul>
            <li>Everything you need to know about a single setting is on one line</li>
            <li>Lines are structured <code>Key = Value</code></li>
            <li>Any line starting with # is a comment</li>
          </ul>
        </p>
        <p>
          A minimalistic example configuration file follows:
        </p>
        <p>
          <pre class="sourcecode">
listeners.tcp.default = 5673
</pre>
        </p>
        <p>
          This example will alter the port RabbitMQ listens on for
          AMQP 0-9-1 client connections from 5672 to 5673.
        </p>
        <p>
          To override the main RabbitMQ config file location, use the <span class="envvar">RABBITMQ_CONFIG_FILE</span>
          environment variable.
        </p>
        <p>
           Note that this configuration file is not the same as the environment
           configuration file, <code>rabbitmq-env.conf</code>, which
           can be used to set environment variables on non-Windows
           systems.
        </p>
        <p>
            The RabbitMQ server source repository contains <a
            href="https://github.com/rabbitmq/rabbitmq-server/blob/master/docs/rabbitmq.conf.example">an
            example rabbitmq.conf file</a> named
            <code>rabbitmq.conf.example</code>. It contains examples of
            most of the configuration items you might want to set
            (with some very obscure ones omitted), along with
            documentation for those settings.
          </p>
        </doc:subsection>

        <doc:subsection name="advanced-config-file">
          <doc:heading>The advanced.config File</doc:heading>
          <p>
            Some configuration settings are not possible or are difficult to configure
            using the sysctl format. As such, it is possible to use an additional
            config file in the Erlang term format (same as <code>rabbitmq.config</code>).
            That file is commonly named <code>advanced.config</code>. It will be merged
            with the configuration provided in <code>rabbitmq.conf</code>.
          </p>
          <p>
            The RabbitMQ server source repository contains <a
            href="https://github.com/rabbitmq/rabbitmq-server/blob/master/docs/advanced.config.example">an
            example advanced.config file</a> named
            <code>advanced.config.example</code>. It focuses on the
            options that are typically set using the advanced config.
          </p>
          <p>
            To override the advanced config file location, use the <span class="envvar">RABBITMQ_ADVANCED_CONFIG_FILE</span>
            environment variable.
          </p>
        </doc:subsection>

        <doc:subsection name="erlang-term-config-file">
          <doc:heading>The rabbitmq.config (Classic Format) File</doc:heading>
          <p>
            RabbitMQ 3.7.0 and later versions still support the
            classic configuration file format, known as
            <code>rabbitmq.config</code>. It is used exactly <a href="http://previous.rabbitmq.com/v3_5_7/configure.html">the same
            way as in earlier versions</a>: export
            <code>RABBITMQ_CONFIG_FILE</code> to point to the file
            with out the <code>.config</code> extension.
          </p>
          <p>
            The RabbitMQ server source repository contains <a
            href="https://github.com/rabbitmq/rabbitmq-server/blob/master/docs/rabbitmq.config.example">an
            example configuration file</a> named
            <code>rabbitmq.config.example</code>. It contains an
            example of most of the configuration items in the classic
            config format.
          </p>
          <p>
Here's how AMQP 0-9-1 listener port is configured using the Erlang term format:

<pre class="sourcecode">
  [
    {rabbit, [{tcp_listeners, [5673]}]}
  ].
</pre>

          </p>
        </doc:subsection>

        <doc:subsection name="config-location">
        <doc:heading>Location of rabbitmq.conf and rabbitmq-env.conf</doc:heading>
        <p>
          The location of these files is distribution-specific. By default, they
          are not created, but expect to be located in the following places on each platform:
          <ul>
            <li><b>Generic UNIX</b> - <span class="path"><span class="envvar">$RABBITMQ_HOME</span>/etc/rabbitmq/</span>
            </li>
            <li><b>Debian</b> - <span class="path">/etc/rabbitmq/</span></li>
            <li><b>RPM</b> - <span class="path">/etc/rabbitmq/</span></li>
            <li>
              <b>Mac OSX (Homebrew)</b> - <span class="path"><span
              class="envvar">${install_prefix}</span>/etc/rabbitmq/</span>,
              the Homebrew prefix is usually <code>/usr/local</code>
            </li>
            <li><b>Windows</b> - <span class="path"><span class="envvar">%APPDATA%</span>\RabbitMQ\</span></li>
          </ul>
        </p>
        <p>
          If <code>rabbitmq-env.conf</code> doesn't exist, it can be created manually
          in the location, specified by the <span class="envvar">RABBITMQ_CONF_ENV_FILE</span> variable.
          On Windows systems, it is named <code>rabbitmq-env.bat</code>.
        </p>
        <p>
          If <code>rabbitmq.conf</code> doesn't exist, it can be created manually.
          Set the <b>RABBITMQ_CONFIG_FILE</b> environment variable if you change the location.
          RabbitMQ automatically appends the <code>.conf</code> extension to the
          value of this variable.
        </p>
        <p>
          Restart the server after changes. Windows service users will need to re-install the
          service after adding or removing a configuration file.
        </p>
        </doc:subsection>

        <doc:subsection name="example-config">
          <doc:heading>Example rabbitmq.conf File</doc:heading>
          <p>
            The RabbitMQ server source repository contains
            examples for the configuration files:

            <ul>
              <li><a href="https://github.com/rabbitmq/rabbitmq-server/blob/master/docs/rabbitmq.conf.example">rabbitmq.conf.example</a></li>
              <li><a href="https://github.com/rabbitmq/rabbitmq-server/blob/master/docs/advanced.config.example">advanced.config.example</a></li>
            </ul>

            These files contain examples of most of the
            configuration items you might want to set (with some very
            obscure ones omitted) along with documentation for those
            settings. All configuration items are commented out in the
            example, so you can uncomment what you need. Note that the
            example files are meant to be used as, well, examples, and
            should not be treated as a general recommendation.
          </p>

          <p>
            In most distributions we place this example file in the
            same location as the real file should be placed (see
            above). However, for the Debian and RPM distributions
            policy forbids doing so; instead you can find it
            in <code>/usr/share/doc/rabbitmq-server/</code>
            or <code>/usr/share/doc/rabbitmq-server-&version-server;/</code>
            respectively.
          </p>
        </doc:subsection>

        <doc:subsection name="config-items">
        <doc:heading>Commonly Used Variables Configurable in rabbitmq.conf</doc:heading>
        <p>
          These variables are the most common. The list is not complete, as
          some settings are quite obscure.
        </p>
        <table>
          <tr>
            <th>Key</th>
            <th>Documentation</th>
          </tr>
          <tr>
            <td>
              <code>listeners</code>
            </td>
            <td>
              Ports or hostname/pair on which to listen for AMQP connections
              (without TLS). See the <a href="/networking.html">Networking guide</a> for more
              details and examples.

              <p>Default: <code>listeners.tcp.default = 5672</code></p>
            </td>
          </tr>
          <tr>
            <td><code>num_acceptors.tcp</code></td>
            <td>
              Number of Erlang processes that will accept connections for the TCP
              listeners.
              <p>Default: <code>num_acceptors.tcp = 10</code></p>
            </td>
          </tr>
          <tr>
            <td><code>handshake_timeout</code></td>
            <td>
              Maximum time for AMQP 0-9-1 handshake (after socket connection
              and TLS handshake), in milliseconds.
              <p>Default: <code>handshake_timeout = 10000</code></p>
            </td>
          </tr>
          <tr>
            <td><code>listeners.ssl</code></td>
            <td>
              Ports or hostname/pair on which to listen for AMQP connections
              (without TLS). See the <a href="/networking.html">Networking guide</a> for more
              details and examples.
              <p>Default: <code>listeners.ssl = none</code></p>
            </td>
          </tr>
          <tr>
            <td><code>num_acceptors.ssl</code></td>
            <td>
              Number of Erlang processes that will accept connections for the TLS
              listeners.
              <p>Default: <code>num_acceptors.ssl = 1</code></p>
            </td>
          </tr>

          <tr>
            <td><code>ssl_options</code></td>
            <td>
              TLS configuration. See the <a href="ssl.html#enabling-ssl">TLS support
              documentation</a>.
              <p>Default: <code>none</code></p>
            </td>
          </tr>
          <tr>
            <td><code>ssl_handshake_timeout</code></td>
            <td>
              TLS handshake timeout, in milliseconds.
              <p>Default: <code>ssl_handshake_timeout = 5000</code></p>
            </td>
          </tr>
          <tr>
            <td><code>vm_memory_high_watermark</code></td>
            <td>
              Memory threshold at which the flow control is
              triggered. Can be absolute or relative to the amount of RAM available
              to the OS:

<pre>
vm_memory_high_watermark.relative = 0.6
              </pre>
<pre>
vm_memory_high_watermark.absolute = 2GB
              </pre>

              See the <a href="memory.html">memory-based flow
              control</a> and <a href="alarms.html">alarms</a>
              documentation.

              <p>
                Default:
                <code>vm_memory_high_watermark.relative = 0.4</code>
              </p>
            </td>
          </tr>
          <tr>
            <td><code>vm_memory_high_watermark_paging_ratio</code></td>
            <td>
              Fraction of the high watermark limit at which queues
              start to page messages out to disc to free up
              memory. See the <a href="memory.html">memory-based flow
              control</a> documentation.
              <p>Default: <code>vm_memory_high_watermark_paging_ratio = 0.5</code></p>
            </td>
          </tr>
          <tr>
            <td><code>disk_free_limit</code></td>
            <td>
              Disk free space limit of the partition on which RabbitMQ
              is storing data. When available disk space falls below
              this limit, flow control is triggered. The value can be
              set relative to the total amount of RAM or as an absolute value
              in bytes or, alternatively, in
              information units (e.g <code>"50MB"</code> or <code>"5GB"</code>):
<pre>
disk_free_limit.relative = 3.0
              </pre>
<pre>
disk_free_limit.absolute = 2GB
              </pre>

              By default free disk space must exceed 50MB. See the <a
              href="disk-alarms.html">Disk Alarms</a> documentation.
              <p>Default: <code>disk_free_limit.absolute =
              50MB</code></p>
            </td>
          </tr>
          <tr>
            <td><code>log.file.level</code></td>
            <td>
              Controls the granularity of logging. The value is a list
              of log event category and log level pairs.

              <p>
								The level can be one of <code>error</code> (only errors are
								logged), <code>warning</code> (only errors and warning are
								logged), <code>info</code> (errors, warnings and informational
								messages are logged), or <code>debug</code> (errors, warnings,
                informational messages and debugging messages are
                logged).
              </p>

              <p>Default: <code>log.file.level = info</code></p>
            </td>
          </tr>
          <tr>
            <td><code>channel_max</code></td>
            <td>
              Maximum permissible number of channels to
              negotiate with clients. Setting to 0 means "unlimited".
              Using more channels increases memory footprint of the broker.
              <p>Default: <code>channel_max = 0</code></p>
            </td>
          </tr>
          <tr>
            <td><code>channel_operation_timeout</code></td>
            <td>
              Channel operation timeout in milliseconds (used internally, not directly
              exposed to clients due to messaging protocol differences and limitations).
              <p>Default: <code>15000</code></p>
            </td>
          </tr>
          <tr>
            <td><code>heartbeat</code></td>
            <td>
              Value representing the heartbeat delay, in seconds, that
              the server sends in the <code>connection.tune</code>
              frame. If set to 0, heartbeats are disabled. Clients
              might not follow the server suggestion, see the <a
              href="amqp-0-9-1-reference.html#connection.tune">AMQP
              reference</a> for more detail. Disabling heartbeats
              might improve performance in situations with a great
              number of connections, but might lead to connections
              dropping in the presence of network devices that close
              inactive connections.  <p>Default: <code>heartbeat =
              600</code></p>
            </td>
          </tr>
          <tr>
            <td><code>default_vhost</code></td>
            <td>
              Virtual host to create when RabbitMQ creates a new
              database from scratch. The
              exchange <code>amq.rabbitmq.log</code> will exist in
              this virtual host.
              <p>Default: <code>default_vhost = /</code></p>
            </td>
          </tr>
          <tr>
            <td><code>default_user</code></td>
            <td>
              User name to create when RabbitMQ creates a new database
              from scratch.
              <p>Default: <code>default_user = guest</code></p>
            </td>
          </tr>
          <tr>
            <td><code>default_pass</code></td>
            <td>
              Password for the default user.
              <p>Default: <code>default_pass = guest</code></p>
            </td>
          </tr>
          <tr>
            <td><code>default_user_tags</code></td>
            <td>
              Tags for the default user.
              <p>Default: <code>default_user_tags.administrator = true</code></p>
            </td>
          </tr>
          <tr>
            <td><code>default_permissions</code></td>
            <td>
              <a href="access-control.html">Permissions</a>
              to assign to the default user when creating it.
              <p>Default:
<pre>
default_permissions.configure = .*
default_permissions.read = .*
default_permissions.write = .*
</pre></p>
            </td>
          </tr>
          <tr>
            <td><code>loopback_users</code></td>
            <td>
              List of users which are only permitted to connect to the
              broker via a loopback interface
              (i.e. <code>localhost</code>).

              <p>
                If you wish to allow the default <code>guest</code>
                user to connect remotely, you need to change this to
                <code>loopback_users = none</code>.
              </p>
              <p>
                To restrict another user to localhost-only connections,
                do it like so (<code>monitoring</code> is the name of the user):
                <code>loopback_users.monitoring = true</code>.
              </p>
              <p>Default: <code>loopback_users.guest = true</code></p>
            </td>
          </tr>
          <tr>
            <td><code>cluster_nodes</code></td>
            <td>
              Set this to cause clustering
              to <a href="clustering.html#auto-config">happen automatically</a>
              when a node starts for the very first time.

              For example, to cluster with nodes <code>rabbit@hostname1</code> and
              <code>rabbit@hostname2</code>:
<pre>
cluster_nodes.disc.1 = rabbit@hostname1
cluster_nodes.disc.2 = rabbit@hostname2
              </pre>
              <p>Default: <code>none</code></p>
            </td>
          </tr>
          <tr>
            <td><code>collect_statistics</code></td>
            <td>
              Statistics collection mode. Primarily relevant for the
              management plugin. Options are:
              <ul>
                <li><code>none</code> (do not emit statistics events)</li>
                <li><code>coarse</code> (emit per-queue / per-channel / per-connection statistics)</li>
                <li><code>fine</code> (also emit per-message statistics)</li>
                </ul>
              <p>Default: <code>collect_statistics = none</code></p>
            </td>
          </tr>
          <tr>
            <td><code>collect_statistics_interval</code></td>
            <td>
              Statistics collection interval in
              milliseconds. Primarily relevant for
              the <a href="management.html#statistics-interval">management
              plugin</a>.
              <p>Default: <code>collect_statistics_interval = 5000</code></p>
            </td>
          </tr>
          <tr>
            <td><code>management_db_cache_multiplier</code></td>
            <td>
              Affects the amount of time the <a href="management.html#statistics-interval">management plugin</a>
              will cache expensive management queries such as
              queue listings. The cache will multiply the elapsed time of
              the last query by this value and cache the result for
              this amount of time.
              <p>Default: <code>5</code></p>
            </td>
          </tr>
          <tr>
            <td><code>auth_mechanisms</code></td>
            <td>
              <a href="authentication.html">SASL authentication
              mechanisms</a> to offer to clients.
              <p>Default: <pre>    auth_mechanisms.1 = PLAIN
    auth_mechanisms.2 = AMQPLAIN</pre></p>
            </td>
          </tr>
          <tr>
            <td><code>auth_backends</code></td>
            <td>
              <p>
                List of <a href="/access-control.html">authentication / authorisation backends</a> to
                use.
              </p>
              <p>
                Other databases
                than <code>rabbit_auth_backend_internal</code> are
                available through <a href="plugins.html">plugins</a>.
              </p>
              <p>Default: <code>auth_backends.1 = internal</code></p>
            </td>
          </tr>
          <tr>
            <td><code>reverse_dns_lookups</code></td>
            <td>
              Set to <code>true</code> to have RabbitMQ perform a
              reverse DNS lookup on client connections, and present
              that information through <code>rabbitmqctl</code> and
              the management plugin.
              <p>Default: <code>reverse_dns_lookups = false</code></p>
            </td>
          </tr>
          <tr>
            <td><code>delegate_count</code></td>
            <td>
              Number of delegate processes to use for intra-cluster
              communication. On a machine which has a very large
              number of cores and is also part of a cluster, you may
              wish to increase this value.
              <p>Default: <code>delegate_count = 16</code></p>
            </td>
          </tr>

          <tr>
            <td><code>tcp_listen_options</code></td>
            <td>
              Default socket options. You probably don't want to
              change this.

              <p>Default:
                <pre>
    tcp_listen_options.backlog = 128
    tcp_listen_options.nodelay = true
    tcp_listen_options.linger.on = true
    tcp_listen_options.linger.timeout = 0
    tcp_listen_options.exit_on_close = false
                </pre>
              </p>
            </td>
          </tr>
          <tr>
            <td><code>hipe_compile</code></td>
            <td>
              Set to <code>true</code> to precompile parts of RabbitMQ
              with HiPE, a just-in-time compiler for Erlang. This will
              increase server throughput at the cost of increased startup time.

              <p>
                You might see 20-50% better performance at the cost of
                a few minutes delay at startup. These
                figures are highly workload- and hardware-dependent.
              </p>
              <p>
                HiPE support may not be compiled into your Erlang
                installation. If it is not, enabling this option will
                just cause a warning message to be displayed and
                startup will proceed as normal. For example, Debian /
                Ubuntu users will need to install
                the <code>erlang-base-hipe</code> package.
              </p>
              <p>
                HiPE is not available at all on some platforms,
                notably including Windows.
              </p>
              <p>
                HiPE has known issues in Erlang/OTP versions prior to 17.5.
                Using a recent Erlang/OTP version is highly recommended for HiPE.
              </p>
              <p>Default: <code>hipe_compile = false</code></p>
            </td>
          </tr>
          <tr>
            <td><code>cluster_partition_handling</code></td>
            <td>
              How to handle network partitions. Available modes are:
              <ul>
                <li><code>ignore</code></li>
                <li><code>autoheal</code></li>
                <li><code>pause_minority</code></li>
                <li><code>pause_if_all_down</code></li>
              </ul>
              <code>pause_if_all_down</code> mode requires additional parameters:
              <ul>
                <li><code>nodes</code></li>
                <li><code>recover</code></li>
              </ul>
              See the
              <a href="partitions.html#automatic-handling">documentation
              on partitions</a> for more information.
              <p>Default: <code>cluster_partition_handling = ignore</code></p>
            </td>
          </tr>
          <tr>
            <td><code>cluster_keepalive_interval</code></td>
            <td>
              How frequently nodes should send keepalive messages to
              other nodes (in milliseconds). Note that this is not the
              same thing as <a
              href="nettick.html"><code>net_ticktime</code></a>;
              missed keepalive messages will not cause nodes to be
              considered down.
              <p>Default: <code>cluster_keepalive_interval = 10000</code></p>
            </td>
          </tr>
          <tr>
            <td><code>queue_index_embed_msgs_below</code></td>
            <td>
              Size in bytes of message below which messages will
              be embedded directly in the queue index. You are advised
              to read the <a href="persistence-conf.html">persister
              tuning</a> documentation before changing this.
              <p>Default: <code>queue_index_embed_msgs_below = 4096</code></p>
            </td>
          </tr>

          <tr>
            <td><code>mnesia_table_loading_retry_timeout</code></td>
            <td>
              Timeout used when waiting for Mnesia tables in a cluster to
              become available.
              <p>Default: <code>mnesia_table_loading_retry_timeout = 30000</code></p>
            </td>
          </tr>

          <tr>
            <td><code>mnesia_table_loading_retry_limit</code></td>
            <td>
              Retries when waiting for Mnesia tables in the cluster startup. Note that
              this setting is not applied to Mnesia upgrades or node deletions.
              <p>Default: <code>mnesia_table_loading_retry_limit = 10</code></p>
            </td>
          </tr>

          <tr>
            <td><code>queue_master_locator</code></td>
            <td>
              Queue master location strategy. Available strategies are:
              <ul>
                <li><code>min-masters</code></li>
                <li><code>client-local</code></li>
                <li><code>random</code></li>
              </ul>
              See the
              <a href="ha.html#queue-master-location">documentation
              on queue master location</a> for more information.
              <p>Default: <code>queue_master_locator = client-local</code></p>
            </td>
          </tr>
          <tr>
            <td><code>proxy_protocol</code></td>
            <td>
              If set to <code>true</code>, RabbitMQ will expect a <a
              href="http://www.haproxy.org/download/1.8/doc/proxy-protocol.txt">proxy
              protocol</a> header to be sent first when an AMQP
              connection is opened.  This implies to set up a proxy
              protocol-compliant reverse proxy (e.g. <a
              href="http://www.haproxy.org/download/1.8/doc/proxy-protocol.txt">HAproxy</a>
              or <a
              href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-proxy-protocol.html">AWS
              ELB</a>) in front of RabbitMQ.  Clients can't directly
              connect to RabbitMQ when proxy protocol is enabled, so
              all connections must go through the reverse proxy.

              <p>
                See <a href="networking.html#proxy-protocol">the
                networking guide</a> for more information.
              </p>

              <p>Default: <code>proxy_protocol = false</code></p>
            </td>
          </tr>
        </table>

        <p>
          The following configuration settings can be set in
          the <a href="#advanced-config-file">advanced config file</a> only,
          under the <code>rabbit</code> section.
        </p>

        <table>
          <tr>
            <th>Key</th>
            <th>Documentation</th>
          </tr>
          <tr>
            <td><code>msg_store_index_module</code></td>
            <td>
              Implementation module for queue indexing. You are
              advised to read the <a
              href="persistence-conf.html">persister tuning</a>
              documentation before changing this.
              <p>Default: <code>rabbit_msg_store_ets_index</code></p>
            </td>
          </tr>
          <tr>
            <td><code>backing_queue_module</code></td>
            <td>
              Implementation module for queue contents. You probably
              don't want to change this.
              <p>Default: <code>rabbit_variable_queue</code></p>
            </td>
          </tr>
          <tr>
            <td><code>msg_store_file_size_limit</code></td>
            <td>
              Tunable value for the persister. You almost certainly
              should not change this.
              <p>Default: <code>16777216</code></p>
            </td>
          </tr>
          <tr>
            <td><code>trace_vhosts</code></td>
            <td>
              Used internally by
              the <a href="firehose.html">tracer</a>. You shouldn't
              change this.
              <p>Default: <code>[]</code></p>
            </td>
          </tr>
          <tr>
            <td><code>queue_index_max_journal_entries</code></td>
            <td>
              After how many queue index journal entries it will be
              flushed to disk.
              <p>Default: <code>32768</code></p>
            </td>
          </tr>
          <tr>
            <td><code>lazy_queue_explicit_</code>
              <code>gc_run_operation_threshold</code></td>
            <td>
             Tunable value only for lazy queues when under memory pressure.
             This is the threshold at which the garbage collector and other memory reduction activities are triggered.
             A low value could reduce performance, and a high one can improve performance, but cause higher memory consumption.
             You almost certainly should not change this.
            <p>Default: <code>1000</code></p>
            </td>
          </tr>
          <tr>
            <td><code>queue_explicit_</code>
              <code>gc_run_operation_threshold</code></td>
            <td>
             Tunable value only for normal queues when under memory pressure.
             This is the threshold at which the garbage collector and other memory reduction activities are triggered.
             A low value could reduce performance, and a high one can improve performance, but cause higher memory consumption.
             You almost certainly should not change this.
            <p>Default: <code>1000</code></p>
            </td>
          </tr>
        </table>



        <p>
          In addition, many plugins can have sections in the
          configuration file, with names of the
          form <code>rabbitmq_<i>plugin</i></code>. Our maintained
          plugins are documented in the following locations:
        </p>
        <ul>
          <li><a href="management.html#configuration">rabbitmq_management</a></li>
          <li><a href="management.html#configuration">rabbitmq_management_agent</a></li>
          <li><a href="web-dispatch.html">rabbitmq_web_dispatch</a></li>
          <li><a href="stomp.html">rabbitmq_stomp</a></li>
          <li><a href="shovel.html">rabbitmq_shovel</a></li>
          <li><a href="ldap.html">rabbitmq_auth_backend_ldap</a></li>
        </ul>
        </doc:subsection>

        <doc:subsection name="configuration-encryption">
          <doc:heading>Configuration entry encryption</doc:heading>
          <p>
            Sensitive configuration entries (e.g. password, URL containing
            credentials) can be encrypted in the RabbitMQ configuration file.
            The broker decrypts encrypted entries on start.
          </p>
          <p>
            Note that encrypted configuration entries don't make the
            system meaningfully more secure. Nevertheless, they
            allow deployments of RabbitMQ to conform to
            regulations in various countries requiring
            that no sensitive data should appear in plain text
            in configuration files.
          </p>
          <p>
            Encrypted values must be inside an Erlang <code>encrypted</code>
            tuple: <code>{encrypted, ...}</code>.
            Here is an example of a configuration file with an encrypted password
            for the default user:
            <pre class="example">
[
  {rabbit, [
      {default_user, &lt;&lt;"guest"&gt;&gt;},
      {default_pass,
        {encrypted,
         &lt;&lt;"cPAymwqmMnbPXXRVqVzpxJdrS8mHEKuo2V+3vt1u/fymexD9oztQ2G/oJ4PAaSb2c5N/hRJ2aqP/X0VAfx8xOQ=="&gt;&gt;
        }
      },
      {config_entry_decoder, [
             {passphrase, &lt;&lt;"mypassphrase"&gt;&gt;}
         ]}
    ]}
].
            </pre>
            Note the <code>config_entry_decoder</code> key with the passphrase
            that RabbitMQ will use to decrypt encrypted values.
          </p>
          <p>
            The passphrase doesn't have to be hardcoded in the configuration file,
            it can be in a separate file:
            <pre class="example">
[
  {rabbit, [
      ...
      {config_entry_decoder, [
             {passphrase, {file, "/path/to/passphrase/file"}}
         ]}
    ]}
].
            </pre>
            RabbitMQ can also request an operator to enter the passphrase
            when it starts by using <code>{passphrase, prompt}</code>.
          </p>
          <p>
            Use <code>rabbitmqctl</code> and the <code>encode</code>
            command to encrypt values:
            <pre class="example">
$ rabbitmqctl encode '&lt;&lt;"guest"&gt;&gt;' mypassphrase
{encrypted,&lt;&lt;"... long encrypted value..."&gt;&gt;}
$ rabbitmqctl encode '"amqp://fred:secret@host1.domain/my_vhost"' mypassphrase
{encrypted,&lt;&lt;"... long encrypted value..."&gt;&gt;}
            </pre>
            Add the <code>--decode</code> option if you want to decrypt values:
            <pre class="example">
$ rabbitmqctl encode --decode '{encrypted, &lt;&lt;"..."&gt;&gt;}' mypassphrase
&lt;&lt;"guest"&gt;&gt;
$ rabbitmqctl encode --decode '{encrypted, &lt;&lt;"..."&gt;&gt;}' mypassphrase
"amqp://fred:secret@host1.domain/my_vhost"
            </pre>
          </p>
          <p>
            Values of different types can be encoded. The example above encodes
            both binaries (<code>&lt;&lt;"guest"&gt;&gt;</code>) and strings
            (<code>"amqp://fred:secret@host1.domain/my_vhost"</code>).
          </p>
          <p>
            The encryption mechanism uses PBKDF2 to produce a derived key
            from the passphrase. The default hash function is SHA512
            and the default number of iterations is 1000. The default
            cipher is AES 256 CBC.
          </p>
          <p>
            You can change these defaults in the configuration file:
            <pre class="example">
[
  {rabbit, [
      ...
      {config_entry_decoder, [
             {passphrase, "mypassphrase"},
             {cipher, blowfish_cfb64},
             {hash, sha256},
             {iterations, 10000}
         ]}
    ]}
].          </pre>
            On the command line:
            <pre class="example">
$ rabbitmqctl encode --cipher blowfish_cfb64 --hash sha256 --iterations 10000 \
                     '&lt;&lt;"guest"&gt;&gt;' mypassphrase
            </pre>

          </p>
        </doc:subsection>

      </doc:section>
  </body>
</html>
