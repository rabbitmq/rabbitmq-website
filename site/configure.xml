<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
]>
<!--
Copyright (c) 2007-2016 Pivotal Software, Inc.

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License,
Version 2.0 (the "License”); you may not use this file except in compliance
with the License. You may obtain a copy of the License at

https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>RabbitMQ Configuration</title>
  </head>
  <body show-in-this-page="true">
      <doc:section name="introduction">
        <doc:heading>Overview</doc:heading>
      <p>
        RabbitMQ comes with default built-in settings. Those can be entirely
        sufficient in some environment (e.g. development and QA). If it runs fine,
        then you possibly don't need any configuration at all.
        For all other cases, as well as <a href="/production-checklist.html">production deployment tuning</a>,
        there is a way to configure many things in the broker as well as plugins.
      </p>
      <p>
        This guide covers a number of topics related to configuration:

        <ul>
          <li>The ways in which various settings of the server and plugins are configured</li>
          <li>Configuration file(s)</li>
          <li>Environment variables</li>
          <li>Most commonly configured core server settings</li>
          <li>Troubleshooting: how to verify config file location and effective configuration</li>
        </ul>

        Since configuration affects many areas of the system, including plugins, individual <a href="/documentation.html">documentation guides</a>
        dive deeper into what can be configured.
      </p>
      </doc:section>

      <doc:section name="means-of-configuration">
        <doc:heading>Means of Configuration</doc:heading>

      <p>
          RabbitMQ provides three general ways to customise the server:
      <table>
        <thead>
          <td>Mechanism</td>
          <td>Description</td>
        </thead>
        <tr>
          <td>
              <a href="#define-environment-variables">Environment Variables</a>
          </td>
          <td>
              define node name, file and directory locations, runtime flags (taken from the shell, or
              set in the environment configuration file, <code>rabbitmq-env.conf</code>/<code>rabbitmq-env-conf.bat</code>)
          </td>
        </tr>
        <tr>
          <td>
              <a href="#configuration-file">Configuration File</a>
          </td>
          <td>
              defines server and plugin settings for

              <ul>
                <li><a href="/networking.html">TCP listeners and other networking-related settings</a></li>
                <li><a href="/ssl.html">TLS</a></li>
                <li><a href="/alarms.html">resource constraints (alarms)</a></li>
                <li><a href="/access-control.html">authentication and authorization backends</a></li>
                <li><a href="/persistence-conf.html">message store settings</a></li>
              </ul>

              and so on.
          </td>
        </tr>
        <tr>
          <td>
              <a href="parameters.html">Runtime Parameters and Policies</a>
          </td>
          <td>
              defines cluster-wide settings which can change at run time
              as well as settings that are convenient to configure for groups of queues (exchanges, etc)
              such as including optional queue arguments.
          </td>
        </tr>
      </table>
      </p>

      <p>
      Most settings are configured using the first two methods. This guide,
      therefore, focuses on them.
      </p>

      <doc:subsection name="config-file-location">
        <doc:heading>Config File Locations</doc:heading>
        <p>
          <a href="/configure.html#config-location">Default config file locations</a>
          vary between operating systems and <a
          href="/download.html">package types</a>.

          This topic is covered in more details in the rest of this guide.
        </p>

        <p>
          When in doubt about RabbitMQ config file location for your OS and installation method,
          consult the log file and/or management UI as explained in the following sections.
        </p>
      </doc:subsection>

      <doc:subsection name="verify-configuration-config-file-location">
        <doc:heading>Verify Configuration: How to Find Config File Location</doc:heading>
        <p>
          The active configuration file can be verified by inspecting
          RabbitMQ log file. It will show up in the <a href="relocate.html">log file</a>
          at the top together with other broker boot log entries, for example:

           <pre class="sourcecode ini">
node           : rabbit@example
home dir       : /var/lib/rabbitmq
config file(s) : /etc/rabbitmq/rabbitmq.config</pre>

          In case log file cannot be found or read by RabbitMQ, log entry
          will say so:

           <pre class="sourcecode ini">
node           : rabbit@example
home dir       : /var/lib/rabbitmq
config file(s) : /var/lib/rabbitmq/hare.config (not found)</pre>
        </p>

        <p>
          Alternatively config file location can be found in the <a href="/management.html">management UI</a>,
          together with other details about nodes.
        </p>
        <p>
          When troubleshooting configuration settings, it is very useful to veirfy that the config file
          path is correct, exists and can be loaded (e.g. the file is readable) before checking effective
          node configuration.
        </p>
      </doc:subsection>

      <doc:subsection name="verify-configuration-effective-configuration">
        <doc:heading>Verify Configuration: How to Check Effective Configuration</doc:heading>
        <p>
          It is possible to print effective configuration (user provided values merged into defaults) using
          the <a href="/man/rabbitmqctl.1.man.html">rabbitmqctl environment</a> command.
        </p>
        <p>
          Checking effective configuration
        </p>
      </doc:subsection>
      </doc:section>

      <doc:section name="customise-environment">
        <doc:heading>Customise RabbitMQ Environment</doc:heading>

        <p>
          Certain server parameters can be configured using environment variables:
          node name, RabbitMQ configuration file location, inter-node communication ports,
          Erlang VM flags, and so on.
        </p>

        <doc:subsection name="customise-general-unix-environment">
        <doc:heading>Unix (general)</doc:heading>
          <p>
              On Unix-based systems (including Linux, MacOSX) you can create/edit
              <code><span class="path">rabbitmq-env.conf</span></code>
              to define environment variables.
              Its <a href="#config-location">location</a> is configurable
              using the <span class="envvar">RABBITMQ_CONF_ENV_FILE</span> environment variable.
            </p>
            <p>
              Use the standard environment variable names
              (but drop the RABBITMQ_ prefix) e.g.
              <pre class="sourcecode bash">
#example rabbitmq-env.conf file entries
#Rename the node
NODENAME=bunny@myhost
#Config file location and new filename bunnies.config
CONFIG_FILE=/etc/rabbitmq/testdir/bunnies</pre>
              More <a href="man/rabbitmq-env.conf.5.man.html">info on using rabbitmq-env.conf</a>
            </p>
        </doc:subsection>

        <doc:subsection name="customise-windows-environment">
        <doc:heading>Windows</doc:heading>
            <p>
               If you need to customise names, ports, locations, it is easiest
               to configure environment variables in the Windows dialogue:
               Start&#xA0;>&#xA0;Settings&#xA0;>&#xA0;Control&#xA0;Panel&#xA0;>&#xA0;System&#xA0;>&#xA0;Advanced&#xA0;>&#xA0;Environment&#xA0;Variables. Then create or edit the system variable name and value.
             </p>
            <p>
              Alternatively, you can create/edit
              <code><span class="path">rabbitmq-env-conf.bat</span></code>
              to define environment variables.
              Its <a href="#config-location">location</a> is configurable
              using the <span class="envvar">RABBITMQ_CONF_ENV_FILE</span> environment variable.
            </p>
            <p>
              <em>For environment changes to take effect on Windows, the service must be
              re-installed</em>. It is <em>not sufficient</em> to restart the service.

              This can be done using the installer or on the command line
              with administrator permissions:
              <ul>
                <li><a href="https://technet.microsoft.com/en-us/library/cc947813%28v=ws.10%29.aspx">Start an admin command prompt</a></li>
                <li>cd into the sbin folder under <em>RabbitMQ server installation directory</em> (e.g. <code>C:\Program Files (x86)\RabbitMQ Server\rabbitmq_server-&version-server;\sbin</code>)</li>
                <li>Run <code>rabbitmq-service.bat remove</code></li>
                <li>Set environment variables via command line, i.e. run commands like the following: <code>set RABBITMQ_BASE=c:\Data\RabbitMQ</code></li>
                <li>Run <code>rabbitmq-service.bat install</code></li>
              </ul>

              Alternative, if new configuration needs to take effect after next broker restart,
              one step can be skipped:

              <ul>
                <li><a href="https://technet.microsoft.com/en-us/library/cc947813%28v=ws.10%29.aspx">Start an admin command prompt</a></li>
                <li>cd into the sbin folder under <em>RabbitMQ server installation directory</em></li>
                <li>Set environment variables via command line</li>
                <li>Run <code>rabbitmq-service.bat install</code>, which will only update service parameters</li>
              </ul>
            </p>
        </doc:subsection>
      </doc:section>

      <doc:section name="define-environment-variables">
        <doc:heading>RabbitMQ Environment Variables</doc:heading>
        <p>
          RabbitMQ environment variable names have the
          prefix <code>RABBITMQ_</code>. A typical variable
          called <code>RABBITMQ_</code><i>var_name</i> is set as
          follows:
          <ul>
            <li>
              a shell environment variable called
              <code>RABBITMQ_</code><i>var_name</i> is used if this is
              defined;
            </li>
            <li><i>otherwise</i>, a variable called <i>var_name</i> is used if
              this is set in the <code>rabbitmq-env.conf</code> file;</li>
            <li><i>otherwise</i>, a system-specified default value is used.</li>
          </ul>
          <p>
            In this way, variables set in the shell environment take
            priority over variables set
            in <code>rabbitmq-env.conf</code>, which in turn over-ride
            RabbitMQ built-in defaults.
          </p>
        </p>
        <p>
          It is unlikely you will need to set any of these environment
          variables. If you have non-standard requirements, then RabbitMQ
          environment variables include, but are not limited to:
        </p>
        <div>
          <table>
            <tr><th>Name</th><th>Default</th><th>Description</th></tr>

            <tr>
              <td>RABBITMQ_NODE_IP_ADDRESS</td>
              <td>
                the empty string - meaning bind to all network interfaces.
              </td>
              <td>
                Change this if you only want to bind to one network interface.
                To bind to two or more interfaces, use the <code>tcp_listeners</code>
                key in <code>rabbitmq.config</code>.
              </td>
            </tr>

            <tr>
              <td>RABBITMQ_NODE_PORT</td>
              <td>5672</td>
              <td></td>
            </tr>

            <tr>
              <td>RABBITMQ_DIST_PORT</td>
              <td>RABBITMQ_NODE_PORT + 20000</td>
              <td>
                Port used for inter-node and CLI tool communition. Ignored if your config
                file sets <code>kernel.inet_dist_listen_min</code> or
                <code>kernel.inet_dist_listen_max</code> keys. See <a href="/networking.html">Networking</a> for details.
              </td>
            </tr>

            <tr>
              <td>RABBITMQ_NODENAME</td>
              <td>
                <ul>
                  <li>
                    <b>Unix*:</b>
                    <code>rabbit@<span class="envvar">$HOSTNAME</span></code>
                  </li>
                  <li>
                    <b>Windows:</b>
                    <code>rabbit@<span class="envvar">%COMPUTERNAME%</span></code>
                  </li>
                </ul>
              </td>
              <td>
                The node name should be unique per
                erlang-node-and-machine combination. To run multiple nodes,
                see the
                <a href="clustering.html">clustering guide</a>.
              </td>
            </tr>

            <tr>
              <td>RABBITMQ_CONF_ENV_FILE</td>
              <td>
                <ul>
                  <li><b>Generic UNIX</b> - <span class="path"><span class="envvar">$RABBITMQ_HOME</span>/etc/rabbitmq/rabbitmq-env.conf</span>
                  </li>
                  <li><b>Debian</b> - <span class="path">/etc/rabbitmq/rabbitmq-env.conf</span></li>
                  <li><b>RPM</b> - <span class="path">/etc/rabbitmq/rabbitmq-env.conf</span></li>
                  <li>
                    <b>Mac OS X (Homebrew)</b> - <span class="path"><span
                    class="envvar">${install_prefix}</span>/etc/rabbitmq/rabbitmq-env.conf</span>,
                    the Homebrew prefix is usually <code>/usr/local</code>
                  </li>
                  <li><b>Windows</b> - <span class="path"><span class="envvar">%APPDATA%</span>\RabbitMQ\rabbitmq-env-conf.bat</span></li>
                </ul>
              </td>
              <td>
                Location of the file that contains environment variable definitions (without the <span class="envvar">RABBITMQ_</span>
                prefix). Note that the file name on Windows is different from other operating systems.
              </td>
            </tr>

            <tr>
              <td>RABBITMQ_USE_LONGNAME</td>
              <td></td>
              <td>
                When set to <code>true</code> this will cause RabbitMQ
                to use fully qualified names to identify nodes. This
                may prove useful on EC2. Note that it is not possible
                to switch between using short and long names without
                resetting the node.
              </td>
            </tr>

            <tr>
              <td>RABBITMQ_SERVICENAME</td>
              <td><b>Windows Service:</b>
                RabbitMQ</td>
              <td>
                The name of the installed service. This will appear in
                <code>services.msc</code>.
            </td>
            </tr>

            <tr>
              <td>RABBITMQ_CONSOLE_LOG</td>
              <td><b>Windows Service:</b></td>
              <td>
                Set this variable to <code>new</code> or <code>reuse</code>
                to redirect console output from the server to a file named
                <span class="envvar">%RABBITMQ_SERVICENAME%</span>.debug in the
                default <b>RABBITMQ_BASE</b> directory.
                <ul>
                  <li>If not set, console output from the server will be discarded (default).</li>
                  <li><code>new</code> A new file will be created
                    each time the service starts.</li>
                  <li><code>reuse</code> The file will be overwritten each time
                    the service starts.</li>
                </ul>
              </td>
            </tr>

            <tr>
              <td>RABBITMQ_CTL_ERL_ARGS</td>
              <td>None</td>
              <td>
                Parameters for the <code>erl</code> command used when invoking
                <code>rabbitmqctl</code>. This should be overridden for
                debugging purposes only.
              </td>
            </tr>

            <tr>
              <td>RABBITMQ_SERVER_ERL_ARGS</td>
              <td>
                <ul>
                  <li><b>Unix*:</b>
                    <code>+P 1048576 +t 5000000 +stbt db +zdbbl 32000</code>
                  </li>
                  <li><b>Windows:</b> None</li>
                </ul>
              </td>
              <td>
                Standard parameters for the <code>erl</code> command used when
                invoking the RabbitMQ Server. This should be overridden for
                debugging purposes only. Overriding this variable
                <em>replaces</em> the default value.
              </td>
            </tr>

            <tr>
              <td>RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS</td>
              <td>
                <ul>
                  <li><b>Unix*:</b> None</li>
                  <li><b>Windows:</b> None</li>
                </ul>
              </td>
              <td>
                Additional parameters for the <code>erl</code> command used when
                invoking the RabbitMQ Server. The value of this variable
                is <em>appended</em> the default list of arguments (<b>RABBITMQ_SERVER_ERL_ARGS</b>).
                This is the environment variable to use if <code>+K true</code> needs to be overwritten.
              </td>
            </tr>

            <tr>
              <td>RABBITMQ_SERVER_START_ARGS</td>
              <td>None</td>
              <td>
                Extra parameters for the <code>erl</code> command used when
                invoking the RabbitMQ Server. This will not override
                <b>RABBITMQ_SERVER_ERL_ARGS</b>.
              </td>
            </tr>
          </table>
          * Unix, Linux, MacOSX
          <p>
            In addition, there are several environment variables which
            tell RabbitMQ <a href="relocate.html">where to locate its
            database, log files, plugins, configuration etc</a>.
          </p>

          <p>
            Other variables upon which RabbitMQ depends are:
          </p>
          <table>
            <th>Name</th><th>Default</th><th>Description</th>

            <tr>
              <td>HOSTNAME</td>
              <td><ul>
                  <li><b>Unix, Linux:</b> <code>env hostname</code></li>
                  <li><b>MacOSX:</b> <code>env hostname -s</code></li>
                </ul>
              </td>
              <td>The name of the current machine</td>
            </tr>

            <tr>
              <td>COMPUTERNAME</td>
              <td><b>Windows:</b> localhost</td>
              <td>The name of the current machine</td>
            </tr>

            <tr>
              <td>ERLANG_SERVICE_MANAGER_PATH</td>
              <td><b>Windows Service:</b>
                <span class="path">
                  <span class="envvar">%ERLANG_HOME%</span>\erts-<var>x.x.x</var>\bin</span>
              </td>
              <td>
                This path is the location of <code>erlsrv.exe</code>,
                the Erlang service wrapper script.
              </td>
            </tr>
          </table>
        </div>
      </doc:section>

      <doc:section name="configuration-file">
      <doc:heading>Configuration File</doc:heading>
        <doc:subsection name="config-file">
        <doc:heading>The rabbitmq.config File</doc:heading>
        <p>
          The configuration file <code>rabbitmq.config</code>
          allows the RabbitMQ core application,
          Erlang services and RabbitMQ plugins to be configured.
          It is a standard Erlang configuration file, documented on the
          <a href="http://www.erlang.org/doc/man/config.html">Erlang Config Man Page</a>.
        </p>
        <p>
          An minimalistic example configuration file follows:
        </p>
        <p>
<pre class="sourcecode erlang">
  [
    {rabbit, [{tcp_listeners, [5673]}]}
  ].
</pre>
        </p>
        <p>
          This example will alter the port RabbitMQ listens on for
          AMQP 0-9-1 client connections from 5672 to 5673.
        </p>
        <p>
          To override main RabbitMQ config file location, use the <span class="envvar">RABBITMQ_CONFIG_FILE</span>
          environment variable.
        </p>
        <p>
           Note that this configuration file is not the same as the environment
           configuration file, <code>rabbitmq-env.conf</code>, which
           can be used to set environment variables on non-Windows
           systems.
        </p>
        </doc:subsection>

        <doc:subsection name="config-location">
        <doc:heading>Location of rabbitmq.config and rabbitmq-env.conf</doc:heading>
        <p>
          The location of these files is distribution-specific. By default, they
          are not created, but expect to be located in the following places on each platform:
          <ul>
            <li><b>Generic UNIX</b> - <span class="path"><span class="envvar">$RABBITMQ_HOME</span>/etc/rabbitmq/</span>
            </li>
            <li><b>Debian</b> - <span class="path">/etc/rabbitmq/</span></li>
            <li><b>RPM</b> - <span class="path">/etc/rabbitmq/</span></li>
            <li>
              <b>Mac OS X (Homebrew)</b> - <span class="path"><span
              class="envvar">${install_prefix}</span>/etc/rabbitmq/</span>,
              the Homebrew prefix is usually <code>/usr/local</code>
            </li>
            <li><b>Windows</b> - <span class="path"><span class="envvar">%APPDATA%</span>\RabbitMQ\</span></li>
          </ul>
        </p>
        <p>
          If <code>rabbitmq-env.conf</code> doesn't exist, it can be created manually
          in the location, specified by the <span class="envvar">RABBITMQ_CONF_ENV_FILE</span> variable.
          On Windows systems, it is named <code>rabbitmq-env.bat</code>.
        </p>
        <p>
          If <code>rabbitmq.config</code> doesn't exist, it can be created manually.
          Set the <b>RABBITMQ_CONFIG_FILE</b> environment variable if you change the location.
          The Erlang runtime automatically appends the .config extension to the
          value of this variable.
        </p>
        <p>
          Restart the server after changes. Windows service users will need to re-install the
          service after adding or removing a configuration file.
        </p>
        </doc:subsection>

        <doc:subsection name="example-config">
          <doc:heading>Example rabbitmq.config File</doc:heading>
          <p>
            RabbitMQ server source repository contains
            <a href="https://github.com/rabbitmq/rabbitmq-server/blob/stable/docs/rabbitmq.config.example">an example configuration file</a>
            named <code>rabbitmq.config.example</code>. This
            example file contains an example of most of the
            configuration items you might want to set (with some very
            obscure ones omitted) along with documentation for those
            settings. All configuration items are commented out in the
            example, so you can uncomment what you need. Note that
            the example file is meant to be used as, well, example,
            and should not be treated as a general recommendation.
          </p>

          <p>
            In most distributions we place this example file in the
            same location as the real file should be placed (see
            above). However, for the Debian and RPM distributions
            policy forbids doing so; instead you can find it
            in <code>/usr/share/doc/rabbitmq-server/</code>
            or <code>/usr/share/doc/rabbitmq-server-&version-server;/</code>
            respectively.
          </p>
        </doc:subsection>

        <doc:subsection name="config-items">
        <doc:heading>Variables Configurable in rabbitmq.config</doc:heading>
        <p>
          Many users of RabbitMQ never need to change any of these
          values, and some are fairly obscure. However, for
          completeness they are all listed here.
        </p>
        <table>
          <tr>
            <th>Key</th>
            <th>Documentation</th>
          </tr>
          <tr>
            <td>
              <code>tcp_listeners</code>
            </td>
            <td>
              Ports or hostname/pair on which to listen for AMQP connections
              (without TLS). See the <a href="/networking.html">Networking guide</a> for more
              details and examples.

              <p>Default: <code>[5672]</code></p>
            </td>
          </tr>
          <tr>
            <td><code>num_tcp_acceptors</code></td>
            <td>
              Number of Erlang processes that will accept connections for the TCP
              listeners.
              <p>Default: <code>10</code></p>
            </td>
          </tr>
          <tr>
            <td><code>handshake_timeout</code></td>
            <td>
              Maximum time for AMQP 0-8/0-9/0-9-1 handshake (after socket connection
              and SSL handshake), in milliseconds.
              <p>Default: <code>10000</code></p>
            </td>
          </tr>
          <tr>
            <td><code>ssl_listeners</code></td>
            <td>
              As above, for SSL connections.
              <p>Default: <code>[]</code></p>
            </td>
          </tr>
          <tr>
            <td><code>num_ssl_acceptors</code></td>
            <td>
              Number of Erlang processes that will accept connections for the SSL
              listeners.
              <p>Default: <code>1</code></p>
            </td>
          </tr>
          <tr>
            <td><code>ssl_options</code></td>
            <td>
              SSL configuration. See the <a href="ssl.html#enabling-ssl">SSL
              documentation</a>.
              <p>Default: <code>[]</code></p>
            </td>
          </tr>
          <tr>
            <td><code>ssl_handshake_timeout</code></td>
            <td>
              SSL handshake timeout, in milliseconds.
              <p>Default: <code>5000</code></p>
            </td>
          </tr>
          <tr>
            <td><code>vm_memory_high_watermark</code></td>
            <td>
              Memory threshold at which the flow control is
              triggered. See
              the <a href="memory.html">memory-based flow
              control</a> documentation.
              <p>Default: <code>0.4</code></p>
            </td>
          </tr>
          <tr>
            <td><code>vm_memory_calculation_strategy</code></td>
            <td>
              Strategy for memory usage reporting. Can be one of the following:
              <ul class="plain">
                <li><code>allocated</code>: uses Erlang memory allocator statistics</li>
                <li><code>rss</code>: uses operating system RSS memory reporting. This uses OS-specific means and may start short lived child processes.</li>
                <li><code>legacy</code>: uses legacy memory reporting (how much memory is considered to be used by the runtime). This strategy is fairly inaccurate.</li>
                <li><code>erlang</code>: same as <code>legacy</code>, preserved for backwards compatibility</li>
              </ul>
              <p>Default: <code>allocated</code></p>
            </td>
          </tr>
          <tr>
            <td><code>vm_memory_high_watermark_paging_ratio</code></td>
            <td>
              Fraction of the high watermark limit at which queues
              start to page messages out to disc to free up
              memory. See the <a href="memory.html">memory-based flow
              control</a> documentation.
              <p>Default: <code>0.5</code></p>
            </td>
          </tr>
          <tr>
            <td><code>total_memory_available_override_value</code></td>
            <td>
              Makes it possible to override the total amount of memory
              available, as opposed to inferring it from the environment using
              OS-specific means. This should only be used when actual
              maximum amount of RAM available to the node doesn't match the value
              that will be inferred by the node, e.g. due to containerization or similar
              constraints the node cannot be aware of. The value may be
              set to an integer number of bytes or, alternatively, in
              information units (e.g <code>"8GB"</code>). For example,
              when the value is set to 4 GB, the node will believe it is
              running on a machine with 4 GB of RAM.
              <p>Default: <code>undefined</code> (not used)</p>
            </td>
          </tr>
          <tr>
            <td><code>disk_free_limit</code></td>
            <td>
              Disk free space limit of the partition on which RabbitMQ
              is storing data. When available disk space falls below
              this limit, flow control is triggered. The value may be
              set relative to the total amount of RAM (e.g.
              <code>{mem_relative, 1.0}</code>). The value may also be
              set to an integer number of bytes. Or, alternatively, in
              information units (e.g <code>"50MB"</code>). By default free disk
              space must exceed 50MB. See
              the <a href="disk-alarms.html">Disk Alarms</a> documentation.
              <p>Default: <code>50000000</code></p>
            </td>
          </tr>
          <tr>
            <td><code>log_levels</code></td>
            <td>
              Controls the granularity of logging. The value is a list
              of log event category and log level pairs.

              <p>
                The level can be one of 'none' (no events are logged),
                'error' (only errors are logged), 'warning' (only
                errors and warning are logged), 'info' (errors,
                warnings and informational messages are logged), or
                'debug' (errors, warnings, informational messages and
                debugging messages are logged).
              </p>

              <p>
                At present there are four categories defined. Other,
                currently uncategorised, events are always logged.
              </p>

              <p>
                The categories are:
              </p>

              <ul>
                <li>
                  <code>channel</code> - for all events relating to
                  AMQP channels
                </li>
                <li>
                  <code>connection</code> - for all events relating to
                  network connections
                </li>
                <li>
                  <code>federation</code> - for all events relating to
                  <a href="federation.html">federation</a>
                </li>
                <li>
                  <code>mirroring</code> - for all events relating to
                  <a href="ha.html">mirrored queues</a>
                </li>
              </ul>
              <p>Default: <code>[{connection, info}]</code></p>
            </td>
          </tr>
          <tr>
            <td><code>frame_max</code></td>
            <td>
              Maximum permissible size of a frame (in bytes) to
              negotiate with clients. Setting to 0 means "unlimited"
              but will trigger a bug in some QPid clients. Setting a
              larger value may improve throughput; setting a smaller
              value may improve latency.
              <p>Default: <code>131072</code></p>
            </td>
          </tr>
          <tr>
            <td><code>channel_max</code></td>
            <td>
              Maximum permissible number of channels to
              negotiate with clients. Setting to 0 means "unlimited".
              Using more channels increases memory footprint of the broker.
              <p>Default: <code>0</code></p>
            </td>
          </tr>
          <tr>
            <td><code>channel_operation_timeout</code></td>
            <td>
              Channel operation timeout in milliseconds (used internally, not directly
              exposed to clients due to messaging protocol differences and limitations).
              <p>Default: <code>15000</code></p>
            </td>
          </tr>
          <tr>
            <td><code>heartbeat</code></td>
            <td>
              Value representing the heartbeat delay, in seconds, that the
              server sends in the <code>connection.tune</code> frame. If set to
              0, heartbeats are disabled. Clients might not follow the server
              suggestion, see the <a
              href="amqp-0-9-1-reference.html#connection.tune">AMQP
              reference</a> for more details. Disabling heartbeats might improve
              performance in situations with a great number of connections, but
              might lead to connections dropping in the presence of network
              devices that close inactive connections.
              <p>Default: <code>60</code> (<code>580</code> prior to release 3.5.5)</p>
            </td>
          </tr>
          <tr>
            <td><code>default_vhost</code></td>
            <td>
              Virtual host to create when RabbitMQ creates a new
              database from scratch. The
              exchange <code>amq.rabbitmq.log</code> will exist in
              this virtual host.
              <p>Default: <code>&lt;&lt;"/"&gt;&gt;</code></p>
            </td>
          </tr>
          <tr>
            <td><code>default_user</code></td>
            <td>
              User name to create when RabbitMQ creates a new database
              from scratch.
              <p>Default: <code>&lt;&lt;"guest"&gt;&gt;</code></p>
            </td>
          </tr>
          <tr>
            <td><code>default_pass</code></td>
            <td>
              Password for the default user.
              <p>Default: <code>&lt;&lt;"guest"&gt;&gt;</code></p>
            </td>
          </tr>
          <tr>
            <td><code>default_user_tags</code></td>
            <td>
              Tags for the default user.
              <p>Default: <code>[administrator]</code></p>
            </td>
          </tr>
          <tr>
            <td><code>default_permissions</code></td>
            <td>
              <a href="access-control.html">Permissions</a>
              to assign to the default user when creating it.
              <p>Default:
              <code>
                  [&lt;&lt;".*"&gt;&gt;, &lt;&lt;".*"&gt;&gt;, &lt;&lt;".*"&gt;&gt;] </code></p>
            </td>
          </tr>
          <tr>
            <td><code>loopback_users</code></td>
            <td>
              List of users which are only permitted to connect to the
              broker via a loopback interface
              (i.e. <code>localhost</code>).

              <p>
                If you wish to allow the default <code>guest</code>
                user to connect remotely, you need to change this to
                <code>[]</code>.
              </p>
              <p>Default: <code> [&lt;&lt;"guest"&gt;&gt;] </code></p>
            </td>
          </tr>
          <tr>
            <td><code>cluster_nodes</code></td>
            <td>
              Set this to cause clustering
              to <a href="clustering.html#auto-config">happen automatically</a>
              when a node starts for the very first time. The first element of
              the tuple is the nodes that the node will try to cluster to. The
              second element is either <code>disc</code> or
              <code>ram</code> and determines the node type.
              <p>Default: <code>{[], disc}</code></p>
            </td>
          </tr>
          <tr>
            <td><code>server_properties</code></td>
            <td>
              List of key-value pairs to announce to clients on connection.
              <p>Default: <code>[]</code></p>
            </td>
          </tr>
          <tr>
            <td><code>collect_statistics</code></td>
            <td>
              Statistics collection mode. Primarily relevant for the
              management plugin. Options are:
              <ul>
                <li>none (do not emit statistics events)</li>
                <li>coarse (emit per-queue / per-channel / per-connection statistics)</li>
                <li>fine (also emit per-message statistics)</li>
                </ul>
              You probably don't want to change this yourself.
              <p>Default: <code>none</code></p>
            </td>
          </tr>
          <tr>
            <td><code>collect_statistics_interval</code></td>
            <td>
              Statistics collection interval in
              milliseconds. Primarily relevant for
              the <a href="management.html#statistics-interval">management
              plugin</a>.
              <p>Default: <code>5000</code></p>
            </td>
          </tr>
          <tr>
            <td><code>management_db_cache_multiplier</code></td>
            <td>
              Affects the amount of time the <a href="management.html#statistics-interval">management plugin</a>
              will cache expensive management queries such as
              queue listings. The cache will multiply the elapsed time of
              the last query by this value and cache the result for
              this amount of time.
              <p>Default: <code>5</code></p>
            </td>
          </tr>
          <tr>
            <td><code>auth_mechanisms</code></td>
            <td>
              <a href="authentication.html">SASL authentication
              mechanisms</a> to offer to clients.
              <p>Default: <code>['PLAIN', 'AMQPLAIN']</code></p>
            </td>
          </tr>
          <tr>
            <td><code>auth_backends</code></td>
            <td>
              <p>
                List of <a href="/access-control.html">authentication and authorisation backends</a> to
                use.
              </p>
              <p>
                Other databases
                than <code>rabbit_auth_backend_internal</code> are
                available through <a href="plugins.html">plugins</a>.
              </p>
              <p>Default: <code>[rabbit_auth_backend_internal]</code></p>
            </td>
          </tr>
          <tr>
            <td><code>reverse_dns_lookups</code></td>
            <td>
              Set to <code>true</code> to have RabbitMQ perform a
              reverse DNS lookup on client connections, and present
              that information through <code>rabbitmqctl</code> and
              the management plugin.
              <p>Default: <code>false</code></p>
            </td>
          </tr>
          <tr>
            <td><code>delegate_count</code></td>
            <td>
              Number of delegate processes to use for intra-cluster
              communication. On a machine which has a very large
              number of cores and is also part of a cluster, you may
              wish to increase this value.
              <p>Default: <code>16</code></p>
            </td>
          </tr>
          <tr>
            <td><code>trace_vhosts</code></td>
            <td>
              Used internally by
              the <a href="firehose.html">tracer</a>. You shouldn't
              change this.
              <p>Default: <code>[]</code></p>
            </td>
          </tr>
          <tr>
            <td><code>tcp_listen_options</code></td>
            <td>
              Default socket options. You probably don't want to
              change this.

              <p>Default:
                <pre class="sourcecode erlang">
[{backlog,       128},
 {nodelay,       true},
 {linger,        {true,0}},
 {exit_on_close, false}]
                </pre>
              </p>
            </td>
          </tr>
          <tr>
            <td><code>hipe_compile</code></td>
            <td>
              Set to <code>true</code> to precompile parts of RabbitMQ
              with HiPE, a just-in-time compiler for Erlang. This will
              increase server throughput at the cost of increased startup time.

              <p>
                You might see 20-50% better performance at the cost of
                a few minutes delay at startup. These
                figures are highly workload- and hardware-dependent.
              </p>
              <p>
                HiPE support may not be compiled into your Erlang
                installation. If it is not, enabling this option will
                just cause a warning message to be displayed and
                startup will proceed as normal. For example, Debian /
                Ubuntu users will need to install
                the <code>erlang-base-hipe</code> package.
              </p>
              <p>
                HiPE is not available at all on some platforms,
                notably including Windows.
              </p>
              <p>
                HiPE has known issues in Erlang/OTP versions prior to 17.5.
                Using a recent Erlang/OTP version is highly recommended for HiPE.
              </p>
              <p>Default: <code>false</code></p>
            </td>
          </tr>
          <tr>
            <td><code>cluster_partition_handling</code></td>
            <td>
              How to handle network partitions. Available modes are:
              <ul>
                <li><code>ignore</code></li>
                <li><code>pause_minority</code></li>
                <li><code>{pause_if_all_down, [nodes], ignore | autoheal}</code>
                  where <code>[nodes]</code> is a list of node names<br/>
                  (ex: <code>['rabbit@node1', 'rabbit@node2']</code>)
                </li>
                <li><code>autoheal</code></li>
              </ul>
              See the
              <a href="partitions.html#automatic-handling">documentation
              on partitions</a> for more information.
              <p>Default: <code>ignore</code></p>
            </td>
          </tr>
          <tr>
            <td><code>cluster_keepalive_interval</code></td>
            <td>
              How frequently nodes should send keepalive messages to
              other nodes (in milliseconds). Note that this is not the
              same thing as <a
              href="nettick.html"><code>net_ticktime</code></a>;
              missed keepalive messages will not cause nodes to be
              considered down.
              <p>Default: <code>10000</code></p>
            </td>
          </tr>
          <tr>
            <td><code>queue_index_embed_msgs_below</code></td>
            <td>
              Size in bytes of message below which messages will
              be embedded directly in the queue index. You are advised
              to read the <a href="persistence-conf.html">persister
              tuning</a> documentation before changing this.
              <p>Default: <code>4096</code></p>
            </td>
          </tr>
          <tr>
            <td><code>msg_store_index_module</code></td>
            <td>
              Implementation module for queue indexing. You are
              advised to read the <a
              href="persistence-conf.html">persister tuning</a>
              documentation before changing this.
              <p>Default: <code>rabbit_msg_store_ets_index</code></p>
            </td>
          </tr>
          <tr>
            <td><code>backing_queue_module</code></td>
            <td>
              Implementation module for queue contents. You probably
              don't want to change this.
              <p>Default: <code>rabbit_variable_queue</code></p>
            </td>
          </tr>
          <tr>
            <td><code>msg_store_file_size_limit</code></td>
            <td>
              Tunable value for the persister. You almost certainly
              should not change this.
              <p>Default: <code>16777216</code></p>
            </td>
          </tr>
          <tr>
            <td><code>msg_store_credit_disc_bound</code></td>
            <td>
              The credits that a queue process is given by the message store.
              <p>
                By default, a queue process is given 4000 message store credits, and then 800 for every 800 messages that it processes.
              </p>
              <p>
                Messages which need to be paged out due to memory pressure will also use this credit.
              </p>
              <p>
                The Message Store is the last component in the credit flow chain. <a href="https://www.rabbitmq.com/blog/2015/10/06/new-credit-flow-settings-on-rabbitmq-3-5-5/" target="_blank">Learn about credit flow.</a>
              </p>
              <p>
                This value only takes effect when messages are persisted to the message store.
                If messages are embedded on the queue index, then modifying this setting has no effect because credit_flow is NOT used when writing to the queue index.
              </p>
              <p>Default: <code>{4000, 800}</code></p>
            </td>
          </tr>
          <tr>
            <td><code>mnesia_table_loading_retry_limit</code></td>
            <td>
              Number of times to retry while waiting for Mnesia tables in a cluster to
              become available.
              <p>Default: <code>10</code></p>
            </td>
          </tr>
          <tr>
            <td><code>mnesia_table_loading_retry_timeout</code></td>
            <td>
              Time to wait per retry for Mnesia tables in a cluster to become
              available.
              <p>Default: <code>30000</code></p>
            </td>
          </tr>
          <tr>
            <td><code>queue_index_max_</code>
              <code>journal_entries</code></td>
            <td>
              Tunable value for the persister. You almost certainly
              should not change this.
              <p>Default: <code>65536</code></p>
            </td>
          </tr>
          <tr>
            <td><code>queue_master_locator</code></td>
            <td>
              Queue master location strategy. Available strategies are:
              <ul>
                <li><code>&lt;&lt;"min-masters"&gt;&gt;</code></li>
                <li><code>&lt;&lt;"client-local"&gt;&gt;</code></li>
                <li><code>&lt;&lt;"random"&gt;&gt;</code></li>
              </ul>
              See the
              <a href="ha.html#queue-master-location">documentation
              on queue master location</a> for more information.
              <p>Default: <code>&lt;&lt;"client-local"&gt;&gt;</code></p>
            </td>
          </tr>
          <tr>
            <td><code>mirroring_sync_batch_size</code></td>
            <td>
              Batch size of messages to synchronise between queue mirrors
              See <a href="https://www.rabbitmq.com/ha.html#batch-sync" target="_blank">Batch Synchronization</a>
              <p>Default: <code>4096</code></p>
            </td>
          </tr>
          <tr>
            <td><code>lazy_queue_explicit_</code>
              <code>gc_run_operation_threshold</code></td>
            <td>
             Tunable value only for lazy queues when under memory pressure.
             This is the threshold at which the garbage collector and other memory reduction activities are triggered.
             A low value could reduce performance, and a high one can improve performance, but cause higher memory consumption.
             You almost certainly should not change this.
            <p>Default: <code>1000</code></p>
            </td>
          </tr>
          <tr>
            <td><code>queue_explicit_</code>
              <code>gc_run_operation_threshold</code></td>
            <td>
             Tunable value only for normal queues when under memory pressure.
             This is the threshold at which the garbage collector and other memory reduction activities are triggered.
             A low value could reduce performance, and a high one can improve performance, but cause higher memory consumption.
             You almost certainly should not change this.
            <p>Default: <code>1000</code></p>
            </td>
          </tr>
        </table>
        <p>
          In addition, many plugins can have sections in the
          configuration file, with names of the
          form <code>rabbitmq_<i>plugin</i></code>. Our maintained
          plugins are documented in the following locations:
        </p>
        <ul>
          <li><a href="management.html#configuration">rabbitmq_management</a></li>
          <li><a href="management.html#configuration">rabbitmq_management_agent</a></li>
          <li><a href="web-dispatch.html">rabbitmq_web_dispatch</a></li>
          <li><a href="stomp.html">rabbitmq_stomp</a></li>
          <li><a href="shovel.html">rabbitmq_shovel</a></li>
          <li><a href="ldap.html">rabbitmq_auth_backend_ldap</a></li>
        </ul>
        </doc:subsection>

        <doc:subsection name="configuration-encryption">
          <doc:heading>Configuration entry encryption</doc:heading>
          <p>
            Sensitive configuration entries (e.g. password, URL containing
            credentials) can be encrypted in the RabbitMQ configuration file.
            The broker decrypts encrypted entries on start.
          </p>
          <p>
            Note that encrypted configuration entries don't make the
            system meaningfully more secure. Nevertheless, they
            allow deployments of RabbitMQ to conform to
            regulations in various countries requiring
            that no sensitive data should appear in plain text
            in configuration files.
          </p>
          <p>
            Encrypted values must be inside an Erlang <code>encrypted</code>
            tuple: <code>{encrypted, ...}</code>.
            Here is an example of a configuration file with an encrypted password
            for the default user:
            <pre class="sourcecode erlang">
[
  {rabbit, [
      {default_user, &lt;&lt;"guest"&gt;&gt;},
      {default_pass,
        {encrypted,
         &lt;&lt;"cPAymwqmMnbPXXRVqVzpxJdrS8mHEKuo2V+3vt1u/fymexD9oztQ2G/oJ4PAaSb2c5N/hRJ2aqP/X0VAfx8xOQ=="&gt;&gt;
        }
      },
      {config_entry_decoder, [
             {passphrase, &lt;&lt;"mypassphrase"&gt;&gt;}
         ]}
    ]}
].
            </pre>
            Note the <code>config_entry_decoder</code> key with the passphrase
            that RabbitMQ will use to decrypt encrypted values.
          </p>
          <p>
            The passphrase doesn't have to be hardcoded in the configuration file,
            it can be in a separate file:
            <pre class="sourcecode erlang">
[
  {rabbit, [
      ...
      {config_entry_decoder, [
             {passphrase, {file, "/path/to/passphrase/file"}}
         ]}
    ]}
].
            </pre>
            RabbitMQ can also request an operator to enter the passphrase
            when it starts by using <code>{passphrase, prompt}</code>.
          </p>
          <p>
            Use <code>rabbitmqctl</code> and the <code>encode</code>
            command to encrypt values:
            <pre class="sourcecode bash">
rabbitmqctl encode '&lt;&lt;"guest"&gt;&gt;' mypassphrase
{encrypted,&lt;&lt;"... long encrypted value..."&gt;&gt;}
rabbitmqctl encode '"amqp://fred:secret@host1.domain/my_vhost"' mypassphrase
{encrypted,&lt;&lt;"... long encrypted value..."&gt;&gt;}
            </pre>
            Add the <code>decode</code> command if you want to decrypt values:
            <pre class="sourcecode bash">
rabbitmqctl decode '{encrypted, &lt;&lt;"..."&gt;&gt;}' mypassphrase
&lt;&lt;"guest"&gt;&gt;
rabbitmqctl decode '{encrypted, &lt;&lt;"..."&gt;&gt;}' mypassphrase
"amqp://fred:secret@host1.domain/my_vhost"
            </pre>
          </p>
          <p>
            Values of different types can be encoded. The example above encodes
            both binaries (<code>&lt;&lt;"guest"&gt;&gt;</code>) and strings
            (<code>"amqp://fred:secret@host1.domain/my_vhost"</code>).
          </p>
          <p>
            The encryption mechanism uses PBKDF2 to produce a derived key
            from the passphrase. The default hash function is SHA512
            and the default number of iterations is 1000. The default
            cipher is AES 256 CBC.
          </p>
          <p>
            You can change these defaults in the configuration file:
            <pre class="sourcecode erlang">
[
  {rabbit, [
      ...
      {config_entry_decoder, [
             {passphrase, "mypassphrase"},
             {cipher, blowfish_cfb64},
             {hash, sha256},
             {iterations, 10000}
         ]}
    ]}
].          </pre>
            On the command line:
            <pre class="sourcecode bash">
rabbitmqctl encode --cipher blowfish_cfb64 --hash sha256 --iterations 10000 \
                     '&lt;&lt;"guest"&gt;&gt;' mypassphrase
            </pre>

          </p>
        </doc:subsection>

      </doc:section>
  </body>
</html>
