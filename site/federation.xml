<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
]>
<!--
Copyright (C) 2007-2015 Pivotal Software, Inc. 

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License, 
Version 2.0 (the "License”); you may not use this file except in compliance 
with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Federation Plugin</title>
  </head>
  <body show-in-this-page="true">
    <p>
      The high-level goal of the federation plugin is to transmit messages
      between brokers without requiring clustering. This is useful for various
      reasons:
    </p>

    <dl class="plain">
      <dt><b>Loose coupling</b></dt>
      <dd>
        The federation plugin can transmit messages between brokers
        (or clusters) in different administrative domains:
        <ul class="plain">
          <li>
            they may have different users and virtual hosts;
          </li>
          <li>
            they may run on different versions of RabbitMQ and Erlang.
          </li>
        </ul>
      </dd>
      <dt><b>WAN-friendly</b></dt>
      <dd>
        The federation plugin uses AMQP to communicate between brokers, and is
        designed to tolerate intermittent connectivity.
      </dd>
      <dt><b>Specificity</b></dt>
      <dd>
        A broker can contain federated <i>and</i> local-only components - you
        don't need to federate everything if you don't want to.
      </dd>
      <dt><b>Scalability</b></dt>
      <dd>
        Federation does not require O(n<sup>2</sup>) connections between
        <i>n</i> brokers (although this is the easiest way to set
        things up), which should mean it scales better.
      </dd>
    </dl>

    <doc:section name="what-does-it-do">
      <doc:heading>What does it do?</doc:heading>
      <p>
        The federation plugin allows you to make exchanges and queues
        <i>federated</i>. A federated exchange or queue can receive
        messages from one or more <i>upstreams</i> (remote exchanges
        and queues on other brokers). A federated exchange can route
        messages published upstream to a local queue. A federated
        queue lets a local consumer receive messages from an upstream
        queue.
      </p>

      <p>
        For more details, see the
        documentation on <a href="federated-exchanges.html">federated
        exchanges</a> and <a href="federated-queues.html">federated
        queues</a>.
      </p>
    </doc:section>

    <doc:section name="getting-started">
      <doc:heading>Getting Started</doc:heading>

      <p>
        The federation plugin is included in the RabbitMQ distribution. To
        enable it, use
        <a href="man/rabbitmq-plugins.1.man.html">rabbitmq-plugins</a>:
      </p>
      <pre class="example">rabbitmq-plugins enable rabbitmq_federation</pre>

      <p>
        When using the management plugin, you will also want to
        enable <code>rabbitmq_federation_management</code>:
      </p>
      <pre class="example">rabbitmq-plugins enable rabbitmq_federation_management</pre>

      <p>
        When using a federation in a cluster, all the nodes of the
        cluster should have the federation plugin installed.
      </p>

      <p>
        Information about federation is stored in the RabbitMQ
        database, along with users, permissions, queues, etc. There
        are three levels of configuration involved in federation:
      </p>

      <ul>
        <li>
          <b>Upstreams</b> - each upstream defines how to connect
          to another broker.
        </li>
        <li>
          <b>Upstream sets</b> - each upstream set groups together a
          set of upstreams to use for federation.
        </li>
        <li>
          <b>Policies</b> - each policy selects a set of exchanges,
          queues or both, and applies a single upstream or an upstream
          set to those objects.
        </li>
      </ul>

      <p>
        In practice, for simple use cases you can almost ignore the
        existence of upstream sets, since there is an
        implicitly-defined upstream set called <code>all</code> to
        which all upstreams are added.
      </p>

      <p>
        Upstreams and upstream sets are both instances of
        <i>parameters</i>.  Like exchanges and queues, each virtual host
        has its own distinct set of parameters and policies. For more
        generic information on parameters and policies, see the
        documentation on <a href="parameters.html">parameters and
        policies</a>. For full details on the parameters used by
        federation, see the <a href="federation-reference.html">federation
        reference</a>.
      </p>

      <p>
        Parameters and policies can be set in three ways - either with
        an invocation of <code>rabbitmqctl</code>, a call to the
        management HTTP API, or (usually) through the web UI presented
        by <code>rabbitmq_federation_management</code>. (The web UI
        does not present all possibilities - in particular, it does
        not allow you to manage upstream sets.)
      </p>

      <doc:subsection name="tutorial">
        <doc:heading>A simple example</doc:heading>

        <p>
          Here we will federate all the built-in exchanges except for
          the default exchange, with a single upstream. The upstream
          will be defined to buffer messages when disconnected for up
          to one hour (3600000ms).
        </p>

        <p><b>Define an upstream:</b></p>
        <table>
        <tr>
          <th>rabbitmqctl</th>
          <td>
            <code>rabbitmqctl set_parameter federation-upstream my-upstream \<br/>'{"uri":"amqp://server-name","expires":3600000}'</code>
          </td>
        </tr>
        <tr>
          <th>rabbitmqctl (Windows)</th>
          <td>
            <code>rabbitmqctl set_parameter federation-upstream my-upstream ^<br/>"{""uri"":""amqp://server-name"",""expires"":3600000}"</code>
          </td>
        </tr>
        <tr>
          <th>HTTP API</th>
          <td>
            PUT <code>/api/parameters/federation-upstream/%2f/my-upstream</code><br/>
            <code>{"value":{"uri":"amqp://server-name","expires":3600000}}</code>
          </td>
        </tr>
        <tr>
          <th>Web UI</th>
          <td>
            Navigate to Admin > Federation Upstreams > Add a new
            upstream. Enter "my-upstream" next to Name,
            "amqp://server-name" next to URI, and 36000000 next to
            Expiry. Click Add upstream.
          </td>
        </tr>
        </table>

        <p><b>Then define a policy to use this upstream:</b></p>
        <table>
        <tr>
          <th>rabbitmqctl</th>
          <td>
            <code>rabbitmqctl set_policy --apply-to exchanges federate-me "^amq\." \<br/>'{"federation-upstream-set":"all"}'</code>
          </td>
        </tr>
        <tr>
          <th>rabbitmqctl (Windows)</th>
          <td>
            <code>rabbitmqctl set_policy --apply-to exchanges federate-me "^amq\." ^<br/>"{""federation-upstream-set"":""all""}"</code>
          </td>
        </tr>
        <tr>
          <th>HTTP API</th>
          <td>
            PUT <code>/api/policies/%2f/federate-me</code><br/>
            <code>{"pattern":"^amq\.", "definition":{"federation-upstream-set":"all"}, \<br/> "apply-to":"exchanges"}</code>
          </td>
        </tr>
        <tr>
          <th>Web UI</th>
          <td>
            Navigate to Admin > Policies > Add / update a
            policy. Enter "federate-me" next to "Name", "^amq\." next to
            "Pattern", choose "Exchanges" from the "Apply to" drop down list
            and enter "federation-upstream-set" = "all"
            in the first line next to "Policy". Click "Add" policy.
          </td>
        </tr>
        </table>

        <p>
          We tell the policy to federate all exchanges whose names
          begin with "amq." (i.e. all the built in exchanges except
          for the default exchange) with (implicit) low priority, and
          to federate them using the implicitly created upstream set
          "all", which includes our newly-created upstream.  Any other
          matching policy with a priority greater than 0 will take
          precedence over this policy. Keep in mind that <code>federate-me</code>
          is just a name we used for this example, you can use any
          string you want there.
        </p>

        <p>
          The built in exchanges should now be federated. You can
          check that the policy has applied to the exchanges by
          checking the exchanges list in management or with:
        </p>
        <pre class="code">rabbitmqctl list_exchanges name policy | grep federate-me</pre>
        <p>
          And you can check that federation links for each exchange have come up with Admin > Federation Status > Running Links or with:
        </p>
        <pre class="code">rabbitmqctl eval 'rabbit_federation_status:status().'</pre>
        <p>
          In general there will be one federation link for each
          upstream that is applied to an exchange. So for example with
          three exchanges and two upstreams for each there will be six
          links.
        </p>

        <p>
          For simple use this should be all you need - you will probably
          want to look at the <a href="uri-spec.html">AMQP URI
          reference</a>. The <a href="federation-reference.html">federation
          reference</a> contains more details on setting up upstreams and
          upstream sets.
        </p>
      </doc:subsection>
    </doc:section>

    <doc:section name="clustering">
      <doc:heading>Federating clusters</doc:heading>
      <p>
        Clusters can be linked together with federation just as single brokers
        can. To summarise how clustering and federation interact:
      </p>
      <ul>
        <li>
          You can define policies and parameters on any node in the downstream
          cluster; once defined on one node they will apply on all nodes.
        </li>
        <li>
          Exchange federation links will start on any node in the
          downstream cluster. They will fail over to other nodes if
          the node they are running on crashes or stops.
        </li>
        <li>
          Queue federation links will start on the same node as the
          downstream queue. If the downstream queue is mirrored, they
          will start on the same node as the master, and will be
          recreated on the same node as the new master if the node the
          existing master is running on crashes or stops.
        </li>
        <li>
          To connect to an upstream cluster, you can specify multiple URIs in
          a single upstream. The federation link process will choose one of
          these URIs at random each time it attempts to connect.
        </li>
      </ul>
    </doc:section>
  </body>
</html>
