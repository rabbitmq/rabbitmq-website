<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
]>
<!--
Copyright (c) 2007-2019 Pivotal Software, Inc.

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License,
Version 2.0 (the "License”); you may not use this file except in compliance
with the License. You may obtain a copy of the License at

https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<html xmlns="http://www.w3.org/1999/xhtml"
    xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
    xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Parameters and Policies</title>
  </head>
  <body>
  <doc:section name="intro">
    <doc:heading>Introduction</doc:heading>
    <p>
      While much of the configuration for RabbitMQ lives in
      the <a href="configure.html">configuration file</a>, some things
      do not mesh well with the use of a configuration file:
    </p>
    <ul>
      <li>If they need to be the same across all nodes in a cluster</li>
      <li>If they are likely to change at run time</li>
    </ul>
    <p>
      RabbitMQ calls these items <i>parameters</i>. Parameters can be
      set by
      invoking <a href="man/rabbitmqctl.8.html"><code>rabbitmqctl</code></a>
      or through <a href="management.html">the management plugin</a>'s HTTP API.
      There are 2 kinds of parameters: vhost-scoped parameters and global parameters.
      Vhost-scoped parameters are tied to a virtual host and consist
      of a component name, a name and a value.
      Global parameters are not tied to a particular virtual host and they consist
      of a name and value.
    </p>
    <p>
      One special case of parameters usage is <a
      href="#policies">policies</a>, which are used for specifying
      optional arguments for groups of queues and exchanges, as well
      as plugins such as <a href="/federation.html">Federation</a> and <a href="/shovel.html">Shovel</a>.
      Policies are vhost-scoped.
    </p>
  </doc:section>

  <doc:section name="parameter-management">
    <doc:heading>Global and Per-vhost Parameters</doc:heading>
    <p>
      As stated above, there are vhost-scoped parameters and global parameters.
      An example of vhost-scoped
      parameter is a federation upstream: it targets a component
      (<code>federation-upstream</code>), it has a name that identifies
      it, it's tied to a virtual host (federation links will target
      some resources of this virtual host), and its value defines connection
      parameters to an upstream broker.
      Vhost-scoped parameters can be set, cleared and listed:
    </p>
    <table>
      <tr>
        <th>rabbitmqctl</th>
        <td>
          <code>rabbitmqctl set_parameter {-p <i>vhost</i>} <i>component_name</i> <i>name</i> <i>value</i></code><br/>
          <code>rabbitmqctl clear_parameter {-p <i>vhost</i>} <i>component_name</i> <i>name</i></code><br/>
          <code>rabbitmqctl list_parameters {-p <i>vhost</i>}</code>
        </td>
      </tr>
      <tr>
        <th>HTTP API</th>
        <td>
          <code>PUT /api/parameters/<i>component_name</i>/<i>vhost</i>/<i>name</i></code><br/>
          <code>DELETE /api/parameters/<i>component_name</i>/<i>vhost</i>/<i>name</i></code><br/>
          <code>GET /api/parameters</code><br/>
        </td>
      </tr>
    </table>
    <p>
      Global parameters is the other kind of parameters.
      An example of a global parameter is the name of the cluster.
      Global parameters can be set, cleared and listed:
    </p>
    <table>
      <tr>
        <th>rabbitmqctl</th>
        <td>
          <code>rabbitmqctl set_global_parameter <i>name</i> <i>value</i></code><br/>
          <code>rabbitmqctl clear_global_parameter <i>name</i></code><br/>
          <code>rabbitmqctl list_global_parameters</code>
        </td>
      </tr>
      <tr>
        <th>HTTP API</th>
        <td>
          <code>PUT /api/global-parameters/<i>name</i></code><br/>
          <code>DELETE /api/global-parameters/<i>name</i></code><br/>
          <code>GET /api/global-parameters</code><br/>
        </td>
      </tr>
    </table>
    <p>
        Since a parameter value is a JSON document, you will usually
        need to quote it when creating one on the command line
        with <code>rabbitmqctl</code>. On Unix it is usually easiest to
        quote the whole document with single quotes, and use double
        quotes within it. On Windows you will have to escape every
        double quote. We give examples for both Unix and Windows for
        this reason.
      </p>
      <p>
        Parameters reside in the database used by RabbitMQ for
        definitions of virtual hosts, exchanges, queues, bindings, users
        and permissions. Parameters are exported along with other object
        definitions by the management plugin's export feature.
    </p>
    <p>
        Vhost-scoped parameters are used by the federation and shovel plugins.
        Global parameters are used by the MQTT plugin.
    </p>
    </doc:section>

    <doc:section name="policies">
      <doc:heading>Policies</doc:heading>

      <doc:subsection name="why-policies-exist">
        <doc:heading>Why Policies Exist</doc:heading>

        <p>
          Before we explain what policies are and how to use them it would
          be helpful to explain why they were introduced to RabbitMQ.
        </p>
        <p>
          In addition to mandatory properties
          (e.g. <code>durable</code> or <code>exclusive</code>),
          queues and exchanges in RabbitMQ have optional parameters
          (arguments), sometimes referred to as
          <code>x-arguments</code>. Those are provided by clients when
          they declare queues (exchanges) and control various optional
          features, such as <a href="/maxlength.html">queue length limit</a> or <a
          href="/ttl.html">TTL</a>.
        </p>
        <p>
          Client-controlled properties in some of the protocols RabbitMQ supports
          generally work well but they can be inflexible: updating TTL values
          or mirroring parameters that way required application changes, redeployment
          and queue re-declaration (which involves deletion). In addition, there is
          no way to control the extra arguments for groups of queues and exchanges.
          Policies were introduced to address the above pain points.
        </p>
        <p>
          A policy matches one or more queues by name (using a regular
          expression pattern) and appends its definition (a map of
          optional arguments) to the x-arguments of the matching
          queues. In other words, it is possible to configure
          x-arguments for multiple queues at once with a policy, and
          update them all at once by updating policy definition.
        </p>
        <p>
          In modern versions of RabbitMQ the set of features which can
          be controlled by policy is not the same as the set of
          features which can be controlled by client-provided
          arguments.
        </p>
      </doc:subsection>

      <doc:subsection name="how-policies-work">
        <doc:heading>How Policies Work</doc:heading>

        <p>
          Key policy attributes are

          <ul>
            <li>
              name: it can be anything but ASCII-based names without spaces
              are recommended
            </li>
            <li>
              pattern: a regular expression that matches one or more queue (exchange) names. Any
              regular expression can be used.
            </li>
            <li>
              definition: a set of key/value pairs (think a JSON document) that will be injected
              into the map of optional arguments of the matching queues and exchanges
            </li>
            <li>
              priority: see below
            </li>
          </ul>
        </p>
        <p>
          Policies automatically match against exchanges and queues,
          and help determine how they behave. Each exchange or queue
          will have at most one policy matching (see <a
          href="#combining-policy-definitions">Combining Policy
          Definitions</a> below), and each policy then injects a set
          of key-value pairs (policy definition) on to the matching
          queues (exchanges).
        </p>
        <p>
          Policies can match only queues, only exchanges, or both.
          This is controlled using the <code>apply-to</code> flag
          when a policy is created.
        </p>
        <p>
          Policies can change at any time. When a policy definition is
          updated, its effect on matching exchanges and queues will be
          reapplied. Usually it happens instantaneously but for very
          busy queues can take a bit of time (say, a few seconds).
        </p>
        <p>
          Policies are matched and applied every time an exchange or
          queue is created, not just when the policy is created.
        </p>
        <p>
          Policies can be used to configure
          the <a href="federation.html">federation
          plugin</a>, <a href="ha.html">mirrored
          queues</a>, <a href="ae.html">alternate exchanges</a>,
          <a href="dlx.html">dead lettering</a>,
          <a href="ttl.html">per-queue TTLs</a>, and
          <a href="maxlength.html">maximum queue length</a>.
        </p>
      </doc:subsection>

      <p>
        An example of defining a policy looks like:
      </p>

      <table>
        <tr>
          <th>rabbitmqctl</th>
          <td>
            <pre>rabbitmqctl set_policy federate-me "^amq\." '{"federation-upstream-set":"all"}' --priority 1 --apply-to exchanges</pre>
          </td>
        </tr>
        <tr>
          <th>rabbitmqctl (Windows)</th>
          <td>
            <pre>rabbitmqctl.bat set_policy federate-me "^amq\." "{""federation-upstream-set"":""all""}" --priority 1 --apply-to exchanges</pre>
          </td>
        </tr>
        <tr>
          <th>HTTP API</th>
          <td>
            <pre>PUT /api/policies/%2f/federate-me
                    {"pattern": "^amq\.",
                     "definition": {"federation-upstream-set":"all"},
                     "priority": 1,
                    "apply-to": "exchanges"}</pre>
          </td>
        </tr>
        <tr>
          <th>Web UI</th>
          <td>
            <ul>
              <li>
                Navigate to Admin > Policies > Add / update a
                policy.
              </li>
              <li>
                Enter "federate-me" next to Name, "^amq\." next to
                Pattern, and select "Exchanges" next to Apply to.
              </li>
              <li>
                Enter "federation-upstream-set" = "all" in the first line next to
                Policy.
              </li>
              <li>
                Click Add policy.
              </li>
            </ul>
          </td>
        </tr>
      </table>

      <p>
        This matches the value <code>"all"</code> with the key
        <code>"federation-upstream-set"</code> for all exchanges
        with names beginning with <code>"amq."</code>, in the
        virtual host <code>"/"</code>.
      </p>

      <p>
        The <code>"pattern"</code> argument is a regular expression used
        to match exchange or queue names.
      </p>

      <p>
        In the event that more than one policy can match a given
        exchange or queue, the policy with the greatest priority applies.
      </p>

      <p>
        The <code>"apply-to"</code> argument can be <code>"exchanges"</code>,
        <code>"queues"</code> or <code>"all"</code>. The <code>"apply-to"</code>
        and <code>"priority"</code> settings are optional, in which case the
        defaults are <code>"all"</code> and <code>"0"</code> respectively.
      </p>


      <doc:subsection name="combining-policy-definitions">
          <doc:heading>Combining policy definitions</doc:heading>

          <p>
            In some cases we might want to apply more than one policy
            definition to a resource.  For example we might need a queue to
            be federated and mirrored. At most one policy will apply to a
            resource at any given time, but we can apply multiple
            definitions in that policy.
          </p>
          <p>
            A federation policy definition would require an <em>upstream set</em>
            to be specified, so we would need the <code>federation-upstream-set</code>
            key in our definition. On the other hand to define some queues as mirrored,
            we would need the <code>ha-mode</code> key to be defined as well for the
            policy. Since the policy definition is just a JSON object, we can have both
            keys in the same policy definition.
          </p>
          <p>
            Here's an example:
          </p>

          <table>
            <tr>
              <th>rabbitmqctl</th>
              <td>
                <pre>rabbitmqctl set_policy ha-fed "^hf\." '{"federation-upstream-set":"all","ha-mode":"all"}' \
--priority 1 --apply-to queues</pre>
              </td>
            </tr>
            <tr>
              <th>rabbitmqctl (Windows)</th>
              <td>
                <pre>rabbitmqctl set_policy ha-fed "^hf\." "{""federation-upstream-set"":""all"", ""ha-mode"":""all""}" ^
--priority 1 --apply-to queues</pre>
              </td>
            </tr>
            <tr>
              <th>HTTP API</th>
              <td>
                <pre>PUT /api/policies/%2f/ha-fed
{"pattern": "^hf\.",
 "definition": {"federation-upstream-set":"all", "ha-mode": "all"},
 "priority": 1,
 "apply-to": "queues"}</pre>
              </td>
            </tr>
            <tr>
              <th>Web UI</th>
              <td>
                <ul>
                  <li>
                    Navigate to Admin > Policies > Add / update a
                    policy.
                  </li>
                  <li>
                    Enter "ha-fed" next to Name, "^hf\." next to
                    Pattern, and select "Queues" next to Apply to.
                  </li>
                  <li>
                    Enter "federation-upstream-set" = "all" in the first line next to
                    Policy.
                  </li>
                  <li>
                    Enter "ha-mode" = "all" on the next line.
                  </li>
                  <li>
                    Click Add policy.
                  </li>
                </ul>
              </td>
            </tr>
          </table>

          <p>
            By doing that all the queues matched by the pattern "^hf\." will have the <code>"federation-upstream-set"</code>
            and the <code>"ha-mode"</code> definitions applied to them.
          </p>
      </doc:subsection>
    </doc:section>

    <doc:section name="operator-policies">
      <doc:heading>Operator Policies</doc:heading>

      <doc:subsection name="why-operator-policies-exist">
        <doc:heading>Difference From Regular Policies</doc:heading>

        <p>
          Sometimes it is necessary for the operator to enforce certain policies.
          For example, it may be desirable to force <a href="/ttl.html">queue TTL</a> but
          still let other users manage policies. Operator policies allow for that.
        </p>
        <p>
          Operator policies are much like regular ones but their
          definitions are used differently. They are merged with
          regular policy definitions before the result is applied to
          matching queues.
        </p>
        <p>
          Because operator policies can unexpectedly change queue
          attributes and, in turn, application assumptions and
          semantics, they are limited only to a few arguments:

          <ul>
            <li><code>expires</code></li>
            <li><code>message-ttl</code></li>
            <li><code>max-length</code></li>
            <li><code>max-length-bytes</code></li>
          </ul>

          The arguments above are all numeric. The reason for that is explained
          in the following section.
        </p>
      </doc:subsection>

      <doc:subsection>
        <doc:heading>Conflict Resolution with Regular Policies</doc:heading>
        <p>
          An operator policy and a regular one can contain the same
          keys in their definitions. When it happens, the smaller
          value is chosen as effective. For example, if a matching
          operator policy definition sets <code>max-length</code> to
          50 and a matching regular policy definition uses the value of 100,
          the value of 50 will be used. If, however, regular policy's value
          was 20, it would be used. Operator policies, therefore, don't
          just overwrite regular policy values. They enforce limits but
          try to not override user-provided policies where possible.
        </p>
      </doc:subsection>


      <doc:subsection>
        <doc:heading>Defining Operator Policies</doc:heading>

        <p>
          Operator policies defined in a way very similar to regular (user) policies.
          When <code>rabbitmqctl</code> is used, the command name is <code>set_operator_policy</code>
          instead of <code>set_policy</code>. In the HTTP API, <code>/api/policies/</code> in request path
          becomes <code>/api/operator-policies/</code>:
        </p>

        <table>
            <tr>
                <th>rabbitmqctl</th>
                <td>
                    <pre>rabbitmqctl set_operator_policy transient-queue-ttl "^amq\." '{"expires":1800000}' --priority 1 --apply-to queues</pre>
                </td>
            </tr>
            <tr>
                <th>rabbitmqctl (Windows)</th>
                <td>
                  <pre>rabbitmqctl.bat set_operator_policy transient-queue-ttl "^amq\." "{""expires"": 1800000}" --priority 1 --apply-to queues</pre>
                </td>
            </tr>
            <tr>
                <th>HTTP API</th>
                <td>
                    <pre>PUT /api/operator-policies/%2f/transient-queue-ttl
                        {"pattern": "^amq\.",
                         "definition": {"expires": 1800000},
                         "priority": 1,
                         "apply-to": "queues"}</pre>
                </td>
            </tr>
            <tr>
                <th>Web UI</th>
                <td>
                    <ul>
                        <li>
                            Navigate to Admin > Policies > Add / update an operator
                            policy.
                        </li>
                        <li>
                            Enter "transient-queue-ttl" next to Name, "^amq\." next to
                            Pattern, and select "Queues" next to Apply to.
                        </li>
                        <li>
                            Enter "expires" = 1800000 in the first line next to
                            Policy.
                        </li>
                        <li>
                            Click Add policy.
                        </li>
                    </ul>
                </td>
            </tr>
        </table>
      </doc:subsection>
    </doc:section>
  </body>
</html>
