<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
]>
<!--
Copyright (c) 2007-2016 Pivotal Software, Inc.

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License,
Version 2.0 (the "License”); you may not use this file except in compliance
with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Configuring Static Shovels (v.3.7+)</title>
  </head>
  <body show-in-this-page="true">
    <doc:section name="configuration">
      <p>
        The configuration for the Shovel plugin must be defined in the in the
        <a href="configure.html#advanced-config-file">advanced configuration
        file</a> or using the <a href="configure.html#erlang-term-config-file">classic config format</a>.
        It is an Erlang term and consists of a single <code>shovels</code> clause:
      </p>
<pre class="sourcecode erlang">
  {rabbitmq_shovel, [ {shovels, [ {<em>shovel_name</em>, [ <em>...</em> ]}, <em>...</em> ]} ]}
</pre>
      <p>
        A (deliberately verbose)
        <a href="#example-config">example configuration</a> is given
        below.
      </p>
      <p>
        Each element of the list in the <code>shovels</code> clause is a
        named static shovel. The <code><em>shovel_name</em></code>s in the list
        must be distinct.
      </p>
      <p>
        Each shovel definition looks like this at the top level:
      </p>
      <pre class="sourcecode erlang">
          {<em>shovel_name</em>,
              [ {source, [ <em>...protocol specific config...</em> ]},
                {destination, [ <em>...protocol specific config...</em> ]},
                {ack_mode, <em>a_mode</em>},
                {reconnect_delay, <em>reconn_delay</em>}
              ]}
      </pre>
      <p>
        where <code><em>shovel_name</em></code> is the name of the
        shovel (an Erlang atom). The clauses for
        <code>source</code> and <code>destination</code> are mandatory and protocol
        specific. Currently AMQP 0.9.1 and AMQP 1.0 are supported. Source and destination
        do not have to use the same protocol. All the other clauses are optional.
      </p>
      <p>
        Each clause is fully described below.
      </p>

      <dl>
        <dt><a id="shovel_name"/><em>shovel_name</em></dt>
        <dd>
          <p>
            The name of the shovel (an Erlang atom). Note that Erlang
            atoms should be enclosed in single quotes (') if they do
            not begin with a lower-case letter or if they contain
            other characters than alphanumeric characters, underscore
            (_), or @.
          </p>
          <p>
            When using the shovel with clustering, if two or more
            nodes both define a shovel with the same name, the shovel
            worker will be started on just one of them. However if
            that node fails then the shovel will be recreated on a
            surviving node. It is important that if two or more nodes
            <em>do</em> define a shovel with the same name, then the
            configuration given for that shovel should be identical
            for all of them.
          </p>
        </dd>
        <dt><strong>ack_mode</strong></dt>
        <dd>
          <p>
            This clause is optional. In
          </p>
<pre class="sourcecode erlang">
  {ack_mode, <em>a_mode</em>}
</pre>
          <p>
            <code><em>a_mode</em></code> is one of
            <code>'no_ack'</code>, <code>'on_publish'</code> or
            <code>'on_confirm'</code>.
          </p>
          <dl>
            <dt><code>'no_ack'</code></dt>
            <dd>
              <p>
                indicates that no message acknowledgements are to be
                generated by the shovel (the broker automatically
                acknowledges all delivered messages);
              </p>
            </dd>
            <dt><code>'on_publish'</code></dt>
            <dd>
              <p>
                indicates that a message acknowledgement is to be sent
                (to the source broker) after each message is
                re-published to the destination;
              </p>
            </dd>
            <dt><code>'on_confirm'</code></dt>
            <dd>
              <p>
                indicates that publish confirmations are sought and that
                a message acknowledgement is to be sent (to the source
                broker) after each message publication is confirmed by
                the destination broker.
              </p>
            </dd>
          </dl>
          <p>
            The default is <code>'on_confirm'</code>, which is highly
            recommended. If other options are chosen performance may
            improve slightly, but messages are more likely to be lost in
            the event of failures.
          </p>
        </dd>
        <dt><strong>reconnect_delay</strong></dt>
        <dd>
          <p>
            This clause is optional. In
          </p>
<pre class="sourcecode erlang">
  {reconnect_delay, <em>reconn_delay</em>}
</pre>
          <p>
            <code><em>reconn_delay</em></code> is the number of
            seconds to wait before reconnecting in the event of
            connection failure (a non-negative number). For example:
          </p>
<pre class="sourcecode erlang">
  {reconnect_delay, 1.5}
</pre>
          <p>
            would delay for one and a half seconds before reconnecting
            after failure.
          </p>
          <p>
            If <code><em>reconn_delay</em></code> is <code>0</code>,
            then no reconnections occur: the shovel will stop after the
            first failure.
          </p>
          <p>
            The default <code><em>reconn_delay</em></code> is 5
            (seconds).
          </p>
        </dd>
        <dt><a id="source"/><strong>source</strong></dt>
        <dd>
          <p>
              Source is a mandatory clause and have different properties
              for different protocols. Two properties are common across all
              protocols:
          </p>
<pre class="sourcecode erlang">
  {source,
      [
       {protocol, <em>amqp091 | amqp10</em>},
       {uris, <em>uri_list</em>}
      ]}
</pre>
          <dl id="protocol">
            <dt><strong>protocol</strong></dt>
            <dd>
              <p>
                This clause is mandatory and can currently take one of two values:
                <p>
                    <code>amqp091</code> or <code>amqp10</code>
                </p>
              </p>
          </dd>
      </dl>
          <dl id="uris">
            <dt><strong>uris</strong></dt>
            <dd>
              <p>
                This clause is mandatory. In
              </p>
<pre class="sourcecode erlang">
  {uris, <em>uri_list</em>}
</pre>
              <p>
                <code><em>uri_list</em></code> is a list of URI
                broker <em>connections</em> (for the basic syntax of amqp091, see
                <a href="uri-spec.html">AMQP URI</a>), for example:
<pre class="sourcecode erlang">
    [ "amqp://fred:secret@host1.domain/my_vhost"
    , "amqp://john:secret@host2.domain/my_vhost"
    ]
</pre>
                If the <code>host</code> is omitted (not valid in a
                general AMQP URI), the shovel uses a <em>direct</em>
                connection to the broker in which it is running when the protocol
                also is <code>amqp091</code>. This avoids using the network stack.
              </p>
              <p>
                The syntax is extended to include a query part to
                permit the configuration of additional connection
                parameters. See the <a
                href="uri-query-parameters.html">query parameter
                reference</a> for the Erlang client's extensions
                (including those for SSL and SASL) which are available
                to the shovel.
              </p>
            </dd>
        </dl>

    <dl>
    <dt><a id="amqp091_source"/><strong>AMQP 0.9.1 source</strong></dt>
        <dd>
            <p>
          </p>
        </dd>
            <dt><a id="declarations"/><code><em>declarations</em></code></dt>
            <dd>
              <p>
                This clause is optional. In
              </p>
<pre class="sourcecode erlang">
  {declarations, <em>declaration_list</em>}
</pre>
              <p>
                the <code><em>declaration_list</em></code> is a list of
                AMQP methods (in the style of the Erlang client) which
                can be sent to the broker after connection and before
                shovelling.
              </p>
              <p>
                This allows any resources that may need to be set up to
                be configured, including the source queue and the
                destination exchanges. For example:
              </p>
<pre class="sourcecode erlang">
  {declarations, [ 'queue.declare',
                   {'queue.bind', [ {exchange, &lt;&lt;"my_exchange"&gt;&gt;},
                                    {queue,    &lt;&lt;&gt;&gt;}
                                  ]}
                 ]}
</pre>
              <p>
                will first declare an anonymous queue, and then bind it
                to the exchange called "<code>my_exchange</code>". (The
                queue parameter <code>&lt;&lt;&gt;&gt;</code> on <code>queue.bind</code>
                means 'use the queue last declared on this channel'.)
              </p>
              <p>
                Each element of the list is either an atom, being the
                name of an AMQP method, or a tuple with first element
                the method atom, and second element a property-list of
                parameter settings.
              </p>
              <p>
                If just the AMQP method atom is supplied all the
                parameters take their defaults (as illustrated with
                <code>'queue.declare'</code> above).
              </p>
              <p>
                If a tuple and property-list is supplied, then the
                properties in the list specify some or all of the
                parameters explicitly.
              </p>
              <p>
                Here is another example:
              </p>
<pre class="sourcecode erlang">
  {'exchange.declare', [ {exchange, &lt;&lt;"my_exchange"&gt;&gt;},
                         {type, &lt;&lt;"direct"&gt;&gt;},
                         durable
                       ]}
</pre>
              <p>
                will declare a durable, direct exchange called
                "<code>my_exchange</code>".
              </p>
              <p>
                For full details, consult the <a
                href="erlang-client-user-guide.html">Erlang Client</a>
                documentation.
              </p>
            </dd>

            <dt><code><em>queue</em></code></dt>
        <dd>
          <p>
            This clause is mandatory. In
          </p>
<pre class="sourcecode erlang">
  {queue, <em>queue_name</em>}
</pre>
          <p>
            <code><em>queue_name</em></code> is the name of the queue
            (as a binary string) to shovel messages from. For example:
          </p>
<pre class="sourcecode erlang">
  {queue, &lt;&lt;"my_work_queue"&gt;&gt;}
</pre>
          <p>
            This queue must exist. Use the resource
            <a href="#declarations"><code>declarations</code></a> to
            create the queue (or ensure it exists) first. If
            <code><em>queue_name</em></code> is
            <code>&lt;&lt;&gt;&gt;</code> (the empty binary string) the
            <em>most recently declared queue</em> in
            <code>declarations</code> is used. This allows anonymous
            queues to be declared and used.
          </p>
        </dd>

        <dt><code><em>prefetch_count</em></code></dt>
        <dd>
          <p>
            This clause is optional. In
          </p>
<pre class="sourcecode erlang">
  {prefetch_count, <em>count</em>}
</pre>
          <p>
            <code><em>count</em></code> is the maximum number of
            unacknowledged messages the shovel may hold at a time (a
            non-negative integer). For example:
          </p>
<pre class="sourcecode erlang">
  {prefetch_count, 1}
</pre>
          <p>
            If this number is zero there is no limit. The default is <code>1000</code>.
          </p>
        </dd>
      </dl>

      <dl>
        <dt>
          <a id="amqp10_source"/><strong>AMQP 1.0 source</strong></dt>
        <dd>
          <dt><code><em>source_address</em></code></dt>
          <dd>
            <p>
              This clause is mandatory. It takes the form:
            </p>
<pre class="sourcecode erlang">
  {source_address, &lt;&lt;"my-address"&gt;&gt;}
</pre>
            <p>
              This represents the source address of the
              sending AMQP 1.0 link.
            </p>
          </dd>
          <dt><code><em>prefetch_count</em></code></dt>
          <dd>
            <p>
              This clause is optional and sets the link credit amount that will
              be granted to the receiving link. The credit will be automatically
              renewed when it falls below a 10th of this value. The default is 1000.
              It takes the form:
<pre class="sourcecode erlang">
  {prefetch_count, 10}
</pre>
            </p>
          </dd>
        </dd>
      </dl>
    </dd>
  </dl>

        <dt><a id="destination"/><strong>destination</strong></dt>
        <dd>
          <p>
              Destination is a mandatory clause and have different properties
              for different protocols. Two properties are common across all
              protocols:
          </p>
<pre class="sourcecode erlang">
  {destination,
      [ {protocol, <em>amqp091 | amqp10</em>},
        {uris, <em>uri_list</em>}
      ]}
</pre>
  <dl>
    <dt><a id="amqp091_destination"/><strong>AMQP 0.9.1 destination</strong></dt>
    <dd>
      <dt><code><em>publish_properties</em></code></dt>
      <dd>
        <p>
          This clause is optional. It takes the form:
        </p>
<pre class="sourcecode erlang">
  {publish_properties, <em>property_list</em>}
</pre>
          <p>
            where the properties in the list are set on the
            basic.properties of each message before it is re-published.
          </p>
          <p>
            For example:
          </p>
<pre class="sourcecode erlang">
  {publish_properties, [ {delivery_mode, 2} ]}
</pre>
          <p>
            would mark all re-published messages persistent.
          </p>
          <p>
            By default the properties of the message are preserved, but
            this clause can be used to change, or set any property,
            including <code>content_type</code>,
            <code>content_encoding</code>, <code>headers</code>,
            <code>delivery_mode</code>, <code>priority</code>,
            <code>correlation_id</code>, <code>reply_to</code>,
            <code>expiration</code>, <code>message_id</code>,
            <code>timestamp</code>, <code>type</code>,
            <code>user_id</code>, <code>app_id</code> and
            <code>cluster_id</code>.
          </p>
        </dd>

        <dt><code><em>add_forward_headers</em></code></dt>
        <dd>
          <p>
            This clause is optional. It takes the form:
          </p>
<pre class="sourcecode erlang">
  {add_forward_headers, <em>boolean</em>}
</pre>
          <p>
            If <code>add_forward_headers</code> is set to true, an
            <code>x-shovelled</code> header is added or appended to
            the message before it is re-published.
          </p>
          <p>
            The default is not to add such a header.
          </p>
        </dd>

        <dt><code><em>add_timestamp_header</em></code></dt>
        <dd>
          <p>
            This clause is optional. It takes the form:
          </p>
<pre class="sourcecode erlang">
  {add_timestamp_header, <em>boolean</em>}
</pre>
          <p>
            If <code>add_timestamp_header</code> is set to true, an
            <code>x-shovelled-timestamp</code> header is added to
            the message before it is re-published.
            This header value is timestamp (in seconds since epoch) when
            message had been shovelled.
          </p>
          <p>
            The default is not to add such a header.
          </p>
        </dd>

        <dt><code><em>publish_fields</em></code></dt>
        <dd>
          <p>
            This clause is optional. It takes the form:
          </p>
<pre class="sourcecode erlang">
  {publish_fields, <em>property_list</em>}
</pre>
          <p>
            where the properties in the list are used to set the
            <em>fields</em> on the <code>basic.publish</code> method
            used to re-publish messages.
          </p>
          <p>
           By default the messages are re-published using the original
           exchange name and routing key, for example.  By specifying:
         </p>
<pre class="sourcecode erlang">
  {publish_fields, [ {exchange, &lt;&lt;"my_exchange"&gt;&gt;},
                     {routing_key, &lt;&lt;"from_shovel"&gt;&gt;}
                   ]}
</pre>
          <p>
            messages would be re-published to an explicit exchange name
            with an explicit, fixed routing key.
          </p>
        <dt><a id="amqp10_destination"/><strong>AMQP 1.0 destination</strong></dt>
        <dd>
          <dt><code><em>target_address</em></code></dt>
          <dd>
            <p>
              This clause is mandatory. It takes the form:
            </p>
<pre class="sourcecode erlang">
  {target_address, &lt;&lt;"my-address"&gt;&gt;}
</pre>
            <p>
              This represents the target address of the
              sending AMQP 1.0 link.
            </p>
          </dd>
          <dt><code><em>properties</em></code></dt>
          <dd>
            <p>
              This clause is optional. It takes the form:
            </p>
<pre class="sourcecode erlang">
  {properties, <em>property_list</em>}
</pre>
            <p>
              This clause is optional and includes any additional properties
              to be added when re-publishing a message. The available keys include
              <code>message_id, user_id, to, subject, reply_to, correlation_id, content_type, content_encoding, absolute_expiry_time, creation_time</code>.
              See the AMQP 1.0 spec (§3.2.4) for the all the available keys and values.
            </p>
          </dd>
          <dt><code><em>application_properties</em></code></dt>
          <dd>
            <p>
              This clause is optional. It takes the form:
            </p>
<pre class="sourcecode erlang">
  {application_properties, <em>property_list</em>}
</pre>
            <p>
              This declares any additional application properties
              to be added when re-publishing a message. Keys and values should
              be <code>binary strings</code>
            </p>
          </dd>
          <dt><code><em>message_annotations</em></code></dt>
          <dd>
            <p>
              This clause is optional. It takes the form:
            </p>
<pre class="sourcecode erlang">
  {message_annotations, <em>property_list</em>}
</pre>
            <p>
              This declares includes any additional message annotations
              to be added when re-publishing a message.
            </p>
          </dd>
          <dt><code><em>add_forward_headers</em></code></dt>
          <dd>
            <p>
              This clause is optional. It takes the form:
            </p>
<pre class="sourcecode erlang">
  {add_forward_headers, <em>boolean</em>}
</pre>
            <p>
              When set to true it will add application properties for the
              following keys: <code>shovelled-by, shovel-type, shovel-name.</code>
            </p>
          </dd>
          <dt><code><em>add_timestamp_header</em></code></dt>
          <dd>
            <p>
            This clause is optional. It takes the form:
          </p>
<pre class="sourcecode erlang">
  {add_timestamp_header, <em>boolean</em>}
</pre>
            <p>
              When set to true it will  set the
              <code>creation_time</code> property to the time the message was
              shovelled.
            </p>
          </dd>
        </dd>
      </dd>
    </dd>
  </dl>
</dd>

    </doc:section>

    <doc:section name="example-config">
      <doc:heading>Example Configuration</doc:heading>
      <p>
        A verbose shovel configuration between AMQP 0.9.1 endpoints might look like this:
      </p>
<pre class="sourcecode erlang">
  {rabbitmq_shovel,
    [ {shovels, [ {my_first_shovel,
                    [ {source,
                        [ {protocol, amqp091},
                          {uris, [ "amqp://fred:secret@host1.domain/my_vhost",
                                   "amqp://john:secret@host2.domain/my_vhost" ]},
                          {declarations, [ {'exchange.declare',
                                              [ {exchange, &lt;&lt;"my_fanout"&gt;&gt;},
                                                {type, &lt;&lt;"fanout"&gt;&gt;},
                                                durable
                                              ]},
                                           {'queue.declare',
                                              [{arguments,
                                                 [{&lt;&lt;"x-message-ttl"&gt;&gt;, long, 60000}]}]},
                                           {'queue.bind',
                                              [ {exchange, &lt;&lt;"my_fanout"&gt;&gt;},
                                                {queue,    &lt;&lt;&gt;&gt;}
                                              ]}
                                            ]},
                          {queue, &lt;&lt;&gt;&gt;},
                          {prefetch_count, 10}
                        ]},
                      {destination,
                        [ {protocol, amqp091},
                          {uris, ["amqp://"]},
                          {declarations, [ {'exchange.declare',
                                              [ {exchange, &lt;&lt;"my_direct"&gt;&gt;},
                                                {type, &lt;&lt;"direct"&gt;&gt;},
                                                durable
                                              ]}
                                         ]},
                         {publish_properties, [ {delivery_mode, 2} ]},
                         {add_forward_headers, true},
                         {publish_fields, [ {exchange, &lt;&lt;"my_direct"&gt;&gt;},
                                            {routing_key, &lt;&lt;"from_shovel"&gt;&gt;}
                                           ]}
                            ]},
                      {ack_mode, on_confirm},
                      {reconnect_delay, 5}
                    ]}
                ]}
    ]}
</pre>
      <p>
        The configuration above defines a single shovel called
        '<code>my_first_shovel</code>'.
      </p>
      <p>
        '<code>my_first_shovel</code>' will connect to a broker on
        either <code>host1</code> or <code>host2</code> (as source), and
        directly to the local broker (as destination). It will reconnect
        to the other source broker on failure, after a delay of 5
        seconds.
      </p>
      <p>
        When connected to the source it will declare a a direct, fanout exchange
        called "<code>my_fanout</code>", an anonymous queue with a <a
        href="ttl.html#per-queue-message-ttl">per-queue message ttl</a>, and
        bind the queue to the exchange.
      </p>
      <p>
        When connected to the destination (the local broker) it will declare a
        durable, direct exchange called "<code>my_direct</code>".
      </p>
      <p>
        This shovel will re-publish messages sent to the anonymous queue on the
        source to the local exchange with the fixed routing key
        "<code>from_shovel</code>". The messages will be persistent and only
        acknowledged after receiving a publish confirm from the local broker.
      </p>
      <p>
        The shovel consumer will not be allowed to hold more than ten
        unacknowledged messages at a time.
      </p>
    </doc:section>

    <doc:section name="example-config-amqp10-amqp091">
      <doc:heading>Example Configuration (1.0 source - 0.9.1 destination)</doc:heading>
      <p>
        A verbose shovel configuration between an AMQP 1.0 source and an
        AMQP 0.9.1 destination might look like this:
      </p>
<pre class="sourcecode erlang">
{rabbitmq_shovel,
 [ {shovels, [ {my_first_shovel,
                [ {source,
                   [ {protocol, amqp10,
                      uris, [ "amqp://fred:secret@host1.domain/my_vhost",
                            ]},
                     {source_address, &lt;&lt;"my-source"&gt;&gt;},
                     {prefetch_count, 10}
                   ]},
                  {destination,
                     [ {protocol, amqp091},
                       {uris, ["amqp://"]},
                       {declarations, [ {'exchange.declare',
                                         [ {exchange, &lt;&lt;"my_direct"&gt;&gt;},
                                           {type, &lt;&lt;"direct"&gt;&gt;},
                                           durable
                                         ]}
                                      ]},
                       {publish_properties, [ {delivery_mode, 2} ]},
                       {add_forward_headers, true},
                       {publish_fields, [ {exchange, &lt;&lt;"my_direct"&gt;&gt;},
                                          {routing_key, &lt;&lt;"from_shovel"&gt;&gt;}
                                        ]}
                     ]},
                  {ack_mode, on_confirm},
                  {reconnect_delay, 5}
                ]}
             ]}
 ]}
</pre>
    </doc:section>
    <doc:section name="example-config-amqp091-amqp10">
      <doc:heading>Example Configuration (0.9.1 source - 1.0 destination)</doc:heading>
      <p>
        A verbose shovel configuration between an AMQP 0.9.1 Source and an
        AMQP 1.0 destination might look like this:
      </p>
<pre class="sourcecode erlang">
{rabbitmq_shovel,
 [ {shovels, [ {my_first_shovel,
                    [ {source,
                        [ {protocol, amqp091},
                          {uris, [ "amqp://fred:secret@host1.domain/my_vhost",
                                   "amqp://john:secret@host2.domain/my_vhost" ]},
                          {declarations, [ {'exchange.declare',
                                              [ {exchange, &lt;&lt;"my_fanout"&gt;&gt;},
                                                {type, &lt;&lt;"fanout"&gt;&gt;},
                                                durable
                                              ]},
                                           {'queue.declare',
                                              [{arguments,
                                                 [{&lt;&lt;"x-message-ttl"&gt;&gt;, long, 60000}]}]},
                                           {'queue.bind',
                                              [ {exchange, &lt;&lt;"my_fanout"&gt;&gt;},
                                                {queue,    &lt;&lt;&gt;&gt;}
                                              ]}
                                            ]},
                          {queue, &lt;&lt;&gt;&gt;},
                          {prefetch_count, 10}
                        ]},
                  {destination,
                    [ {protocol, amqp10},
                      {uris, ["amqp://host:5672"]},
                      {properties, [ {user_id, &lt;&lt;"my-user"&gt;&gt;},
                      {application_properties, [ {&lt;&lt;"my-prop"&gt;&gt;, &lt;&lt;"my-prop-value"&gt;&gt;},
                      {add_forward_headers, true}
                     ]},
                  {ack_mode, on_confirm},
                  {reconnect_delay, 5}
                ]}
             ]}
 ]}
</pre>
    </doc:section>
  </body>
</html>
