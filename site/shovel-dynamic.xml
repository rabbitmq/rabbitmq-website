<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
]>
<!--
Copyright (c) 2007-2016 Pivotal Software, Inc.

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License, 
Version 2.0 (the "License”); you may not use this file except in compliance 
with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Configuring Dynamic Shovels</title>
  </head>
  <body>
    <doc:section name="configuration">
      <p>
        Information about dynamic shovels is stored in the RabbitMQ database,
        along with users, permissions, queues, etc. Every shovel is defined by
        a corresponding named <a href="parameters.html">parameter</a>.
      </p>
      <p>
        Parameters can be defined using <code>rabbitmqctl</code>, through the
        management HTTP API, or (with
        the <code>rabbitmq_shovel_management</code> plugin installed) through
        the management plugin's web UI.
      </p>

      <doc:subsection name="tutorial">
        <doc:heading>A simple example</doc:heading>

        <p>
          Here we will consume messages from the queue <i>my-queue</i> on the
          local broker, and push them out to the queue <i>another-queue</i> on
          a remote broker.
        </p>

        <table>
        <tr>
          <th>rabbitmqctl</th>
          <td>
            <code>rabbitmqctl set_parameter shovel my-shovel \<br/>'{"src-uri": "amqp://", "src-queue": "my-queue", \<br/>"dest-uri": "amqp://remote-server", "dest-queue": "another-queue"}'</code>
          </td>
        </tr>
        <tr>
          <th>rabbitmqctl (Windows)</th>
          <td>
            <code>rabbitmqctl set_parameter shovel my-shovel ^<br/>"{""src-uri"":""amqp://"", ""src-queue"": ""my-queue"", ^<br/>""dest-uri"": ""amqp://remote-server"", ""dest-queue"": ""another-queue""}"</code>
          </td>
        </tr>
        <tr>
          <th>HTTP API</th>
          <td>
            PUT <code>/api/parameters/shovel/%2f/my-shovel</code><br/>
            <pre>{"value":{"src-uri":  "amqp://",              "src-queue":  "my-queue",
          "dest-uri": "amqp://remote-server", "dest-queue": "another-queue"}}</pre>
          </td>
        </tr>
        <tr>
          <th>Web UI</th>
          <td>
            Navigate to Admin > Shovel Management > Add a new shovel. Enter
            "my-shovel" next to Name, "amqp://" and "my-queue" next to Source,
            and "amqp://remote-server" and "another-queue" next Destination
            Expiry. Click Add shovel.
          </td>
        </tr>
        </table>
      </doc:subsection>
    </doc:section>

    <doc:section name="configuration">
      <doc:heading>Configuration reference</doc:heading>

      <h4>Source</h4>

      <dl>
        <dt><code>src-uri</code></dt>
        <dd>
          <p>
            The AMQP URI(s) for the source. Mandatory. See
            the <a href="uri-spec.html">AMQP URI reference</a> for
            information on how RabbitMQ treats AMQP URIs in general,
            and the <a href="uri-query-parameters.html">query parameter
              reference</a> for the Erlang client's extensions
            (including those for SSL and SASL) which are available to
            the shovel.
          </p>
          <p>
            Note that this field can either be a string, or a list of
            strings. If more than one string is provided, the shovel will
            randomly pick <b>one</b> URI from the list. This can be used to
            connect to a cluster and ensure the link will eventually
            find another node in the event that one fails. It's probably not a
            great idea to use multiple URIs that do <b>not</b> point to the
            same cluster.
          </p>
        </dd>

        <dt><code>src-queue</code></dt>
        <dd>
          <p>
            The queue from which to consume. Either this
            or <code>src-exchange</code> (but not both) must be set.
          </p>
          <p>
            If the source queue does not exist on the source broker, it will
            be declared as a durable queue with no arguments.
          </p>
        </dd>

        <dt><code>src-exchange</code></dt>
        <dd>
          <p>
            The exchange from which to consume. Either this
            or <code>src-queue</code> (but not both) must be set.
          </p>
          <p>
            The shovel will declare an exclusive queue and bind it to the
            named exchange with <code>src-exchange-key</code> before consuming
            from the queue.
          </p>
          <p>
            If the source exchange does not exist on the source broker, it
            will be not declared; the shovel will fail to start.
          </p>
        </dd>

        <dt><code>src-exchange-key</code></dt>
        <dd>
          <p>
            Routing key when using <code>src-exchange</code>
          </p>
        </dd>
      </dl>

      <h4>Destination</h4>

      <dl>
        <dt><code>dest-uri</code></dt>
        <dd>
          <p>
            The AMQP URI(s) for the
            destination. Mandatory. See <code>src-uri</code> above.
          </p>
        </dd>

        <dt><code>dest-queue</code></dt>
        <dd>
          <p>
            The queue to which messages should be published. Either this
            or <code>dest-exchange</code> (but not both) may be set. If
            neither is set then messages are republished with their original
            exchange and routing key.
          </p>
          <p>
            If the destination queue does not exist on the source broker, it
            will be declared as a durable queue with no arguments.
          </p>
        </dd>

        <dt><code>dest-exchange</code></dt>
        <dd>
          <p>
            The exchange to which messages should be published. Either this
            or <code>dest-queue</code> (but not both) may be set.
          </p>
          <p>
            If the destination exchange does not exist on the source broker,
            it will be not declared; the shovel will fail to start.
          </p>
        </dd>

        <dt><code>dest-exchange-key</code></dt>
        <dd>
          <p>
            Routing key when using <code>dest-exchange</code>. If this is not
            set, the original message's routing key will be used.
          </p>
        </dd>
      </dl>

      <h4>Shovel</h4>

      <dl>
        <dt><code>prefetch-count</code></dt>
        <dd>
          The maximum number of unacknowledged messages copied over a shovel at
          any one time. Default is <code>1000</code>.
        </dd>
        <dt><code>reconnect-delay</code></dt>
        <dd>
            The duration (in seconds) to wait before reconnecting to the
            brokers after being disconnected at either end. Default is 1.
        </dd>
        <dt><code>publish-properties</code></dt>
        <dd>
           Properties to overwrite when shovelling messages. Setting
           headers this way is not currently supported. Default is {}.
        </dd>
        <dt><code>add-forward-headers</code></dt>
        <dd>
          Whether to add <code>x-shovelled</code> headers to the
          shovelled messages indicating where they have been shovelled
          from and to. Default is false.
        </dd>
        <dt><code>add-timestamp-header</code></dt>
        <dd>
          Whether to add <code>x-shovelled-timestamp</code> headers to the
          shovelled messages  containing timestamp (in seconds since epoch)
          when message had been shovelled. Default is false.
        </dd>
        <dt><code>ack-mode</code></dt>
        <dd>
          <p>
            Determines how the shovel should acknowledge messages. If set
            to <code>on-confirm</code> (the default), messages are
            acknowledged to the source broker after they have been confirmed
            by the destination. This handles network errors and broker
            failures without losing messages, and is the slowest option.
          </p>
          <p>
            If set to <code>on-publish</code>, messages are acknowledged to
            the source broker after they have been published at the
            destination. This handles network errors without losing messages,
            but may lose messages in the event of broker failures.
          </p>
          <p>
            If set to <code>no-ack</code>, message acknowledgements are not
            used. This is the fastest option, but may lose messages in the
            event of network or broker failures.
          </p>
        </dd>
        <dt><code>delete-after</code></dt>
        <dd>
          <p>
            Determines when (if ever) the shovel should delete
            itself. This can be useful if the shovel is being treated
            as more of a move operation - i.e. being used to move
            messages from one queue to another on an ad hoc basis.
          </p>
          <p>
            The default is <code>never</code>, meaning the
            shovel should never delete itself.
          </p>
          <p>
            If set to <code>queue-length</code> then the shovel will
            measure the length of the source queue when starting up,
            and delete itself after it has transfered that many
            messages.
          </p>
          <p>
            If set to an integer, then the shovel will transfer that
            number of messages before deleting itself.
          </p>
        </dd>
      </dl>

    </doc:section>

  </body>
</html>
