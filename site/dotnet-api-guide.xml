<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
]>
<!--
Copyright (c) 2007-2019 Pivotal Software, Inc.

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License,
Version 2.0 (the "License”); you may not use this file except in compliance
with the License. You may obtain a copy of the License at

https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc">
    <head>
        <title>.NET/C# Client API Guide</title>
    </head>

    <body show-in-this-page="true">
      <doc:section name="overview">

        <p class="intro">
          This guide covers <a href="/dotnet.html">RabbitMQ .NET/C# client</a> and its public API.
          It assumes that the <a href="https://www.nuget.org/packages/RabbitMQ.Client">most recent major version of the client</a> is used
          and the reader is familiar with <a href="/getstarted.html">the basics</a>.

          Key sections of the guide are:

          <ul>
            <li><a href="#major-api-elements">Important interfaces and classes</a> in the public API</li>
            <li><a href="#connecting">Connecting to RabbitMQ</a></li>
            <li><a href="#connection-and-channel-lifspan">Connection and Channel Lifespan</a></li>
            <li><a href="#exchanges-and-queues">Using Exchanges and Queues</a></li>
            <li><a href="#publishing">Publishing Messages</a></li>
            <li><a href="#consuming">Consuming Using a Subscription</a></li>
            <li><a href="#concurrency">Concurrency Considerations and Safety</a></li>
            <li><a href="#recovery">Automatic Recovery From Network Failures</a></li>
          </ul>
        </p>

        <p>
          4.x and 5.x release series of this library <a href="/dotnet.html#overview">require .NET 4.5.1+ or a .NET Standard 1.5+ implementation</a> (e.g. .NET Core 2.x).
        </p>

        <p>
          The library is open source, developed <a href="https://github.com/rabbitmq/rabbitmq-dotnet-client/">on GitHub</a>, and is double-licensed under the

          <ul>
            <li><a href="https://www.apache.org/licenses/LICENSE-2.0.html">Apache Public License 2.0</a></li>
            <li><a href="https://www.mozilla.org/MPL/1.1/">Mozilla Public License</a></li>
          </ul>

          This means that the user can consider the library to be licensed under any of the licenses from the list above.
          For example, the user may choose the Apache Public License 2.0 and include this client into
          a commercial product.
        </p>

        <p>
          The client API is closely modelled on the <a href="/tutorials/amqp-concepts.html">AMQP 0-9-1 protocol model</a>,
          with additional abstractions for ease of use.
        </p>

        <p>
          An <a href="&dir-current-docfx;">API reference</a> is available separately.
        </p>
      </doc:section>


      <doc:section name="major-api-elements">
        <doc:heading>Major namespaces, interfaces and classes</doc:heading>
        <p>
            The core API interfaces and classes are defined in the <code>RabbitMQ.Client</code> namespace:

<pre class="lang-csharp">
using RabbitMQ.Client;
</pre>

        The core API interfaces and classes are

          <ul>
            <li><code>IModel</code>: represents an AMQP 0-9-1 channel, and provides most
            of the operations (protocol methods).</li>

            <li><code>IConnection</code>: represents an AMQP 0-9-1 connection</li>

            <li><code>ConnectionFactory</code>: constructs <code>IConnection</code> instances</li>

            <li><code>IBasicConsumer</code>: represents a message consumer</li>
          </ul>

          Other useful interfaces and classes include:

          <ul>
            <li><code>DefaultBasicConsumer</code>: commonly used base class for consumers</li>
          </ul>

          Public namespaces other than <code>RabbitMQ.Client</code> include:

          <ul>
              <li>
                <code>RabbitMQ.Client.Events</code>: various events and event handlers
                that are part of the client library, including <code>EventingBasicConsumer</code>,
                a consumer implementation built around C# event handlers.
              </li>
              <li>
                <code>RabbitMQ.Client.Exceptions</code>: exceptions visible to the user.
              </li>
          </ul>
        </p>

        <p>
          All other namespaces are reserved for private implementation detail of
          the library, although members of private namespaces are usually made
          available to applications using the library in order to permit
          developers to implement workarounds for faults and gaps they
          discover in the library implementation. Applications cannot rely on
          any classes, interfaces, member variables etc. that appear within
          private namespaces remaining stable across releases of the library.
        </p>
      </doc:section>


      <doc:section name="connecting">
        <doc:heading>Connecting to RabbitMQ</doc:heading>
        <p>
          To connect to a RabbitMQ, it is necessary to instantiate a <code>ConnectionFactory</code>
          and configure it to use desired hostname, virtual host, and credentials. Then
          use <code>ConnectionFactory.CreateConnection()</code> to open a connection.

          The following two code snippets connect to a RabbitMQ node on <code>hostName</code>:

<pre class="lang-csharp">
ConnectionFactory factory = new ConnectionFactory();
// "guest"/"guest" by default, limited to localhost connections
factory.UserName = user;
factory.Password = pass;
factory.VirtualHost = vhost;
factory.HostName = hostName;

IConnection conn = factory.CreateConnection();
</pre>

<pre class="lang-csharp">
ConnectionFactory factory = new ConnectionFactory();
factory.Uri = "amqp://user:pass@hostName:port/vhost";

IConnection conn = factory.CreateConnection();
</pre>
        </p>

        <p>
          Since the .NET client uses a stricter interpretation of the <a href="/uri-spec.html">AMQP 0-9-1 URI
          spec</a> than the other clients, care must be taken when using URIs.  In
          particular, the host part must not be omitted and virtual hosts with
          empty names are not addressable.

          All factory properties have default values. The default value for a property will be used if the property remains unassigned prior to creating a connection:

          <table>
            <thead>
              <tr>
                <td>Property</td>
                <td>Default Value</td>
              </tr>
            </thead>

            <tr>
              <td>Username</td>
              <td><code>"guest"</code></td>
            </tr>

            <tr>
              <td>Password</td>
              <td><code>"guest"</code></td>
            </tr>

            <tr>
              <td>Virtual host</td>
              <td><code>"/"</code></td>
            </tr>

            <tr>
              <td>Hostname</td>
              <td><code>"localhost"</code></td>
            </tr>

            <tr>
              <td>port</td>

              <td>
                <code>5672</code> for regular connections,
                <code>5671</code> for <a href="/ssl.html">connections that use TLS</a>
              </td>
            </tr>
          </table>
        </p>

        <p>
          Note that <a href="/access-control.html">user guest can only connect from localhost</a> by default.
          This is to limit well-known credential use in production systems.
        </p>

        <p>
          The <code>IConnection</code> interface can then be used to open a channel:

<pre class="lang-csharp">
IModel channel = conn.CreateModel();
</pre>

          The channel can now be used to send and receive messages,
          as described in subsequent sections.
        </p>

        <p>
          Successful and unsuccessful client connection events can be <a href="/networking.html#logging">observed in server node logs</a>.
        </p>
      </doc:section>

      <doc:section name="disconnecting">
        <doc:heading>Disconnecting from RabbitMQ</doc:heading>
        <p>
          To disconnect, simply close the channel and the connection:

<pre class="lang-csharp">
channel.Close();
conn.Close();
</pre>

          Disposing channel and connection objects is not enough, they must be explicitly closed
          with the API methods from the example above.
        </p>

        <p>
          Note that closing the channel may be considered good practice, but isn&#8217;t strictly necessary here - it will be done
          automatically anyway when the underlying connection is closed.
        </p>

        <p>
          Client disconnection events can be <a href="/networking.html#logging">observed in server node logs</a>.
        </p>
      </doc:section>

      <doc:section name="connection-and-channel-lifspan">
        <doc:heading>Connection and Channel Lifespan</doc:heading>

        <p>
          Connections are meant to be long-lived. The underlying protocol is designed and optimized for
          long running connections. That means that opening a new connection per operation,
          e.g. a message published, is unnecessary and strongly discouraged as it will introduce a lot of
          network roundtrips and overhead.
        </p>

        <p>
          Channels are also meant to be long-lived but since many recoverable protocol errors will
          result in channel closure, channel lifespan could be shorter than that of its connection.
          Closing and opening new channels per operation is usually unnecessary but can be
          appropriate. When in doubt, consider reusing channels fist.
        </p>

        <p>
          Channel-level exceptions such as attempts to consume from a
          queue that does not exist will result in channel closure. A closed channel can no
          longer be used and will not receive any more events from the server (such
          as message deliveries). Channel-level exceptions will be logged by RabbitMQ
          and will initiate a shutdown sequence for the channel (see below).
        </p>
      </doc:section>


      <doc:section name="exchanges-and-queues">
        <doc:heading>Using Exchanges and Queues</doc:heading>

        <p>
          Client applications work with exchanges and <a href="/queues.html">queues</a>,
          the high-level <a href="/tutorials/amqp-concepts.html">building blocks of the protocol</a>.
          These must be "declared" before they can be
          used. Declaring either type of object simply ensures that one of that
          name exists, creating it if necessary.

          Continuing the previous example, the following code declares an
          exchange and a queue, then binds them together.

<pre class="lang-csharp">
model.ExchangeDeclare(exchangeName, ExchangeType.Direct);
model.QueueDeclare(queueName, false, false, false, null);
model.QueueBind(queueName, exchangeName, routingKey, null);
</pre>

          This will actively declare the following objects:

          <ul>
            <li>a non-durable, non-autodelete exchange of "direct" type</li>
            <li>a non-durable, non-autodelete, non-exclusive queue</li>
          </ul>
        </p>

        <p>
          The exchange can be customised by using additional parameters.
          The above code then binds the queue to the exchange with the given
          routing key.
        </p>

        <p>
          Many channel API (<code>IModel</code>) methods are overloaded. The convenient
          short form of <code>ExchangeDeclare</code> uses sensible defaults. There are
          also longer forms with more parameters, to let you override these
          defaults as necessary, giving full control where needed.

          This "short version, long version" pattern is used throughout the API.
        </p>


        <doc:subsection name="passive-declaration">
          <doc:heading>Passive Declaration</doc:heading>

          <p>
            Queues and exchanges can be declared "passively". A passive declare simply checks that the entity
            with the provided name exists. If it does, the operation is a no-op. For queues successful
            passive declares will return the same information as non-passive ones, namely the number of
            consumers and messages in <a href="/confirms.html">ready state</a> in the queue.

            If the entity does not exist, the operation fails with a channel level exception. The channel
            cannot be used after that. A new channel should be opened. It is common to use one-off (temporary)
            channels for passive declarations.
          </p>

          <p>
            <code>IModel#QueueDeclarePassive</code> and <code>IModel#ExchangeDeclarePassive</code> are the
            methods used for passive declaration. The following example demonstrates <code>IModel#QueueDeclarePassive</code>:

<pre class="lang-csharp">
var response = model.QueueDeclarePassive("queue-name");
// returns the number of messages in Ready state in the queue
response.MessageCount;
// returns the number of consumers the queue has
response.ConsumerCount;
</pre>

            <code>IModel#ExchangeDeclarePassive</code>'s return value contains no useful information. Therefore
            if the method returns and no channel exceptions occurs, it means that the exchange does exist.
          </p>
        </doc:subsection>

        <doc:subsection name="nowait-methods">
          <doc:heading>Operations with Optional Responses</doc:heading>

          <p>
            Some common operations also have a "no wait" version which won't wait for server
            response. For example, to declare a queue and instruct the server to not send any
            response, use

            <pre class="lang-csharp">model.QueueDeclareNoWait(queueName, true, false, false, null);</pre>

            The "no wait" versions are more efficient but offer lower safety guarantees, e.g. they
            are more dependent on the <a href="/heartbeats.html">heartbeat mechanism</a> for detection of failed operations.
            When in doubt, start with the standard version. The "no wait" versions are only needed in scenarios
            with high topology (queue, binding) churn.
          </p>
        </doc:subsection>


        <doc:subsection name="deleting-entities">
          <doc:heading>Deleting Entities and Purging Messages</doc:heading>

          <p>
            A queue or exchange can be explicitly deleted:

            <pre class="lang-csharp">model.QueueDelete("queue-name", false, false)</pre>

            It is possible to delete a queue only if it is empty:

            <pre class="lang-csharp">model.QueueDelete("queue-name", false, true)</pre>

            or if it is not used (does not have any consumers):

            <pre class="lang-csharp">model.QueueDelete("queue-name", true, false)</pre>
          </p>

          <p>
            A queue can be purged (all of its messages deleted):

            <pre class="lang-csharp">model.QueuePurge("queue-name")</pre>
          </p>
        </doc:subsection>
      </doc:section>

      <doc:section name="publishing">
        <doc:heading>Publishing Messages</doc:heading>

        <p>
          To publish a message to an exchange, use <code>IModel.BasicPublish</code> as
          follows:

<pre class="lang-csharp">
byte[] messageBodyBytes = System.Text.Encoding.UTF8.GetBytes("Hello, world!");
model.BasicPublish(exchangeName, routingKey, null, messageBodyBytes);
</pre>

          For fine control, you can use overloaded variants to specify the
          mandatory flag, or specify messages properties:

<pre class="lang-csharp">
byte[] messageBodyBytes = System.Text.Encoding.UTF8.GetBytes("Hello, world!");
IBasicProperties props = model.CreateBasicProperties();
props.ContentType = "text/plain";
props.DeliveryMode = 2;
model.BasicPublish(exchangeName,
                   routingKey, props,
                   messageBodyBytes);
</pre>

          This sends a message with delivery mode 2 (persistent) and
          content-type "text/plain". See the definition of the <code>IBasicProperties</code>
          interface for more information about the available message properties.
          </p>
          <p>
            In the following example, we publish a message with custom headers:

<pre class="lang-csharp">
byte[] messageBodyBytes = System.Text.Encoding.UTF8.GetBytes("Hello, world!");

IBasicProperties props = model.CreateBasicProperties();
props.ContentType = "text/plain";
props.DeliveryMode = 2;
props.Headers = new Dictionary&lt;string, object&gt;();
props.Headers.Add("latitude",  51.5252949);
props.Headers.Add("longitude", -0.0905493);

model.BasicPublish(exchangeName,
                   routingKey, props,
                   messageBodyBytes);
</pre>
</p>

          <p>
            Code sample below sets a message expiration:

<pre class="lang-csharp">
byte[] messageBodyBytes = System.Text.Encoding.UTF8.GetBytes("Hello, world!");

IBasicProperties props = model.CreateBasicProperties();
props.ContentType = "text/plain";
props.DeliveryMode = 2;
props.Expiration = "36000000"

model.BasicPublish(exchangeName,
                  routingKey, props,
                  messageBodyBytes);
</pre>
          </p>
        </doc:section>

        <doc:section name="consuming">
          <doc:heading>Retrieving Messages By Subscription ("push API")</doc:heading>

          <p>
            The recommended and most convenient way to receive messages is to set up a subscription using the
            <code>IBasicConsumer</code> interface. The messages will then be delivered
            automatically as they arrive, rather than having to be requested
            proactively.

            One way to implement a consumer is to use the
            convenience class <code>EventingBasicConsumer</code>, which dispatches
            deliveries and other consumer lifecycle events as C# events:

<pre class="lang-csharp">
var consumer = new EventingBasicConsumer(channel);
consumer.Received += (ch, ea) =>
                {
                    var body = ea.Body;
                    // ... process the message
                    channel.BasicAck(ea.DeliveryTag, false);
                };
String consumerTag = channel.BasicConsume(queueName, false, consumer);
</pre>

            Another option is to subclass <code>DefaultBasicConsumer</code>,
            overriding methods as necessary, or implement <code>IBasicConsumer</code>
            directly. You will generally want to implement the core method <code>IBasicConsumer.HandleBasicDeliver</code>.

            More sophisticated consumers will need to implement further
            methods. In particular, <code>HandleModelShutdown</code> traps
            channel/connection closure. Consumers can also implement
            <code> HandleBasicCancelOk</code> to be notified of cancellations.

            The <code>ConsumerTag</code> property of <code>DefaultBasicConsumer</code> can be
            used to retrieve the server-generated consumer tag, in cases where
            none was supplied to the original <code>IModel.BasicConsume</code> call.

            You can cancel an active consumer with <code>IModel.BasicCancel</code>:

<pre class="lang-csharp">
channel.BasicCancel(consumerTag);
</pre>

When calling the API methods, you always refer to consumers by their
consumer tags, which can be either client- or server-generated as
explained in the <a href="/specification.html">AMQP 0-9-1 specification</a> document.
          </p>
        </doc:section>


        <doc:section name="basic-get">
          <doc:heading>Fetching Individual Messages ("pull API")</doc:heading>

          <p>
            It is also possible to retrieve individual messages on demand ("pull")
            using the <code>IModel.BasicGet</code> method. The
            returned value is an instance of BasicGetResult, from which the header
            information (properties) and message body can be extracted:

<pre class="lang-csharp">
bool noAck = false;
BasicGetResult result = channel.BasicGet(queueName, noAck);
if (result == null) {
    // No message available at this time.
} else {
    IBasicProperties props = result.BasicProperties;
    byte[] body = result.Body;
    ...
</pre>

            Since <code>noAck = false</code> above, you must also call
            <code>IModel.BasicAck</code> to acknowledge that you have
            successfully received and processed the message:

<pre class="lang-csharp">
    ...
    // acknowledge receipt of the message
    channel.BasicAck(result.DeliveryTag, false);
}
</pre>

            Note that fetching messages using this API is relatively inefficient. If you'd prefer
            RabbitMQ to push messages to the client, see the next section.
          </p>
        </doc:section>


        <doc:section name="concurrency">
          <doc:heading>Concurrency Considerations for Consumers</doc:heading>

          <p>
          Each <code>IConnection</code> instance is, in the current implementation,
          backed by a single background thread that reads from the socket and
          dispatches the resulting events to the application.
          If heartbeats are enabled, as of version <code>3.5.0</code>
          they are implemented in terms of .NET timers.

          Usually, therefore, there will be at least two threads active in an application
          using this library:
          </p>

          <dl>
            <dt>the application thread</dt>
            <dd>
              contains the application logic, and makes
              calls on <code>IModel</code> methods to perform protocol operations.
            </dd>

            <dt>the I/O activity thread</dt>
            <dd>
              hidden away and completely managed by the
              <code>IConnection</code> instance.
            </dd>
          </dl>

          <p>
          The one place where the nature of the threading model is visible to
          the application is in any callback the application registers with the
          library. Such callbacks include:
          </p>

          <ul>
            <li>any <code>IBasicConsumer</code> method</li>
            <li>the <code>BasicReturn</code> event on <code>IModel</code></li>
            <li>any of the various shutdown events on <code>IConnection</code>, <code>IModel</code> etc.</li>
          </ul>

          <doc:subsection name="consumer-callbacks-and-ordering">
            <doc:heading>Consumer Callbacks and Ordering</doc:heading>
            <p>
              As of version <code>3.5.0</code> application callback handlers <strong>can</strong> invoke blocking
              operations (such as <code>IModel.QueueDeclare</code> or
              <code> IModel.BasicCancel</code>). <code>IBasicConsumer</code> callbacks are invoked concurrently.
              However, per-channel operation order is preserved. In other word, if messages A and B were delivered
              in this order on the same channel, they will be processed in this order. If messages A and B
              were delivered on different channels, they can be processed in any order (or in parallel).
              Consumer callbacks are invoked in tasks dispatched to the default <a href="https://msdn.microsoft.com/en-us/library/dd997402%28v=vs.110%29.aspx">TaskScheduler</a>
              provided by the .NET runtime.
            </p>
          </doc:subsection>

          <doc:subsection name="custom-task-scheduler">
            <doc:heading>Using a Custom Task Scheduler</doc:heading>
            <p>
              It is possible to use a custom task scheduler by setting <code>ConnectionFactory.TaskScheduler</code>:

<pre class="lang-csharp">
public class CustomTaskScheduler : TaskScheduler
{
  // ...
}

var cf = new ConnectionFactory();
cf.TaskScheduler = new CustomTaskScheduler();
</pre>

              This, for example, can be used to <a href="https://msdn.microsoft.com/en-us/library/ee789351%28v=vs.110%29.aspx">limit concurrency degree with a custom TaskScheduler</a>.
            </p>
          </doc:subsection>

          <doc:subsection name="model-sharing">
            <doc:heading>Sharing Channels Between Threads</doc:heading>

            <p>
              As a rule of thumb, <code>IModel</code> instances should not be used by more than
              one thread simultaneously: application code should maintain a clear
              notion of thread ownership for <code>IModel</code> instances.

              If more than one thread needs to access a particular <code>IModel</code>
              instances, the application should enforce mutual exclusion itself. One
              way of achieving this is for all users of an <code>IModel</code> to
              <code> lock</code> the instance itself:

<pre class="lang-csharp">
IModel ch = RetrieveSomeSharedIModelInstance();
lock (ch) {
  ch.BasicPublish(...);
}
</pre>

              Symptoms of incorrect serialisation of <code>IModel</code> operations
              include, but are not limited to,

              <ul>
                <li>invalid frame sequences being sent on the wire (which occurs, for
                example, if more than one <code>BasicPublish</code> operation is run
                simultaneously), and/or
                </li>

                <li>
                  <code>NotSupportedException</code>s being thrown from a method in class
                  <code>RpcContinuationQueue</code> complaining about
                  <code>"Pipelining of requests forbidden"</code> (which occurs in situations where more than
                  one AMQP 0-9-1 synchronous operation, such as <code>ExchangeDeclare</code>, is run
                  simultaneously).
                </li>
              </ul>
            </p>
          </doc:subsection>
        </doc:section>


        <doc:section name="basic-return">
          <doc:heading>Handling Unroutable Messages</doc:heading>
          <p>
            If a message is published with the "mandatory" flag
            set, but cannot be delivered, the broker will return it to the sending
            client (via a <code>basic.return</code> AMQP 0-9-1 command).

            To be notified of such returns, clients can subscribe to the
            <code> IModel.BasicReturn</code> event. If there are no listeners attached to the
            event, then returned messages will be silently dropped.

<pre class="lang-csharp">
model.BasicReturn +=
  new RabbitMQ.Client.Events.BasicReturnEventHandler(...);
</pre>

            The <code>BasicReturn</code> event will fire, for example, if the client
            publishes a message with the "mandatory" flag set to an exchange of
            "direct" type which is not bound to a queue.
          </p>
        </doc:section>


        <doc:section name="recovery">
          <doc:heading>Automatic Recovery From Network Failures</doc:heading>

          <doc:subsection name="connection-recovery">
            <doc:heading>Connection Recovery</doc:heading>

            <p>
              Network connection between clients and RabbitMQ nodes can fail.
              RabbitMQ .NET/C# client supports automatic recovery of connections
              and topology (queues, exchanges, bindings, and consumers). The feature
              has certain limitations covered later in this guide.

              The automatic recovery process performs the following steps:

              <ol>
                <li>Reconnect</li>
                <li>Restore connection listeners</li>
                <li>Re-open channels</li>
                <li>Restore channel listeners</li>
                <li>Restore channel <code>basic.qos</code> setting, publisher confirms and transaction settings</li>
              </ol>

              Topology recovery starts after the above actions are completed. The following steps are
              performed for every channel known to being open at the time of connection failure:

              <ol>
                <li>Re-declare exchanges (except for predefined ones)</li>
                <li>Re-declare queues</li>
                <li>Recover all bindings</li>
                <li>Recover all consumers</li>
              </ol>

              To enable automatic connection recovery, set
              <code>ConnectionFactory.AutomaticRecoveryEnabled</code> to true:

<pre class="lang-csharp">
ConnectionFactory factory = new ConnectionFactory();
factory.AutomaticRecoveryEnabled = true;
// connection that will recover automatically
IConnection conn = factory.CreateConnection();
</pre>

              If recovery fails due to an exception (e.g. RabbitMQ node is
              still not reachable), it will be retried after a fixed time interval (default
              is 5 seconds). The interval can be configured:

<pre class="lang-csharp">
ConnectionFactory factory = new ConnectionFactory();
// attempt recovery every 10 seconds
factory.NetworkRecoveryInterval = TimeSpan.FromSeconds(10);
</pre>
            </p>
          </doc:subsection>

          <doc:subsection name="recovery-triggers">
            <doc:heading>When Will Connection Recovery Be Triggered?</doc:heading>
            <p>
              Automatic connection recovery, if enabled, will be triggered by the following events:
              <ul>
                <li>An I/O exception is thrown in connection's I/O loop</li>
                <li>A socket read operation times out</li>
                <li>Missed server <a href="/heartbeats.html">heartbeats</a> are detected</li>
                <li>Any other unexpected exception is thrown in connection's I/O loop</li>
              </ul>

              whichever happens first.
            </p>
            <p>
              If initial client connection to a RabbitMQ node fails, automatic connection
              recovery won't kick in. Applications developers are responsible for retrying
              such connections, logging failed attempts, implementing a limit to the number
              of retries and so on. Here's a very basic example:

<pre class="lang-csharp">
ConnectionFactory factory = new ConnectionFactory();
// configure various connection settings

try {
  Connection conn = factory.CreateConnection();
} catch (RabbitMQ.Client.Exceptions.BrokerUnreachableException e) {
  Thread.Sleep(5000);
  // apply retry logic
}
</pre>
            </p>
            <p>
              When a connection is closed by the application via the <code>Connection.Close</code> method,
              connection recovery will not be initiated.
            </p>
            <p>
              Channel-level exceptions will not trigger any kind of recovery as they usually
              indicate a semantic issue in the application (e.g. an attempt to consume from a
              non-existent queue).
            </p>
          </doc:subsection>

          <doc:subsection name="publishers">
            <doc:heading>Effects on Publishing</doc:heading>
            <p>
              Messages that are published using <code>IModel.BasicPublish</code> when connection is down
              will be lost. The client does not enqueue them for delivery after connection has recovered.
              To ensure that published messages reach RabbitMQ applications need to use <a href="confirms.html">Publisher Confirms</a>
              and account for connection failures.
            </p>
          </doc:subsection>

          <doc:subsection name="topology-recovery">
            <doc:heading>Topology Recovery</doc:heading>

            <p>
              Topology recovery involves recovery of exchanges, queues, bindings
              and consumers. It is enabled by default but can be disabled:

<pre class="lang-csharp">
ConnectionFactory factory = new ConnectionFactory();

Connection conn = factory.CreateConnection();
factory.AutomaticRecoveryEnabled = true;
factory.TopologyRecoveryEnabled  = false;
</pre>
            </p>
          </doc:subsection>

          <doc:subsection name="automatic-recovery-limitations">
            <doc:heading>Failure Detection and Recovery Limitations</doc:heading>
            <p>
              Automatic connection recovery has a number of limitations and intentional
              design decisions that applications developers need to be aware of.
            </p>
            <p>
              When a connection is down or lost, it <a href="/heartbeats.html">takes time to detect</a>.
              Therefore there is a window of time in which both the
              library and the application are unaware of effective
              connection failure.  Any messages published during this
              time frame are serialised and written to the TCP socket
              as usual. Their delivery to the broker can only be
              guaranteed via <a href="/confirms.html">publisher
              confirms</a>: publishing in AMQP 0-9-1 is entirely
              asynchronous by design.
            </p>
            <p>
              When a socket or I/O operation error is detected by a
              connection with automatic recovery enabled, recovery
              begins after a configurable delay, 5 seconds by
              default. This design assumes that even though a lot of
              network failures are transient and generally short
              lived, they do not go away in an instant. Connection recovery
              attempts will continue at identical time intervals until
              a new connection is successfully opened.
            </p>
            <p>
              When a connection is in the recovering state, any
              publishes attempted on its channels will be rejected
              with an exception. The client currently does not perform
              any internal buffering of such outgoing messages. It is
              an application developer's responsibility to keep track of such
              messages and republish them when recovery succeeds.
              <a href="/confirms.html">Publisher confirms</a> is a protocol extension
              that should be used by publishers that cannot afford message loss.
            </p>
            <p>
              Connection recovery will not kick in when a channel is closed due to a
              channel-level exception. Such exceptions often indicate application-level
              issues. The library cannot make an informed decision about when that's
              the case.
            </p>
            <p>
              Closed channels won't be recovered even after connection recovery kicks in.
              This includes both explicitly closed channels and the channel-level exception
              case above.
            </p>
          </doc:subsection>

          <doc:subsection name="basic-ack-and-recovery">
            <doc:heading>Manual Acknowledgements and Automatic Recovery</doc:heading>

            <p>
              When manual acknowledgements are used, it is possible that
              network connection to RabbitMQ node fails between message
              delivery and acknowledgement. After connection recovery,
              RabbitMQ will reset delivery tags on all channels.

              This means that <code>basic.ack</code>, <code>basic.nack</code>, and <code>basic.reject</code>
              with old delivery tags will cause a channel exception. To avoid this,
              RabbitMQ .NET client keeps track of and updates delivery tags to make them monotonically
              growing between recoveries.

              <code>IModel.BasicAck</code>,
              <code>IModel.BasicNack</code>, and
              <code>IModel.BasicReject</code> then translate adjusted
              delivery tags into those used by RabbitMQ.

              Acknowledgements with stale delivery tags will not be
              sent. Applications that use manual acknowledgements and automatic
              recovery must be capable of handling redeliveries.

            </p>
          </doc:subsection>
        </doc:section>
    </body>
</html>
