<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
]>
<!--
Copyright (c) 2007-2016 Pivotal Software, Inc.

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License,
Version 2.0 (the "License”); you may not use this file except in compliance
with the License. You may obtain a copy of the License at

https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions"
      xmlns:xi="http://www.w3.org/2003/XInclude">
  <head>
    <title>Amazon EC2</title>
  </head>
  <body>
<doc:section>

  <p>This guide assumes familiarity with the general <a href="/clustering.html">clustering guide</a>.</p>

  <doc:subsection name="overview">
    <doc:heading>Overview</doc:heading>
    <p>
      Using RabbitMQ on EC2 is quite similar running it on other
      platforms. However, the are certain minor aspects to EC2 that need
      to be accounted for. They primarily have to do with hostnames and their resolution.
    </p>

    <p>
      This guide uses traditional RabbitMQ clustering. It is worth noting that
      alternative solutions are available and can be more suitable for automation:

      <ul>
        <li><a href="/clustering.html">Auto-configuration of a cluster</a> (part of RabbitMQ core)</li>
        <li>
          <a href="https://github.com/rabbitmq/rabbitmq-autocluster">rabbitmq-autocluster</a>: forms
          clusters using round-robin DNS (e.g. <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html">with Route 53</a>), <a href="https://www.consul.io/">Consul</a> or <a href="https://github.com/coreos/etcd">etcd</a>.
        </li>
      </ul>

      <a href="https://github.com/rabbitmq/chef-cookbook">RabbitMQ Chef cookbook</a> and <a href="https://github.com/puppetlabs/puppetlabs-rabbitmq">RabbitMQ Puppet module</a> can help with automating cluster provisioning.
    </p>
  </doc:subsection>

  <doc:subsection name="machine_images">
    <doc:heading>AMIs</doc:heading>
    <p>
      Pivotal currently does not provide AMI images with RabbitMQ pre-provisioned.
      RabbitMQ works well on up-to-date Ubuntu and CentOS AMIs.
    </p>
  </doc:subsection>

  <doc:subsection name="instance_type">
    <doc:heading>Choose instance type</doc:heading>
    <p>
      First, you need to choose what instance type to run. RabbitMQ
      will work on every instance type, but there are a few considerations
      worth bearing in mind:
    </p>
    <ul>
      <li>
	RabbitMQ will work on 32-bit operating system, but for
	production usage we recommend 64-bit instances.
      </li>
      <li>
	RabbitMQ by default will take advantage of all the processors
	in the system. However a single strong CPU configuration might
	behave slightly better than a collection of weak processors.
      </li>
      <li>
	In some cases RabbitMQ requires substantial amounts of memory.
	Make sure that your host does have <a href="/memory.html">enough RAM</a> and always have
	at least a few gigabytes of swap space enabled.
      </li>
    </ul>
  </doc:subsection>


  <doc:subsection name="os_type">
    <doc:heading>Choose operating system</doc:heading>
    <p>
      Although RabbitMQ is tested with most major Linux distributions,
      Ubuntu support for Amazon EC2 seems to be strongest. You can
      get the list of Ubuntu AMI images here:

      <pre>
      <a href="http://uec-images.ubuntu.com/releases/">http://uec-images.ubuntu.com/releases/</a></pre>

      You may find more information
      in <a href="https://help.ubuntu.com/community/EC2StartersGuide">Ubuntu
      EC2 Starters Guide</a>.
    </p>
  </doc:subsection>


  <doc:subsection name="install">
    <doc:heading>Install RabbitMQ</doc:heading>
    <p>
      Ubuntu ships with RabbitMQ but it's often not the latest
      version. If you want the recent version, you may use
      our <a href="install-debian.html">Debian
      repository</a>. Here is a shell
      script <code>rabbitmq-user-data.sh</code> that automates
      RabbitMQ installation on Ubuntu:
    </p>
    <pre class="sourcecode bash">
#!/bin/sh
cat &lt;&lt;EOF &gt; /etc/apt/sources.list.d/rabbitmq.list
deb http://www.rabbitmq.com/debian/ testing main
EOF

curl https://www.rabbitmq.com/rabbitmq-release-signing-key.asc -o /tmp/rabbitmq-release-signing-key.asc
apt-key add /tmp/rabbitmq-release-signing-key.asc
rm /tmp/rabbitmq-release-signing-key.asc

apt-get -qy update
apt-get -qy install rabbitmq-server</pre>

    <p>
      Instead of running it manually, you can tell the instance to run
      this script automatically during the first start. You can do it
      using the <code>user-data-file</code> command line option for
      the <code>ec2-run-instances</code> command. For example:

      <pre class="sourcecode bash">ec2-run-instances ami-XXX \
    --key ${EC2_KEYPAIR} \
    --instance-type m1.large \
    --region eu-west-1 \
    --user-data-file rabbitmq-user-data.sh</pre>

      Put your chosen AMI id in the place of <code>ami-XXX</code>. The
      string <code>${EC2_KEYPAIR}</code> should be replaced with the
      public ssh keypair name that is going to be used to log in to
      the instance. You can find more information
      about <code>ec2-run-instances</code> command in
      <a href="http://docs.amazonwebservices.com/AWSEC2/latest/GettingStartedGuide/">EC2 Getting Started Guide</a>.
    </p>
  </doc:subsection>

  <doc:subsection name="ebs">
    <doc:heading>Persistent Data on EBS Devices</doc:heading>
    <p>
      RabbitMQ writes data to the following directories on Ubuntu:
      <ul>
	<li>
	  <code>/var/lib/rabbitmq/</code> to store persistent data
	  like the messages or queues
	</li>

	<li>
	  <code>/var/log/rabbitmq/</code> to store logs
	</li>
      </ul>

      See the <a href="/relocate.html">File and Directory Locations</a> for details.
    </p>

    <p>
      If you choose to use EBS block device to store RabbitMQ node data directory, just
      link these directories to your EBS device. Stop RabbitMQ
      before making any changes to the data directory:
      <pre class="sourcecode bash">sudo service rabbitmq-server stop</pre>
    </p>
    <p>
      Note that EBS volumes have an <a
      href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">IOPS
      limits</a>, which can impact thoughput and RabbitMQ message
      store operations. If an EBS volume hits the limit, disk writes
      will worsen. It is also possible that the RabbitMQ message store
      compaction (garbage collection of on-disk data) can fall behind
      disk writes, which means the disk will be filled up quicker than
      disk space can be reclaimed after messages were consumed and
      acknowledged. This will eventually lead to <a href="/alarms.html">resource
      alarms</a> and publisher throttling. Please make sure the limit
      is high enough and set up I/O operation rate monitoring.
    </p>
  </doc:subsection>
</doc:section>

<xi:include href="install-guest-localhost.xml.inc"/>
<xi:include href="clustering-hostname-issues.xml.inc"/>
<xi:include href="clustering-firewalled-nodes.xml.inc"/>
<xi:include href="clustering-erlang-version.xml.inc"/>

  <p>
    If you have any comments please <a href="contact.html">let us know</a>.
  </p>
  </body>
</html>
