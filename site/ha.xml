<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html PUBLIC "bug in xslt processor requires fake doctype"
"otherwise css isn't included" [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
]>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc">
  <head>
    <title>RabbitMQ - Highly Available Queues</title>
  </head>
  <body>
    <doc:div>

      <doc:toc class="compact">
        <doc:heading>Table of Contents</doc:heading>
      </doc:toc>

      <doc:section name="overview">
        <doc:heading>Availability overview</doc:heading>
        <p>
          If your RabbitMQ broker consists of a single node, then a
          failure of that node will cause downtime, temporary
          unavailability of service, and potentially loss of messages
          (especially non-persistent messages held by non-durable
          queues). You could publish all messages persistent, to
          durable queues, but even then, due to buffering there is an
          amount of time between the message being sent and the
          message being written to disk and fsync'd. Using <a
          href="extensions.html#confirms">publisher confirms</a> is
          one means to ensure the client understands which messages
          have been written to disk, but even so, you may not wish to
          suffer the downtime and inconvenience of the unavailability
          of service caused by a node failure, or the performance
          degradation of having to write every message to disk.
        </p>
        <p>
          You could use a <a href="clustering.html">cluster</a> of
          RabbitMQ nodes to construct your RabbitMQ broker. This will
          be resilient to the loss of individual nodes in terms of the
          overall availability of service, but some important caveats
          apply: whilst exchanges and bindings survive the loss of
          individual nodes, queues and their messages do not. This is
          because a queue and its contents reside on exactly one node,
          thus the loss of a node will render its queues unavailable.
        </p>
        <p>
          You could use an <a href="pacemaker.html">active/passive</a>
          pair of nodes such that should one node fail, the passive
          node will be able to come up and take over from the failed
          node. This can even be combined with clustering. Whilst this
          approach ensures that failures are quickly detected and
          recovered from, there can be reasons why the passive node
          can take a long time to start up, or potentially even fail
          to start. This can cause at best, temporary unavailability
          of queues which were located on the failed node.
        </p>
        <p>
          To solve these various problems, we have developed
          active/active high availability for queues. This works by
          allowing queues to be <i>mirrored</i> on other nodes within
          a RabbitMQ cluster. The result is that should one node of a
          cluster fail, the queue can automatically switch to one of
          the mirrors and continue to operate, with no unavailability
          of service. This solution still requires a RabbitMQ cluster,
          which means that it will not cope seamlessly with network
          partitions within the cluster and, for that reason, is not
          recommended for use across a WAN (though of course, clients
          can still connect from as near and as far as needed).
        </p>
      </doc:section>

      <doc:section name="behaviour">
        <doc:heading>Mirrored Queue Behaviour</doc:heading>
        <p>
          A mirrored queue will behave the same as a non-mirrored
          queue, with the following exceptions:
          <ul>
            <li>Transactions are <b>not</b> supported. If you wish to
            have confirmation when a message has been received and
            processed by the broker, use <a
            href="extensions.html#confirms">publisher
            confirms</a>. Messages published to mirrored queues within
            a transaction are silently dropped.
            </li>
          </ul>
        </p>
        <p>
          In normal operation, for each mirrored-queue, there is one
          <i>master</i> and several <i>slaves</i>, each on a
          different node. The slaves apply the operations that occur
          to the master in exactly the same order as the master and
          thus maintain the same state. All actions other than
          publishes go only to the master, and the master then
          broadcasts the effect of the actions to the slaves. Thus
          clients consuming from a mirrored queue are in fact
          consuming from the master.
        </p>
        <p>
          Should a slave fail, there is little to be done other than
          some bookkeeping: the master remains the master and no
          client need take any action or be informed of the failure.
        </p>
        <p>
          If the master fails, then one of the slaves must be
          promoted. At this point, the following happens:
          <ol>
            <li>A slave is promoted to become the new master.</li>

            <li>The slave considers all previous consumers to have
            been abruptly disconnected. As such, it requeues (at the
            rear of the queue) all messages that have been delivered
            to clients but are pending acknowledgement. This can
            include messages for which a client has issued
            acknowledgements: either the acknowledgement was lost on
            the wire before reaching the master, or it was lost during
            broadcast from the master to the slaves. In either case,
            the new master has no choice but to requeue all messages
            it thinks have not been acknowledged.</li>

            <li>Clients that were consuming from the mirrored-queue
            and support our <a
            href="extensions.html#consumer-cancel-notify">Consumer
            Cancellation Notifications</a> extension will receive a
            notification that their subscription to the mirrored-queue
            has been abruptly cancelled. At this point they should
            re-consume from the queue, which will pick up the new
            master. The reason for sending this notification is that
            informing clients of the loss of the master is essential:
            otherwise the client may continue to issue
            acknowledgements for messages they were sent by the old,
            failed master, and not expect that they might be about to
            see the same messages again, this time sent by the new
            master. Of course, clients that were connected to the
            failed node will find their connections failed, and will
            need to reconnect to a surviving node of the cluster.</li>
          </ol>
        </p>
        <p>
          As the chosen slave becomes the master, no messages that are
          published to the mirrored-queue during this time will be
          lost: messages published to a mirrored-queue are always
          published directly to the master and all slaves. Thus should
          the master fail, the messages continue to be sent to the
          slaves and will be added to the queue once the promotion of
          a slave to the master completes.
        </p>
        <p>
          Similarly, messages published by clients using <a
          href="extensions.html#confirms">publisher confirms</a> will
          still be confirmed correctly even if the master (or any
          slaves) fail between the message being published and the
          message being able to be confirmed to the publisher. Thus
          from the point of view of the publisher, publishing to a
          mirrored-queue is no different from publishing to any other
          sort of queue. It is only consumers that need to be aware of
          the possibility of needing to re-consume from a
          mirrored-queue upon receipt of a <a
          href="extensions.html#consumer-cancel-notify">Consumer
          Cancellation Notification</a>.
        </p>
      </doc:section>

    </doc:div>
  </body>
</html>
