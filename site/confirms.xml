<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!--
Copyright (c) 2007-2018 Pivotal Software, Inc.

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License,
Version 2.0 (the "License”); you may not use this file except in compliance
with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Consumer Acknowledgements and Publisher Confirms</title>
  </head>
  <body>
    <doc:section name="intro">
      <doc:heading>Introduction</doc:heading>

      <p>
        Systems that use a messaging broker such as RabbitMQ are by
        definition distributed. Since protocol methods (messages) sent
        are not guaranteed to reach the peer or be successfully processed
        by it, both publishers and consumers need a mechanism for
        delivery and processing confirmation. Several messaging
        protocols supported by RabbitMQ provide such features.
        This guide covers the features in AMQP 0-9-1 but the idea
        is largely the same in other protocols (STOMP, MQTT, et cetera).
      </p>
      <p>
        Delivery processing acknowledgements from consumers to RabbitMQ
        are known as acknowledgements in AMQP 0-9-1 parlance; broker
        acknowledgements to publishers are a protocol extension called
        publisher confirms.
      </p>
      <p>
        Both features build on the same idea and are inspired by TCP.
        They are essential for reliable delivery both from publishers
        to RabbitMQ nodes and from RabbitMQ nodes to consumers.
      </p>
    </doc:section>

    <doc:section name="consumer-acknowledgements">
      <doc:heading>(Consumer) Delivery Acknowledgements</doc:heading>

      <p>
        When RabbitMQ delivers a message to a consumer, it needs to know
        when to consider the message to be successfully sent. What kind of logic is
        optimal depends on the system. It is therefore primarily an application
        decision. In AMQP 0-9-1 it is made when a consumer is registered using
        the <code>basic.consume</code> method or a message is fetched on demand
        with the <code>basic.get</code> method.
      </p>

      <p>
        If you prefer a more example-oriented and step-by-step material, consumer acknowledgements are
        also covered in <a href="/getstarted.html">RabbitMQ tutorial #2</a>.
      </p>

      <doc:subsection name="consumer-acks-delivery-tags">
        <doc:heading>Delivery Identifiers: Delivery Tags</doc:heading>

        <p>
          Before we proceed to discuss other topics it is important to
          explain how deliveries are identified (and acknowledgements
          indicate their respective deliveries).  When a consumer
          (subscription) is registered, messages will be delivered
          (pushed) by RabbitMQ using the <code>basic.deliver</code>
          method.  The method carries a <em>delivery tag</em>, which
          uniquely identifies the delivery on a channel. Delivery tags are
          therefore scoped per channel.
        </p>

        <p>
          Delivery tags are monotonically growing positive
          integers and are presented as such by client libraries.
          Client library methods that acknowledge deliveries take a delivery tag
          as an argument.
        </p>

        <p>
          Because delivery tags are scoped per channel, deliveries must be
          acknowledged on the same channel they were received on. Acknowledging
          on a different channel will result in an "unknown delivery tag" protocol
          exception and close the channel.
        </p>
      </doc:subsection>

      <doc:subsection name="acknowledgement-modes">
        <doc:heading>Consumer Acknowledgement Modes and Data Safety Considerations</doc:heading>

        <p>
          When a node delivers a message to a consumer, it has to decide whether the
          message should be considered handled (or at least received) the consumer. Since
          multiple things (client connections, consumer apps, and so on) can fail,
          this decision is a data safety concern. Messaging protocols usually provide
          a confirmation mechanism that allows consumers to acknowledge deliveries
          to the node they are connected to. Whether the mechanism is used is decided
          at the time consumer subscribes.
        </p>

        <p>
          Depending on the acknowledgement mode used, RabbitMQ can consider a message to be
          successfully delivered either immediately after it is sent out (written to a TCP socket)
          or when an explicit ("manual") client acknowledgement is received. Manually sent
          acknowledgements can be positive or negative and use one of the following protocol methods:

          <ul>
            <li><code>basic.ack</code> is used for positive acknowledgements</li>
            <li><code>basic.nack</code> is used for negative acknowledgements (note: this is a <a href="/nack.html">RabbitMQ extension to AMQP 0-9-1</a>)</li>
            <li><code>basic.reject</code> is used for negative acknowledgements but has one limitation compared to <code>basic.nack</code></li>
          </ul>

          How these methods are exposed in client library APIs will be discussed below.
        </p>

        <p>
          Positive acknowledgements simply instruct RabbitMQ to record a message as delivered and can be discarded.
          Negative acknowledgements with <code>basic.reject</code> have the same effect. The difference
          is primarily in the semantics: positive acknowledgements assume
          a message was successfully processed while their negative counterpart
          suggests that a delivery wasn't processed but still should be deleted.
        </p>

        <p>
          In automatic acknowledgement mode, a message is considered
          to be successfully delivered immediately after it is
          sent. This mode trades off higher throughput (as long as the
          consumers can keep up) for reduced safety of delivery and
          consumer processing. This mode is often referred to as
          "fire-and-forget".  Unlike with manual acknowledgement
          model, if consumers's TCP connection or channel is closed
          before successful delivery, the message sent by the server will be lost.
          Automatic message acknowledgement is therefore <strong>should be considered unsafe</strong>
          and not suitable for all workloads.
        </p>

        <p>
          Another things that's important to consider when using
          automatic acknowledgement mode is that of consumer overload.
          Manual acknowledgement mode is typically used with a bounded
          channel prefetch which limits the number of outstanding ("in progress")
          deliveries on a channel. With automatic acknowledgements, however, there is
          no such limit by definition. Consumers therefore can be overwhelmed by
          the rate of deliveries, potentially accumulating a backlog in memory
          and running out of heap or getting their process terminated by the OS.
          Some client libraries will apply TCP back pressure (stop reading from the socket
          until the backlog of unprocessed deliveries drops beyond a certain limit).
          Automatic acknolwedgement mode is therefore only recommended for consumers
          that can process deliveries efficiently and at a steady rate.
        </p>
      </doc:subsection>


      <doc:subsection name="consumer-acks-api-elements">
        <doc:heading>Positively Acknowledging Deliveries</doc:heading>

        <p>
          API methods used for delivery acknowledgement are usually exposed as operations on a channel in client libraries.
          Java client users will use <code>Channel#basicAck</code> and <code>Channel#basicNack</code>
          to perform a <code>basic.ack</code> and <code>basic.nack</code>, respectively. Here's a Java
          client examples that demonstrates a positive acknowledgement:

<pre class="sourcecode java">
// this example assumes an existing channel instance

boolean autoAck = false;
channel.basicConsume(queueName, autoAck, "a-consumer-tag",
     new DefaultConsumer(channel) {
         @Override
         public void handleDelivery(String consumerTag,
                                    Envelope envelope,
                                    AMQP.BasicProperties properties,
                                    byte[] body)
             throws IOException
         {
             long deliveryTag = envelope.getDeliveryTag();
             // positively acknowledge a single delivery, the message will
             // be discarded
             channel.basicAck(deliveryTag, false);
         }
     });
</pre>
        </p>

        <p>
          In .NET client the methods are <code>IModel#BasicAck</code> and <code>IModel#BasicNack</code>, respectively.
          Here's an example that demonstrates a positive acknowledgement with that client:

<pre class="sourcecode csharp">
// this example assumes an existing channel (IModel) instance

var consumer = new EventingBasicConsumer(channel);
consumer.Received += (ch, ea) =>
                {
                    var body = ea.Body;
                    // positively acknowledge a single delivery, the message will
                    // be discarded
                    channel.BasicAck(ea.DeliveryTag, false);
                };
String consumerTag = channel.BasicConsume(queueName, false, consumer);
</pre>
        </p>

      </doc:subsection>


      <doc:subsection name="consumer-acks-multiple-parameter">
        <doc:heading>Acknowledging Multiple Deliveries at Once</doc:heading>

        <p>
          Manual acknowledgements can be batched to reduce network traffic.
          This is done by setting the <code>multiple</code> field of acknowledgement
          methods (see above) to <code>true</code>. Note that <code>basic.reject</code> doesn't
          historically have the field and that's why <code>basic.nack</code> was introduced
          by RabbitMQ as a protocol extension.
        </p>
        <p>
          When the <code>multiple</code> field is set to <code>true</code>, RabbitMQ will acknowledge
          all outstanding delivery tags up to and including the tag specified in the
          acknowledgement. Like everything else related to acknowledgements, this is scoped per channel.
          For example, given that there are delivery tags 5, 6, 7, and 8 unacknowledged on channel <code>Ch</code>,
          when an acknowledgement frame arrives on that channel with <code>delivery_tag</code> set to <code>8</code>
          and <code>multiple</code> set to <code>true</code>, all tags from 5 to 8 will be acknowledged.
          If <code>multiple</code> was set to <code>false</code>, deliveries 5, 6, and 7 would still
          be unacknowledged.
        </p>

        <p>
          To acknowledge multiple deliveries with RabbitMQ Java client, pass <code>true</code> for the
          <code>multiple</code> parameter to <code>Channel#basicAck</code>:

<pre class="sourcecode java">
// this example assumes an existing channel instance

boolean autoAck = false;
channel.basicConsume(queueName, autoAck, "a-consumer-tag",
     new DefaultConsumer(channel) {
         @Override
         public void handleDelivery(String consumerTag,
                                    Envelope envelope,
                                    AMQP.BasicProperties properties,
                                    byte[] body)
             throws IOException
         {
             long deliveryTag = envelope.getDeliveryTag();
             // positively acknowledge all deliveries up to
             // this delivery tag
             channel.basicAck(deliveryTag, true);
         }
     });
</pre>

        </p>

        <p>
          The idea is very much the same with the .NET client:

<pre class="sourcecode csharp">
// this example assumes an existing channel (IModel) instance

var consumer = new EventingBasicConsumer(channel);
consumer.Received += (ch, ea) =>
                {
                    var body = ea.Body;
                    // positively acknowledge all deliveries up to
                    // this delivery tag
                    channel.BasicAck(ea.DeliveryTag, true);
                };
String consumerTag = channel.BasicConsume(queueName, false, consumer);
</pre>
        </p>
      </doc:subsection>


      <doc:subsection name="consumer-nacks-requeue">
        <doc:heading>Negative Acknowledgement and Requeuing of Deliveries</doc:heading>

        <p>
          Sometimes a consumer cannot process a delivery immediately but other instances might
          be able to. In this case it may be desired to requeue it and let another consumer receive
          and handle it. <code>basic.reject</code> and <code>basic.nack</code> are two protocol
          methods that are used for that.
        </p>

        <p>
          The methods are generally used to negatively acknowledge a delivery. Such deliveires can
          be discarded by the broker or requeued. This behaviour is controlled by the <code>requeue</code> field.
          When the field is set to <code>true</code>, the broker will requeue the delivery (or multiple
          deliveries, as will be explained shortly) with the specified delivery tag.
        </p>

        <p>
          Both methods are usually exposed as operations on a channel in client libraries. Java
          client users will use <code>Channel#basicReject</code> and <code>Channel#basicNack</code>
          to perform a <code>basic.reject</code> and <code>basic.nack</code>, respectively:

<pre class="sourcecode java">
// this example assumes an existing channel instance

boolean autoAck = false;
channel.basicConsume(queueName, autoAck, "a-consumer-tag",
     new DefaultConsumer(channel) {
         @Override
         public void handleDelivery(String consumerTag,
                                    Envelope envelope,
                                    AMQP.BasicProperties properties,
                                    byte[] body)
             throws IOException
         {
             long deliveryTag = envelope.getDeliveryTag();
             // negatively acknowledge, the message will
             // be discarded
             channel.basicReject(deliveryTag, false);
         }
     });
</pre>

<pre class="sourcecode java">
// this example assumes an existing channel instance

boolean autoAck = false;
channel.basicConsume(queueName, autoAck, "a-consumer-tag",
     new DefaultConsumer(channel) {
         @Override
         public void handleDelivery(String consumerTag,
                                    Envelope envelope,
                                    AMQP.BasicProperties properties,
                                    byte[] body)
             throws IOException
         {
             long deliveryTag = envelope.getDeliveryTag();
             // requeue the delivery
             channel.basicReject(deliveryTag, true);
         }
     });
</pre>
        </p>

        <p>
          In .NET client the methods are <code>IModel#BasicReject</code> and <code>IModel#BasicNack</code>,
          respectively:

<pre class="sourcecode csharp">
// this example assumes an existing channel (IModel) instance

var consumer = new EventingBasicConsumer(channel);
consumer.Received += (ch, ea) =>
                {
                    var body = ea.Body;
                    // negatively acknowledge, the message will
                    // be discarded
                    channel.BasicReject(ea.DeliveryTag, false);
                };
String consumerTag = channel.BasicConsume(queueName, false, consumer);
</pre>

<pre class="sourcecode csharp">
// this example assumes an existing channel (IModel) instance

var consumer = new EventingBasicConsumer(channel);
consumer.Received += (ch, ea) =>
                {
                    var body = ea.Body;
                    // requeue the delivery
                    channel.BasicReject(ea.DeliveryTag, true);
                };
String consumerTag = channel.BasicConsume(queueName, false, consumer);
</pre>
        </p>

        <p>
          When a message is requeued, it will be placed to its original
          position in its queue, if possible. If not (due to concurrent
          deliveries and acknowledgements from other consumers when
          multiple consumers share a queue), the message will be requeued
          to a position closer to queue head.
        </p>

        <p>
          Requeued messages may be immediately ready for redelivery depending
          on their position in the queue, the prefetch value used by the channels
          with active consumers. This means that if all consumers requeue because
          they cannot process a delivery due to a transient condition, they will
          create a requeue/redelivery loop. Such loops can be costly in terms of
          network bandwidth and CPU resources. Consumer implementations can track
          the number of redeliveries and reject messages for good (discard them)
          or schedule requeueing after a delay.
        </p>


        <p>
          It is possible to reject or requeue multiple messages at once using the <code>basic.nack</code>
          method. This is what differentiates it from <code>basic.reject</code>. It accepts an additional
          parameter, <code>multiple</code>. Here's a Java client example:

<pre class="sourcecode java">
// this example assumes an existing channel instance

boolean autoAck = false;
channel.basicConsume(queueName, autoAck, "a-consumer-tag",
     new DefaultConsumer(channel) {
         @Override
         public void handleDelivery(String consumerTag,
                                    Envelope envelope,
                                    AMQP.BasicProperties properties,
                                    byte[] body)
             throws IOException
         {
             long deliveryTag = envelope.getDeliveryTag();
             // requeue all unacknowledged deliveries up to
             // this delivery tag
             channel.basicNack(deliveryTag, true, true);
         }
     });
</pre>
        </p>

        <p>
          Things work very similarly with .NET client:

<pre class="sourcecode csharp">
// this example assumes an existing channel (IModel) instance

var consumer = new EventingBasicConsumer(channel);
consumer.Received += (ch, ea) =>
                {
                    var body = ea.Body;
                    // requeue all unacknowledged deliveries up to
                    // this delivery tag
                    channel.BasicNack(ea.DeliveryTag, true, true);
                };
String consumerTag = channel.BasicConsume(queueName, false, consumer);
</pre>
        </p>
      </doc:subsection>



      <doc:subsection name="channel-qos-prefetch">
        <doc:heading>Channel Prefetch Setting (QoS)</doc:heading>

        <p>
          Because messages are sent (pushed) to clients
          asynchronously, there is usually more than one message "in
          flight" on a channel at any given moment. In addition,
          manual acknowledgements from clients are also inherently
          asynchronous in nature. So there's a sliding window of
          delivery tags that are unacknowledged. Developers would
          often prefer to cap the size of this window to avoid the
          unbounded buffer problem on the consumer end. This is done
          by setting a "prefetch count" value using the
          <code>basic.qos</code> method. The value defines the max
          number of unacknowledged deliveries that are permitted on a
          channel. Once the number reaches the configured count,
          RabbitMQ will stop delivering more messages on the channel
          unless at least one of the outstanding ones is acknowledged.
        </p>
        <p>
          For example, given that there are delivery tags 5, 6, 7, and
          8 unacknowledged on channel <code>Ch</code> and channel
          <code>Ch</code>'s prefetch count is set to 4, RabbitMQ will
          not push any more deliveries on <code>Ch</code> unless at
          least one of the outstanding deliveries is acknowledged.
          When an acknowledgement frame arrives on that channel with
          <code>delivery_tag</code> set to <code>8</code>, RabbitMQ
          will notice and deliver one more message.
        </p>
        <p>
          It's worth reiterating that the flow of deliveries and
          manual client acknowledgements is entirely
          asynchronous. Therefore if prefetch value is changed while
          there already are deliveries in flight, a natural race
          condition arises and there can temporarily be more than
          prefetch count unacknowledged messages on a channel.
        </p>

        <p>
          The QoS prefetch setting has no effect on messages fetched using the <code>basic.get</code>
          ("pull API"), even in manual confirmation mode.
        </p>

        <p>
          The QoS setting can be configured for a channel or a consumer.
          See <a href="/consumer-prefetch.html">Consumer Prefetch</a> for details.
        </p>
      </doc:subsection>


      <doc:subsection name="channel-qos-prefetch-throughput">
        <doc:heading>Consumer Acknowledgement Modes, Prefetch and Throughput</doc:heading>

        <p>
          Acknowledgement mode and QoS prefetch value have significant
          effect on consumer throughput. In general, increasing
          prefetch will improve the rate of message delivery to
          consumers. Automatic acknowledgement mode yields best
          possible rate of delivery. However, in both cases the number
          of delivered but not-yet-processed messages will also
          increase, thus increasing consumer RAM consumption.
        </p>

        <p>
          Automatic acknowledgement mode or manual acknowledgement mode with unlimited prefetch should be used with care.
          Consumers that consume a lot of messages without acknowledging will lead
          to memory consumption growth on the node they are connected to. Finding
          a suitable prefetch value is a matter of trial and error and will vary from
          workload to workload. Values in the 100 through 300 range usually offer
          optimal throughput and do not run significant risk of overwhelming consumers.
          Higher values often <a href="https://www.rabbitmq.com/blog/2014/04/14/finding-bottlenecks-with-rabbitmq-3-3/">run into the law of diminishing returns</a>.
        </p>

        <p>
          Prefetch value of 1 is the most conservative. It will
          significantly reduce throughput, in particular in
          environments where consumer connection latency is high. For
          many applications, a higher value would be appropriate and
          optimal.
        </p>
      </doc:subsection>


      <doc:subsection name="automatic-requeueing">
        <doc:heading>When Consumers Fail or Lose Connection: Automatic Requeueing</doc:heading>
        <p>
          When manual acknowledgements are used, any delivery
          (message) that was not acked is automatically requeued when
          the channel (or connection) on which the delivery happened
          is closed. This includes TCP connection loss by clients,
          consumer application (process) failures, and channel-level
          protocol exceptions (covered below).
        </p>
        <p>
          Note that it takes a period of time to <a href="/heartbeats.html">detect an unavailable client</a>.
        </p>
        <p>
          Due to this behavior, consumers must be prepared to handle redeliveries and otherwise
          be implemented with <a href="https://en.wikipedia.org/wiki/Idempotence">idempotence</a> in mind.
          Redeliveries will have a special boolean property, <code>redeliver</code>, set to <code>true</code>
          by RabbitMQ. For first time deliveries it will be set to <code>false</code>. Note that
          a consumer can receive a message that was previously delivered to another consumer.
        </p>
      </doc:subsection>

      <doc:subsection name="consumer-acks-double-acking">
        <doc:heading>Client Errors: Double Acking and Unknown Tags</doc:heading>
        <p>
          Should a client acknowledge the same delivery tag more than once,
          RabbitMQ will result a channel error such as <code>PRECONDITION_FAILED - unknown delivery tag 100</code>.
          The same channel exception will be thrown if an unknown delivery tag is used.
        </p>

        <p>
          Another scenario in which the broker will complain about an "unknown delivery tag" is when
          an acknowledgement, whether positive or negative, is attempted on a channel different from
          that on which the delivery was received on. Deliveries must be acknowledged on the same
          channel.
        </p>
      </doc:subsection>
    </doc:section>

    <doc:section name="publisher-confirms">
      <doc:heading>Publisher Confirms</doc:heading>

      <p>
        Networks can fail in less-than-obvious ways and detecting some failures <a href="/heartbeats.html">takes time</a>.
        Therefore a client that's written a protocol frame or a set of frames (e.g. a published message) to
        its socket cannot assume that the message has reached the server and was successfully processed.
        It could have been lost along the way or its delivery can be significantly delayed.
      </p>

      <p>
        Using standard AMQP 0-9-1, the only way to guarantee that a
        message isn't lost is by using transactions -- make the
        channel transactional then for each message or set of messages publish, commit.
        In this case, transactions are unnecessarily heavyweight and
        decrease throughput by a factor of 250.  To remedy this,
        a confirmation mechanism was introduced. It mimics the consumer
        acknowledgements mechanism already present in the protocol.
      </p>

      <p>
        To enable confirms, a client sends the
        <code>confirm.select</code> method.  Depending on whether
        <code>no-wait</code> was set or not, the broker may respond
        with a <code>confirm.select-ok</code>.  Once the
        <code>confirm.select</code> method is used on a channel, it
        is said to be in confirm mode.  A transactional channel
        cannot be put into confirm mode and once a channel is in
        confirm mode, it cannot be made transactional.
      </p>

      <p>
        Once a channel is in confirm mode, both the broker and the
        client count messages (counting starts at 1 on the first
        <code>confirm.select</code>).  The broker then confirms
        messages as it handles them by sending a
        <code>basic.ack</code> on the same channel. The
        <code>delivery-tag</code> field contains the sequence number
        of the confirmed message.  The broker may also set the
        <code>multiple</code> field in <code>basic.ack</code> to
        indicate that all messages up to and including the one with
        the sequence number have been handled.
      </p>

      <p>
        An example in Java that publishes a large number of
        messages to a channel in confirm mode and waits for the
        acknowledgements can be found <a
        href="https://raw.githubusercontent.com/rabbitmq/rabbitmq-perf-test/master/src/main/java/com/rabbitmq/examples/ConfirmDontLoseMessages.java">here</a>.
      </p>

      <doc:subsection name="server-sent-nacks">
        <doc:heading>Negative Acknowledgments for Publishes</doc:heading>

        <p>
          In exceptional cases when the broker is unable to handle
          messages successfully, instead of a <code>basic.ack</code>,
          the broker will send a <code>basic.nack</code>.  In this
          context, fields of the <code>basic.nack</code> have the same
          meaning as the corresponding ones in <code>basic.ack</code>
          and the <code>requeue</code> field should be ignored.  By
          nack'ing one or more messages, the broker indicates that it
          was unable to process the messages and refuses responsibility
          for them; at that point, the client may choose to re-publish
          the messages.
        </p>

        <p>
          After a channel is put into confirm mode, all subsequently
          published messages will be confirmed or nack'd once.  No
          guarantees are made as to how soon a message is confirmed.
          No message will be both confirmed and nack'd.
        </p>

        <p>
          <code>basic.nack</code> will only be delivered if an internal
          error occurs in the Erlang process responsible for a queue.
        </p>
      </doc:subsection>

      <doc:subsection name="when-publishes-are-confirmed">
        <doc:heading>When Will Published Messages Be Confirmed by the Broker?</doc:heading>

        <p>
          For unroutable messages, the broker will issue a confirm
          once the exchange verifies a message won't route to any queue
          (returns an empty list of queues). If the message is also
          published as mandatory, the <code>basic.return</code> is sent
          to the client before <code>basic.ack</code>. The same
          is true for negative acknowledgements (<code>basic.nack</code>).
        </p>

        <p>
          For routable messages, the <code>basic.ack</code> is sent when a
          message has been accepted by all the queues. For persistent
          messages routed to durable queues, this <strong>means persisting
          to disk</strong>. For mirrored queues, this means that all
          mirrors have accepted the message.
        </p>
      </doc:subsection>

      <doc:subsection name="publisher-confirms-latency">
        <doc:heading>Ack Latency for Persistent Messages</doc:heading>

        <p>
          <code>basic.ack</code> for a persistent message routed to a
          durable queue will be sent after persisting the message to
          disk. The RabbitMQ message store persists messages to disk in
          batches after an interval (a few hundred milliseconds) to
          minimise the number of fsync(2) calls, or when a queue is idle.

          This means that under a constant load, latency for
          <code>basic.ack</code> can reach a few hundred milliseconds. To
          improve throughput, applications are strongly advised to
          process acknowledgements asynchronously (as a stream) or publish
          batches of messages and wait for outstanding confirms. The exact
          API for this varies between client libraries.
        </p>
      </doc:subsection>

      <doc:subsection name="publisher-confirms-ordering">
        <doc:heading>Ordering Considerations for Publisher Confirms</doc:heading>

        <p>
          In most cases, RabbitMQ will acknowledge messages to
          publishers in the same order they were published (this
          applies for messages published on a single
          channel). However, publisher acknowledgements are emitted
          asynchronously and can confirm a single message or a group
          of messages. The exact moment when a confirm is emitted
          depends on the delivery mode of a message (persistent
          vs. transient) and the properties of the queue(s) the
          message was routed to (see above). Which is to say that
          different messages can be considered ready for
          acknowledgement at different times. This means that
          acknowledgements can arrive in a different order compared to
          their respective messages. Applications should not depend on
          the order of acknowledgements when possible.
        </p>
      </doc:subsection>

      <doc:subsection name="publisher-confirms-and-guaranteed-delivery">
        <doc:heading>Publisher Confirms and Guaranteed Delivery</doc:heading>

        <p>
          The broker loses persistent messages if it crashes before
          said messages are written to disk.  Under certain
          conditions, this causes the broker to behave in surprising
          ways.
        </p>

        <p>
          For instance, consider this scenario:
          <ol>
            <li>a client publishes a persistent message to a durable
              queue</li>
            <li>a client consumes the message from the queue (noting
              that the message is persistent and the queue
              durable), but doesn't yet ack it,</li>
            <li>the broker dies and is restarted, and</li>
            <li>the client reconnects and starts consuming messages.</li>
          </ol>
          At this point, the client could reasonably assume that the
          message will be delivered again.  This is not the case: the
          restart has caused the broker to lose the message.  In order to
          guarantee persistence, a client should use confirms.  If the
          publisher's channel had been in confirm mode, the publisher
          would <em>not</em> have received an ack for the lost message
          (since the message hadn't been written to disk yet).
        </p>
      </doc:subsection>
    </doc:section>

    <doc:section name="limitations">
      <doc:heading>Limitations</doc:heading>

      <doc:subsection name="publisher-confirms-and-guaranteed-delivery">
        <doc:heading>Maximum Delivery Tag</doc:heading>

        <p>
          Delivery tag is a 64 bit long value, and thus its maximum value
          is 9223372036854775807. Since delivery tags are scoped per channel,
          it is very unlikely that a publisher or consumer will run over this
          value in practice.
        </p>
      </doc:subsection>
    </doc:section>

  </body>
</html>
