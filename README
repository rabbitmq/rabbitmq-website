Branches
=========

There are three noteworthy and long-lived named branches in the
rabbitmq-website repo:

live:    The current version of the website. This must represent whatever's
         deployed to www.rabbitmq.com.

default: Changes to the website that will correspond to the next release of
         rabbitmq. This gets merged into live when the release occurs. Normally
         this should represent whatever's deployed to next.rabbitmq.com.

stage:   The staging version of the website. Only relevant while a release is
         being prepared, it acts to snapshot default in case changes are made
         to that during the release process.

Modes
=====

The website also has the concept of being deployed in modes. The three
modes are:

www:      this is the "normal" mode. You would normally deploy from the live
          branch with this mode.

next:     this is the mode for next.rabbitmq.com. This mode has the home page
          and download page chopped down, no blog or search, and a watermark.
          You would normally deploy from the default branch with this mode.

previous: for previous.rabbitmq.com. The website is reduced in the same way
          as "next", but this mode is meant for previous releases rather than
          future releases.

You determine which mode you are using with an argument to the driver
or deploy scripts. Modes are implemented with the <x:modal/> tag and
the $page-mode variable in XSLT.

Development environment
=======================

Simple development operation
----------------------------

The site requires python and python XSLT support for development, and
Apache for deployment. For simple development on Linux systems, it is
enough to

$ sudo apt-get install python-lxml python-markdown python-pygments

and then

$ ./driver.py [www|next|previous]

from the base of the checkout. The site will be available at
http://localhost:8191/. Note that using driver.py the site will not
feature:

* Any release artefacts (this includes the web versions of the man pages)
& The blog

The script code/diagrams.py generates PNGs from graph descriptions
embedded in files. Generally you don't need to run this, since we
check the PNGs in, but if you do want to use it, you'll also need dot:

$ sudo apt-get install graphviz

Notes for Mac users
-------------------

Using the system Python, you can install the necessary parts with:

sudo easy_install pip
sudo pip install lxml
sudo pip install markdown

Deploying to your own machine for development
---------------------------------------------

To test deployment, you will need a Unix machine and the full Apache
configuration:

$ sudo apt-get install apache2-mpm-prefork libapache2-mod-python \
  python-lxml python-markdown python-pygments

Now clone the repository into your home directory and open
conf/www.rabbitmq.com and add a server alias line for a hostname that
will correspond to your machine (DNS wildcards are useful here).

Now run:

$ ./deploy <hostname> [www|next|previous]

Replace hostname with the hostname you'd like to deploy to;
e.g. localhost, if you want to test on your machine. Select www or
next for the deploy mode.

This will rsync/ssh to the named host, set up the website at
/srv/www.rabbitmq.com, add a vhost to your Apache config to drive it,
and restart Apache. This will involving a sudo, so you will be asked
to type your password for the remote machine.

After each change to any of the site contents, re-run the deploy script.

Note that you will still not get the release artefacts or the blog by default.

To get the release artefacts, see rabbitmq-internal-docs/release-process.

To get the blog, install the wordpress package under Debian, run
through the web-based configure process and select the "RabbitMQ"
theme in the admin tool. Or test with rabbit-web-stage, which has a
blog installation.

Release deployment
------------------

When deploying website changes, we merge changes into live, then
deploy from live.

When making a new feature release, we merge live into default, default
into stage, deploy from stage to a staging site, merge stage into
live, then deploy that. See rabbitmq-internal-docs/release-process for
more details.

As before, to deploy, use:

$ ./deploy <hostname> [www|next|previous vA_B_C]

rabbit-web-stage can be used for staging testing. You'll need an
account on these machines. Talk to Simon or learn how Puppet works and
look at the "servers" repository.

The rabbitmq release process (implemented by the
rabbitmq-public-umbrella makefile) builds all of the release artefacts
and then copies them up to the web server.

The details are as follows: The release artifacts live in a directory
'extras' under the home directory of a user called rabbitmq. This
directory is owned by the group 'staff', and group writable. Any user
who wishes to make a release should be a member of the group 'staff'
(all the sysadmin users managed by Puppet are), and so can write into
this directory. The www.rabbitmq.com apache conf has appropriate
aliases declared to expose the contents of 'extras'.

