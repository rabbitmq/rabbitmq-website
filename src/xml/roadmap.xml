<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc">
  <head>
    <title>RabbitMQ - Roadmap</title>
  </head>
  <body>
    <doc:div>
      <p class="intro">
	This page describes the roadmap for future work on RabbitMQ.
      </p>

      <doc:toc class="compact">
	<doc:heading>Table of Contents</doc:heading>
      </doc:toc>

      <doc:section name="broker-roadmap">
	<doc:heading>RabbitMQ Broker Roadmap</doc:heading>

	<doc:roadmapentry>
	  <doc:heading>Improved Clustering and Failover</doc:heading>
	  <p>
	    Erlang's core architecture and OTP libraries provide
	    strong support for distributed programming, including
	    standard approaches to clustering and failover, which
            provide the foundation for RabbitMQ's existing <a
              href="clustering.html">clustering</a>
            capabilities. These will be enhanced further in future
            broker releases.
	  </p>
	</doc:roadmapentry>

	<doc:roadmapentry>
	  <doc:heading>Overload protection</doc:heading>
	  <p>
	    Generalised overload protection and quality-of-service is
	    an important area. Our implementation is structured in a
	    way that will allow fine-grained control over
	    quality-of-service parameters. In particular, we plan to
	    support queue overload protection, producer/consumer flow
	    control, and prefetch windowing.
	  </p>
	</doc:roadmapentry>

	<doc:roadmapentry>
	  <doc:heading>Complete implementation of specification</doc:heading>
	  <p>
	    Certain parts of the AMQP specification are not currently
	    implemented (see the <a
	    href="compatibility.html">compatibility page</a> for
	    details). We plan on implementing missing features such as
	  </p>
	  <p>
	    <ul class="compact">
	      <li>message priorities</li>
	      <li>the <code>basic.reject</code> message</li>
	      <li>clustering support messages</li>
	      <li>the <code>no_local</code> parameter to <code>basic.consume</code></li>
	    </ul>
	  </p>
	</doc:roadmapentry>

	<doc:roadmapentry>
	  <doc:heading>More AMQP transports</doc:heading>
	  <p>
	    Currently, AMQP is bound only to a binary TCP/IP-based
	    transport protocol. In future, bindings for SCTP, HTTP,
	    UDP etc. will appear. Our implementation is structured to
	    make support for additional transports straightfoward.
	  </p>
	</doc:roadmapentry>

	<doc:roadmapentry>
	  <doc:heading>Monitoring, Management and Control Interface</doc:heading>
	  <p>
	    We plan on providing a monitoring and management service,
	    controllable by RPC over AMQP. This will allow developers
	    and users to analyse the live state of the system and to
	    create configurations which can be loaded into the system,
	    creating particular setups of exchanges, queues, bindings,
	    users, virtual hosts and realms.
	  </p>
	</doc:roadmapentry>

	<doc:roadmapentry>
	  <doc:heading>Extension API</doc:heading>
	  <p>
	    We plan on providing a public, documented API for adding
	    Erlang-native services to run within the Erlang cluster
	    hosting the broker.
	  </p>
	</doc:roadmapentry>

	<doc:roadmapentry>
	  <doc:heading>Improved Performance</doc:heading>
	  <p>
	    While our current performance is good, we will be taking
	    care to improve our benchmark results.
	  </p>
	</doc:roadmapentry>

	<doc:roadmapentry>
	  <doc:heading>Bindings to other languages and protocols</doc:heading>
	  <p>
	    We aim to provide integrated gateways to other systems,
	    such as JMS, WS-RX, RTMP, XMPP, FIX and FAST.
	  </p>
	</doc:roadmapentry>

	<doc:roadmapentry>
	  <doc:heading>Value-added services</doc:heading>
	  <p>
	    We plan on implementing value added features not in the
	    protocol document such as last-value cache, content-based
	    routing, and optimised handling of structured data such as
	    XML.
	  </p>
	</doc:roadmapentry>

	<doc:roadmapentry>
	  <doc:heading>SASL authentication</doc:heading>
	  <p>
	    Currently, the broker implements only the AMQP PLAIN
	    authentication mechanisms, in various forms for supporting
	    the RabbitMQ Java client, the Qpid Java client, and the
	    Qpid Python client. A future release will support other
	    SASL mechanisms, in particular CRAM-MD5.
	  </p>
	</doc:roadmapentry>

	<doc:roadmapentry>
	  <doc:heading>Secure message transfer</doc:heading>
	  <p>
	    We plan on supporting encryption and
	    message-authentication services for message streams
	    carried via AMQP, as well as supporting AMQP-over-TLS as
	    the standard is developed.
	  </p>
	</doc:roadmapentry>

	<doc:roadmapentry>
	  <doc:heading>Directory integration</doc:heading>
	  <p>
	    For smooth integration with existing networks, RabbitMQ
	    will need to access shared configuration and user
	    databases such as LDAP, Active Directory, and others.
	  </p>
	</doc:roadmapentry>

	<doc:roadmapentry>
	  <doc:heading>Archival to RDBMS</doc:heading>
	  <p>
	    Many applications require write-behind logging of
	    messaging activity to a traditional RDBMS. We plan on
	    exploring the different alternatives for providing such a
	    service as part of RabbitMQ.
	  </p>
	</doc:roadmapentry>
      </doc:section>

      <doc:section name="client-roadmap">
	<doc:heading>RabbitMQ Client Library Roadmap</doc:heading>

	<doc:roadmapentry>
	  <doc:heading>Type-safety: encapsulation of AMQP entities</doc:heading>
	  <p>
	    Currently, entities such as Queues, Exchanges and Tickets
	    are represented in the Java Client API by simple strings
	    or integers. For improved type-safety, the API will be
	    extended to use an object-oriented representation of these
	    entities.
	  </p>
	</doc:roadmapentry>

	<doc:roadmapentry>
	  <doc:heading>SASL authentication integration</doc:heading>
	  <p>
	    Currently, the Java client implements only the AMQP PLAIN
	    authentication mechanisms. A future release will support
	    other SASL mechanisms, in particular CRAM-MD5. We also aim
	    to develop support for AMQP-over-TLS.
	  </p>
	</doc:roadmapentry>

	<doc:roadmapentry>
	  <doc:heading>Recovery on Failover</doc:heading>
	  <p>
	    The current client implementation does not fail over
	    gracefully to any backup servers. We plan on keeping a
	    record of entities required by a session and transactions
	    in progress. When the client fails over to a backup
	    server, it will recreate all required entities, and
	    continue transparently.
	  </p>
	</doc:roadmapentry>

	<doc:roadmapentry>
	  <doc:heading>Mule integration</doc:heading>
	  <p>
	    We plan on developing a lightweight connector to the <a
	    href="http://mulesource.org/">Mule</a> Enterprise Service
	    Bus. This will allow RabbitMQ to bridge to a vast array of
	    legacy networking systems.
	  </p>
	</doc:roadmapentry>

	<doc:roadmapentry>
	  <doc:heading>Bundled integration with JavaEE transaction model</doc:heading>
	  <p>
	    For smooth integration with existing systems, JavaEE's
	    transaction model needs to be harmonized with AMQP's
	    transaction model. Future work will investigate a mapping
	    between the two.
	  </p>
	</doc:roadmapentry>
      </doc:section>

    </doc:div>
  </body>
</html>
