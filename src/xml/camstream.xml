<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" [
<!ENTITY % entities SYSTEM "rabbit.ent" >
%entities;
]>
<html xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc">
  <head>
    <title>RabbitMQ - Demo</title>
    <script type="text/javascript" src="prototype-1.4.0.js"></script>
    <script type="text/javascript" src="platform.js"></script>
  </head>
  <body>
    <doc:div>
      <p class="intro">
	This page describes Camstream, an example AMQP client program
	that demonstrates some of the features of RabbitMQ.
      </p>

      <doc:toc class="compact">
	<doc:heading>Table of Contents</doc:heading>
      </doc:toc>

      <doc:section name="introduction">
	<doc:heading>Camstream - Streaming video over AMQP</doc:heading>
	<p>
	  Camstream uses AMQP to route live, streaming video from one
	  or more webcams to one or more displays. A capture program
	  injects frames into a named AMQP fanout exchange, and a
	  corresponding playback program uses an anonymous auto-delete
	  queue to retrieve a stream from a named exchange.
	</p>
	<img src="img/camstream-diagram.png" alt="Camstream network diagram"/>
	<p>
	  In this way, Camstream behaves similarly to a video-enabled
	  <a
	  href="http://en.wikipedia.org/wiki/Internet_Relay_Chat">IRC</a>,
	  where an exchange models an IRC channel.
	</p>
      </doc:section>

      <doc:section name="live">
        <doc:heading>Live Demo</doc:heading>
        <p>
          You can launch camstream via Java Web Start:
        </p>
        <ul class="compact">
          <li>display program: <a
          href="&urlBase;camdisplay/camdisplay.jnlp">camdisplay</a></li>
          <li>capture program: <a
          href="&urlBase;camcapturejmf/camcaptureJMF.jnlp">camcaptureJMF</a>
          (requires presence of the <a
          href="http://java.sun.com/products/java-media/jmf/">Java
          Media Framework</a>)
          </li>
        </ul>
        <p>
          If you accept the default settings for the host name and
          channe name, the programs will connect to a public demo
          server.
        </p>
      </doc:section>

      <doc:section name="broker-config">
        <doc:heading>Broker configuration</doc:heading>
        <p>
          In order to run camstream on your own AMQP broker
          installation, you need to configure the broker to have
        </p>
        <ul>
          <li>a user <i>camstream</i> with password <i>camstream</i>,</li>
          <li>a virtual host <i>/camstream</i>,</li>
	  <li>a mapping between the user <i>camstream</i> and the virtual host <i>camstream</i>, 
	  in order to allow that user access to that particular virtual host.</li>
        </ul>
        <p>
          Follow the instructions in the <a
            href="admin-guide.html">admin guide</a> for configuring a
          RabbitMQ broker. Here is transcript of the required commands:
        </p>
        <pre class="sourcecode">$ <i>rabbitmqctl add_user camstream camstream</i>
Creating user "camstream" ...done.
$ <i>rabbitmqctl add_vhost /camstream</i>
Creating vhost "/camstream" ...done.
$ <i>rabbitmqctl map_user_vhost camstream /camstream</i>
Mapping user "camstream" to vhost "/camstream" ...done.
        </pre>
      </doc:section>
      <doc:section name="running">
	<doc:heading>Running Camstream</doc:heading>

	<p>
	  This section describes how to run Camstream from the
	  command-line, if you chose to download the software or
	  compile the <a
	  href="&vUrl;camstream-source-&camstreamVersion;.zip">source
	  code</a>
	</p>

	<p>
	  Camstream is made up of two separate classes of program: the
	  <i>capture</i> programs, for various architectures, that
	  capture video frames and inject them into an AMQP broker;
	  and the <i>display</i> program, written in pure java, that
	  retrieves and displays video and provides a basic text chat
	  application.
	</p>

	<p>
	  While any platform can play back video using camdisplay,
	  only platforms supported by either the <a
	  href="http://java.sun.com/products/java-media/jmf/">Java
	  Media Framework</a> (JMF) or by a special driver can capture
	  video for injection into the AMQP network.
	</p>

	<p>
	  The JMF supports Windows, Linux and Solaris. You can
	  download the JMF for your platform from <a
	  href="http://java.sun.com/products/java-media/jmf/downloads/index.html">here</a>. Both
	  Mac OS X and Linux also have their own special drivers. The
	  following table summarises the various platform options:
	</p>

	<table>
	  <tr>
	    <th>Platform</th>
	    <th class="platformHighlightable platformWindows">Windows</th>
	    <th class="platformHighlightable platformMac">Mac OS X</th>
	    <th class="platformHighlightable platformLinux">Linux</th>
	    <th class="platformHighlightable platformOther">Other JMF</th>
	  </tr>
	  <tr>
	    <th>Capture program</th>
	    <td class="platformHighlightable platformWindows"><a href="&vUrl;camcaptureJMF-&camstreamVersion;.zip">camcaptureJMF</a></td>
	    <td class="platformHighlightable platformMac"><a href="&vUrl;camcaptureOSX-&camstreamVersion;.zip">camcaptureOSX</a></td>
	    <td class="platformHighlightable platformLinux"><a href="&vUrl;camcaptureLinux-&camstreamVersion;.zip">camcaptureLinux</a>,<br/><a href="&vUrl;camcaptureJMF-&camstreamVersion;.zip">camcaptureJMF</a></td>
	    <td class="platformHighlightable platformOther"><a href="&vUrl;camcaptureJMF-&camstreamVersion;.zip">camcaptureJMF</a></td>
	  </tr>
	  <tr>
	    <th>Display program</th>
	    <td class="platformHighlightable platformWindows"><a href="&vUrl;camdisplay-&camstreamVersion;.zip">camdisplay</a></td>
	    <td class="platformHighlightable platformMac"><a href="&vUrl;camdisplay-&camstreamVersion;.zip">camdisplay</a></td>
	    <td class="platformHighlightable platformLinux"><a href="&vUrl;camdisplay-&camstreamVersion;.zip">camdisplay</a></td>
	    <td class="platformHighlightable platformOther"><a href="&vUrl;camdisplay-&camstreamVersion;.zip">camdisplay</a></td>
	  </tr>
	</table>

	<doc:subsection name="running-capture">
	  <doc:heading>Running capture programs</doc:heading>

	  <p>
	    The capture programs are camcaptureJMF, camcaptureOSX,
	    camcaptureLinux, in Java Media Framework, Quicktime and
	    Video4Linux variants respectively.
	  </p>

	  <p>
	    The Quicktime variant is for Mac OS X machines, running OS
	    X version 10.3.9 or greater.
	  </p>

	  <p>
	    The Video4Linux variant is an alternative to the JMF
	    variant for Linux machines with V4L-compatible
	    webcams. Use this if you do not wish to install the JMF
	    for Linux.
	  </p>

	  <p>
	    You can either start the programs without command-line
	    arguments, which will open a window asking for the startup
	    parameters the program needs:
	  </p>

	  <pre class="sourcecode">$ ./camcaptureJMF
$ ./camcaptureOSX
$ ./camcaptureLinux
C:> camcaptureJMF.bat</pre>

	  <p>
	    or you can supply the following command-line arguments:
	  </p>

	  <pre class="sourcecode">./camcapture<b>XX</b> <i>hostname</i> <i>exchangename</i> <i>routingkey</i> <i>framerate</i> <i>x-res</i> <i>y-res</i></pre>

	  <p>
	    <dl>
	      <dt>hostname</dt>
	      <dd>
		The host name of the AMQP server to route video
		through.
	      </dd>
	      <dt>exchangename</dt>
	      <dd>
		The exchange (i.e. "channel") to publish video
		to. This is a similar notion to IRC's "channel"
		concept.
	      </dd>
	      <dt>routingkey</dt>
	      <dd>
		The AMQP routing key to use for each transmitted
		piece of media. This is a similar notion to IRC's
		"nick" concept - a personal identifier for use
		within a channel.
	      </dd>
	      <dt>framerate</dt>
	      <dd>
		Defaults to 5 fps. This limits the maximum number of
		video frames per second the program will capture and
		transmit.
	      </dd>
	      <dt>x-res and y-res</dt>
	      <dd>
		Defaults to 176x144. These parameters configure the
		resolution of the video stream to be captured and
		transmitted. Note that if a resolution is selected
		that is not supported by the camera, it will
		silently ignore these settings.
	      </dd>
	    </dl>
	  </p>
	</doc:subsection>

	<doc:subsection name="running-playback">
	  <doc:heading>Running the playback program</doc:heading>

	  <p>
	    The playback program is called camdisplay, and runs on any
	    Swing-supporting Java runtime, including those for
	    Windows, Linux and Mac OS X.
	  </p>

	  <pre class="sourcecode">./camdisplay <i>hostname</i> <i>exchangename</i> <i>routingkey</i></pre>

	  <p>
	    <dl>
	      <dt>hostname</dt>
	      <dd>
		The host name of the AMQP server to retrieve video
		from.
	      </dd>
	      <dt>exchangename</dt>
	      <dd>
		The exchange (i.e. "channel") to bind our AMQP queue
		to.
	      </dd>
	      <dt>routingkey</dt>
	      <dd>
		The AMQP routing key to use for each transmitted
		piece of media. This is a similar notion to IRC's
		"nick" concept - a personal identifier for use
		within a channel.
	      </dd>
	    </dl>
	  </p>

	  <p>
	    Note that the framerate is entirely controlled by the
	    intersection of the capture program's maximum framerate
	    and the available downstream bandwidth between the AMQP
	    server and the <code>camdisplay</code> client.
	  </p>
	</doc:subsection>
      </doc:section>
    </doc:div>
    <script type="text/javascript">highlightPlatform();</script>
  </body>
</html>
