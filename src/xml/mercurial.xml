<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc">
  <head>
    <title>RabbitMQ - Mercurial</title>
  </head>
  <body>
    <doc:div>
      <p class="intro">
	This page describes the way we work with Mercurial on the
	RabbitMQ project.
      </p>

      <doc:toc class="compact">
	<doc:heading>Table of Contents</doc:heading>
      </doc:toc>

      <doc:section name="overview">
	<doc:heading>What is Mercurial?</doc:heading>

	<p>
	  <a href="http://www.selenic.com/mercurial/">Mercurial</a> is
	  a fast, lightweight <a
	  href="http://en.wikipedia.org/wiki/Revision_control">Source
	  Control Management system</a> designed for efficient
	  handling of very large distributed projects.
	</p>
	<p>
	  We use Mercurial on the RabbitMQ project to manage almost
	  all our source-code.
	</p>
	<ul>
	  <li>Mercurial has numerous <a
	  href="http://www.selenic.com/mercurial/wiki/index.cgi/Tutorial">tutorials</a>.</li>

	  <li>RabbitMQ's Mercurial repositories are <a
	  href="http://hg.rabbitmq.com/">listed here</a>. Individual
	  project pages on this website will generally point you in
	  the direction of the specific combinations of modules you'll
	  need to check out.</li>
	</ul>
      </doc:section>

      <doc:section name="branchperbug">
	<doc:heading>Branching policy: Branch per bug</doc:heading>
	<p>
	  We use the technique of <i>branch per bug</i> when
	  developing RabbitMQ code, where each feature or bug fix is
	  developed on a branch of its own (using <code>hg
	  branch</code>) and merged into the <code>default</code>
	  (trunk) branch only when the hurdle of QA is passed. We use
	  our Bugzilla instance to track each work item, so branches
	  follow the pattern <code>bug<i>NNNNN</i></code>.
	</p>
	<p>
	  More information on this style of development can be found
	  in the following links:
	</p>
	<ul>
	  <li><a
	  href="http://www.lshift.net/blog/2008/06/19/mercurial-merge-technique">Mercurial
	  Merge Technique</a> on the LShift blog.</li>

	  <li><a
	  href="http://hgbook.red-bean.com/hgbookch8.html#x12-1660008.6">Dealing
	  with multiple named branches in a repository</a> from the
	  Mercurial book.</li>
	</ul>
      </doc:section>

      <doc:section name="defaultbranch">
	<doc:heading>The default branch</doc:heading>
	<p>
	  The <code>default</code> branch contains all the work that
	  has been QA'd so far that is scheduled to appear in the next
	  release. The <code>default</code> branch of each RabbitMQ
	  repository is usually roughly in sync with the
	  <code>default</code> branches of the others. Generally, you
	  can track QA'd development work by tracking the
	  <code>default</code> branches of the RabbitMQ repositories
	  of interest.
	</p>
      </doc:section>

      <doc:section name="defaultbranch">
	<doc:heading>Maintenance branches</doc:heading>
	<p>
	  Sometimes we create branches for maintenance work, which are
	  used for bug-fixes for a particular release. An example of
	  this is the <code>v1_5</code> branch which appears in a
	  number of RabbitMQ repositories. Such branches play the same
	  role as the <code>default</code> branch except that they
	  carry merged, QA'd code intended for the next bug-fix
	  release rather than the next general release.
	</p>
      </doc:section>

      <doc:section name="tags">
	<doc:heading>Tags</doc:heading>
	<p>
	  We also use tags to give names to snapshots of the state of
	  the code. Generally, both the core repositories and the
	  repositories of plugins intended to work with the named
	  snapshot are tagged.
	</p>
	<p>
	  For example, if you are using RabbitMQ server version 1.5.3,
	  then examining the output of <code>hg tags</code> in a copy
	  of <code>rabbitmq-stomp</code> gives:
	</p>
	<pre>$ hg tags
tip                               93:9cd7eba4269c
rabbitmq_v1_5_3                   91:5ee5e2c0b64a
rabbitmq_v1_5_1                   65:2eba20816126
rabbitmq_v1_5_0                   60:1a1ff5067bb6
rabbitmq_v1_4_0                   49:71b922193057
Migrated to mercurial             11:a28eea2c2a2b</pre>
	<p>
	  It's important to make sure that all the repositories you
	  are using are on the same tag as each other. Continuing with
	  our example of server version 1.5.3, you could make sure
	  your checkout of <code>rabbitmq-stomp</code> was at the
	  <code>rabbitmq_v1_5_3</code> tag by using <code>hg
	  update</code>:
	</p>
	<pre>hg update rabbitmq_v1_5_3</pre>
	<p>
	  At this point, you could proceed with compiling the plugin
	  as explained in the plugin's documentation.
	</p>
	<p>
	  If there is no specific tag for a repository for the version
	  of the server you are using, try using the newest tag that
	  has the same major and minor version number. For instance,
	  if you were running RabbitMQ server version 1.5.4, but no
	  corresponding tag on <code>rabbitmq-stomp</code> was
	  available, you should try using tag
	  <code>rabbitmq_v1_5_3</code>. Another alternative for this
	  hypothetical situation would be to use the tip of the 1.5.x
	  branch:
	</p>
	<pre>$ hg branches
default                        93:9cd7eba4269c
rabbitmq_v1_3_0_branch         45:90dd1726fe0b
v1_5                           92:0ba97fbaea1f (inactive)
$ hg update v1_5
4 files updated, 0 files merged, 5 files removed, 0 files unresolved
$ </pre>
      </doc:section>
    </doc:div>
  </body>
</html>
