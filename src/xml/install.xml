<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc">
  <head>
    <title>RabbitMQ - Installation</title>
  </head>
  <body>
    <doc:div>
      <p class="intro">
	This section contains server installation instructions for
	various platforms. You can download example programs,
	utilities, Java client libraries and bindings to various
	third-party management, monitoring and routing tools from <a
	href="http://www.rabbitmq.com/">http://www.rabbitmq.com/</a>.
      </p>

      <doc:toc class="compact">
	<doc:heading>Table of Contents</doc:heading>
      </doc:toc>

      <doc:section name="windows">
	<doc:heading>Windows</doc:heading>

	<doc:subsection name="install-windows-bundle">
	  <doc:heading>Installation from a complete bundle</doc:heading>

	  <p>
	    The bundle zip file contains all the files listed in the
	    next section, including an Erlang system installer and the
	    RabbitMQ broker binary distribution, as well as an archive
	    of the Java librabbitmq client library.
	  </p>
	</doc:subsection>

	<doc:subsection name="install-windows-separately">
	  <doc:heading>Installation from separate components</doc:heading>

	  <ul>
	    <li>
	      Install a recent version of Erlang. Any recent version
	      should work, but we are developing against Erlang R11B-5 on
	      Windows, which can be downloaded from <a
	      href="http://www.erlang.org/download/otp_win32_R11B-5.exe">http://www.erlang.org/download/otp_win32_R11B-5.exe</a>
	    </li>
	    <li>
	      Download
	      <code>rabbitmq-server-<i>version</i>.zip</code>, where
	      <i>version</i> is the version of RabbitMQ Server you
	      want to install.
	    </li>
	    <li>
	      Contained in the zip file is a directory named
	      <code>rabbitmq_server-<i>version</i></code>.

          You can <b>either</b> extract this folder into 
	                    
          <code>C:\Program Files\erl5.5.5\lib</code>

          (or if you use a different Erlang version, the
          corresponding <code>lib</code> directory) 
          <b>or</b> extract it elsewhere and set the environment
          variable ERLANG_HOME to point to your Erlang directory
          (e.g. <code>C:\Program Files\erl5.5.5</code>).
          
	    </li>
	    <li>
	      Within the <code>sbin</code> directory is a file
	      <code>rabbitmq-server.bat</code> which may need
	      customisation for your installation, especially if you
	      use a different version of Erlang. Environment variables
	      set within the batch file are

              <dl>
                <dt>ERLANG_HOME</dt>
                <dd>
                  Set this to the base directory of your Erlang
                  installation, e.g.

                  <code>C:\Program Files\erl5.5.5</code>.

                  The RabbitMQ batch file expects the file
                  <code>bin\erl.exe</code> to be present at this
                  location. The default setting determines the base
                  directory from the script location, which will work
                  in most cases.
                </dd>

                <dt>RABBITMQ_BASE</dt>
                <dd>
                  Defaults to the directory <code>RabbitMQ</code> in
                  the user's application data directory, e.g.

                  <code>C:\Documents and Settings\User\Application Data\RabbitMQ</code>.

                  Under Windows Vista the location would be slightly different, e.g.

                  <code>C:\Documents and Settings\User\AppData\Roaming\RabbitMQ</code>

                  This is the base directory containing
                  sub-directories for the RabbitMQ Server's database
                  and log files.  Alternatively, set
                  <b>RABBITMQ_MNESIA_BASE</b> and
                  <b>RABBITMQ_LOG_BASE</b> individually.
                </dd>

                <dt>RABBITMQ_MNESIA_BASE</dt>
                <dd>
                  Defaults to <code>%RABBITMQ_BASE%\db</code>. Set this to the
                  directory where Mnesia database files should be
                  placed.
                </dd>

                <dt>RABBITMQ_LOG_BASE</dt>
                <dd>
                  Defaults to <code>%RABBITMQ_BASE%\log</code>. Log files
                  generated by the server will be placed in this
                  directory.
                </dd>

                <dt>RABBITMQ_NODENAME</dt>
                <dd>
                  Defaults to <code>rabbit</code>. This can be useful
                  if you want to run more than one node per machine -
                  <b>RABBITMQ_NODENAME</b> should be unique per
                  erlang-node-and-machine combination. See
                  <a href="clustering.html#single-machine">
                  clustering on a single machine</a> for more.
                </dd>
                
                <dt>RABBITMQ_NODE_IP_ADDRESS</dt>
                <dd>
                  Defaults to <code>0.0.0.0</code>. This can be changed 
                  if you only want to bind to one network interface.
                  Please note that Windows 2000 (and maybe earlier
                  versions) do not understand "<code>0.0.0.0</code>" 
                  and will need to have this set explicitly.
                </dd>
                
                <dt>RABBITMQ_NODE_PORT</dt>
                <dd>
                  Defaults to <code>5672</code>.
                </dd>

                <dt>RABBITMQ_CLUSTER_CONFIG_FILE</dt>
                <dd>
                  Defaults to
                  <code>%RABBITMQ_BASE%\rabbitmq_cluster.config</code>. If
                  this file is present it is used by the server to
                  auto-configure a RabbitMQ cluster. See the <a
                  href="clustering.html">clustering guide</a> for
                  details.
                </dd>
              </dl>
	    </li>
	  </ul>
	</doc:subsection>

	<doc:subsection name="running-windows">
	  <doc:heading>Running the Server as an Application</doc:heading>

	  <p>
	    Currently, it's sufficient to change directory to

            <code>rabbitmq_server-<i>version</i>\sbin</code>

	    and double-click the <code>rabbitmq-server.bat</code>
	    file.
          </p>
          <p>
            The shell window that results displays a banner message,
            and reports on progress in the startup sequence,
            concluding with the message "broker running", indicating
            that the RabbitMQ broker has been started successfully. To
            shut down the server, close the shell
            window. Alternatively, use the <a
            href="admin-guide.html#stop">rabbitmqctl stop</a> command.
	  </p>
	</doc:subsection>

	<doc:subsection name="running-windows-service">
	  <doc:heading>Running the Server as a Service</doc:heading>
          <p>
            The server can be run as a service instead of an application. The server 
            will run in the security context of the system account, without the need
            for a user to be logged in on a console. The server should not be run as a 
            service and application simultaneously.
          </p>
          <p>
            <ul>
              <li>
                The <code>rabbitmq-service.bat</code> script in the 
                <code>sbin</code> directory is used to manage the service. 
                The <code>rabbitmq-service.bat</code> script accepts the same environment 
                variables as <code>rabbitmq-server.bat</code>, except <b>ERLANG_HOME</b>. 
                Configure the following additional variables:
                <dl>
                  <dt>ERLANG_SERVICE_MANAGER_PATH</dt>
                  <dd>
                    The default value of this path is
                    <code>C:\Program Files\erl5.5.5\erts-5.5.5\bin</code>. The given path
                    must contain the <code>erlsrv.exe</code> Erlang service wrapper
                    script.
                  </dd>
                  <dt>RABBITMQ_SERVICENAME</dt>
                  <dd>
                    This name will appear in the list of services reported by
                    the operating system.
                  </dd>
                  <dt>RABBITMQ_CONSOLE_LOG</dt>
                  <dd>
                    Set this varable to <code>new</code> or
                    <code>reuse</code> to have the console output from
                    the server redirected to a file named
                    <code>RABBITMQ_SERVICENAME</code>.debug in the
                    default <code>RABBITMQ_BASE</code> directory. If
                    <code>RABBITMQ_CONSOLE_LOG</code> is set to
                    <code>new</code> then a new file will be created
                    each time the service starts. If
                    <code>RABBITMQ_CONSOLE_LOG</code> is set to
                    <code>reuse</code> then the file will be
                    overwritten each time the service starts.  If
                    <code>RABBITMQ_CONSOLE_LOG</code> is unset then
                    console output from the server will be discarded.
                  </dd>
                </dl>
              </li>
              <li>
                Open a command shell (<code>cmd.exe</code>) in the
                <code>sbin</code> directory. Install the service by
                executing <pre class="sourcecode">rabbitmq-service.bat install</pre>
              </li>
              <li>
                The service will now appear in the services control
                panel.  Execute <pre
                class="sourcecode">rabbitmq-service.bat start</pre> to
                start the server.  If the output from this command is
                "<code>Service <i>RABBITMQ_SERVICENAME</i>
                started</code>", then the service was started
                correctly. If the output reads "<code>The process
                terminated unexpectedly</code>" instead, then the
                service did not start correctly. Check that the
                environmental variables are set correctly.
              </li>
              <li>
                Confirm that the service list in the operating system
                service list (<code>services.msc</code>) reports a
                "Started" status for the value of
                <b>RABBITMQ_SERVICENAME</b>.
              </li>
            </ul>
          </p>
          <p>
            Refer to the <a href="service-guide.html">service</a> guide
            for a complete description of <code>rabbitmq-service.bat</code> 
            arguments.
          </p>
	</doc:subsection>

    <doc:subsection name="logging-windows">
      <doc:heading>Logging</doc:heading>
        <p>
          Output from the server is sent to a
          <b>RABBITMQ_NODENAME</b>.log file in the
          <b>RABBITMQ_LOG_BASE</b> directory. Additional log data is
          written to <b>RABBITMQ_NODENAME</b>-sasl.log.
        </p>
        <p>
          The log files are created afresh every time the broker
          starts. In order to retain a complete log history the
          startup scripts append the contents to the corresponding
          <code>.1</code> files prior to starting the broker.
        </p>
	<p>
	  You can easily write your own log rotation script using the 
	  <code>rotate_logs_all</code> command in
	  <code>rabbitmq-multi.bat</code> or the <code>rotate_logs</code>
	  command in <code>rabbitmqctl.bat</code> if you want to perform
	  log rotation selectively.
	</p>
    </doc:subsection>
    </doc:section>

      <doc:section name="debian">
	<doc:heading>Debian GNU/Linux</doc:heading>

	<doc:subsection name="install-debian">
	  <doc:heading>Installation Instructions</doc:heading>
	  <ul>
	    <li>
	      Install rabbitmq-server_<i>version</i>_all.deb (which
	      you can download by hand, or by using our <a
	      href="debian.html#apt">APT repository</a>). The server
	      should start with appropriate defaults. Note that the
	      package depends on erlang-base packages, so if you use apt
	      on a Debian distribution that has erlang-base packages
	      available, all dependencies should be properly met.
	    </li>
	    <li>
	      To adjust the settings used for starting the server,
	      edit <code>/etc/rabbitmq/rabbitmq.conf</code>, setting
	      environment variables as described in the <a
	      href="#generic-unix">Generic Unix</a> section below. You
	      can additionally set <code>NODE_COUNT</code> in 
	      <code>/etc/default/rabbitmq</code> to define
	      <a href="clustering.html#single-machine">the number of
	      nodes to run on a single machine</a>.
	    </li>
	  </ul>
	</doc:subsection>

	<doc:subsection name="running-debian">
	  <doc:heading>Running the Server</doc:heading>
	  <p>
	    The server is started as a daemon by default when the
	    RabbitMQ Server package is installed. Start and stop the
	    server as usual for Debian using <code>invoke-rc.d
	    rabbitmq-server <i>stop/start/etc</i></code>.
	  </p>
	  <p>
	    The server is set up to run as system user <code>rabbitmq</code>. 
	    This means that if you change the location 
            of the Mnesia database or logs as described below, you must
            ensure the files are owned by this user.
	  </p>
          <p>
            The startup script waits for a limited amount of time, 30
            seconds by default, for the broker nodes to start. When
            that time is exceeded a <code>TIMEOUT</code> is
            reported. The cause of this could be a misconfiguration or
            other error. However, it is also possible that the node
            simply is taking a long time to start up, perhaps because
            the machine it is running on is heavily loaded, or there
            are many persisted messages or durable queues and
            exchanges that need to be recovered. For that reason the
            timeout can be adjusted by setting
            <code>MULTI_START_ARGS</code> to
	    "<code>-maxwait <i>timeout_in_seconds</i></code>"
	    in <code>/etc/rabbitmq/rabbitmq.conf</code>.
        </p>
	</doc:subsection>
    <doc:subsection name="logging-debian">
       <doc:heading>Logging</doc:heading>
       <p>
          Output from the server is sent to a
          <b>RABBITMQ_NODENAME</b>.log file in the
          <b>RABBITMQ_LOG_BASE</b> directory. Additional log data is
          written to <b>RABBITMQ_NODENAME</b>-sasl.log.
       </p>
       <p>
         The log files use <code>logrotate</code> program to do all
         the necessary rotation and compression (when needed). The
         script runs weekly, but you can easily change that. By default
         <code>logrotate</code> will handle files located in default
         <code>/var/log/rabbitmq</code> directory. See
         <code>/etc/logrotate.d/rabbitmq-server</code> for default
         <code>logrotate</code> configuration file. 
       </p>
    </doc:subsection>
    </doc:section>

    <doc:section name="rpm">
      <doc:heading>RPM based Linux (CentOS, Fedora, OpenSuse, RedHat, etc.)</doc:heading>
        
      <doc:subsection name="install-rpm">
        <doc:heading>Installation Instructions</doc:heading>
        <ul>
          <li>
            Install rabbitmq-server-<i>version</i>-noarch.rpm (which
            you can download by hand at our <a 
            href="server.html">download page</a>).
            Note that the package depends on erlang package(s).
            We strongly recommend using your distribution's packaged
            version of Erlang to run the server. See
            <a href="http://fedoraproject.org/wiki/EPEL/">EPEL</a>
            if there is no official erlang package for your distribution.
          </li>
          <li>
            To adjust the settings used for starting the server,
            edit <code>/etc/rabbitmq/rabbitmq.conf</code>, setting
            environment variables as described in the <a
            href="#generic-unix">Generic Unix</a> section below. You
            can additionally set <code>NODE_COUNT</code> in
            <code>/etc/sysconfig/rabbitmq</code> to define
            <a href="clustering.html#single-machine">the number of
            nodes to run on a single machine</a>.
          </li>
        </ul>
      </doc:subsection>
        
      <doc:subsection name="running-rpm">
        <doc:heading>Running the Server</doc:heading>
        <p>
          The server is started as a daemon by default when the
          RabbitMQ Server package is installed. Start and stop the
          server as usual using <code>invoke-rc.d
          rabbitmq-server <i>stop/start/etc</i></code>.
        </p>
        <p>
          The server is set up to run as system user <code>rabbitmq</code>. 
          This means that if you change the location 
          of the Mnesia database or logs as described below, you must
          ensure the files are owned by this user.
        </p>
        <p>
          The startup script waits for a limited amount of time, 30
          seconds by default, for the broker nodes to start. When that
          time is exceeded a <code>TIMEOUT</code> is reported. The
          cause of this could be a misconfiguration or other
          error. However, it is also possible that the node simply is
          taking a long time to start up, perhaps because the machine
          it is running on is heavily loaded, or there are many
          persisted messages or durable queues and exchanges that need
          to be recovered. For that reason the timeout can be adjusted
          by setting <code>MULTI_START_ARGS</code> to
	  "<code>-maxwait <i>timeout_in_seconds</i></code>"
	  in <code>/etc/rabbitmq/rabbitmq.conf</code>.
        </p>
      </doc:subsection>
      <doc:subsection name="logging-rpm">
        <doc:heading>Logging</doc:heading>
        <p>
          Logging uses <code>logrotate</code> script in the same way
          as for <a href="#logging-debian">Debian GNU</a>
        </p>
      </doc:subsection>



      </doc:section>      

      <doc:section name="generic-unix">
	<doc:heading>Generic Unix or Linux (BSD, Mac OS X, etc.)</doc:heading>

	<doc:subsection name="install-generic-unix">
	  <doc:heading>Installation Instructions</doc:heading>

	  <ul>
	    <li>
	      Install a recent version of Erlang.
	    </li>
	    <li>
	      Download
	      <code>rabbitmq-server-generic-unix-<i>version</i>.tar.gz</code>,
	      where <i>version</i> is the version of RabbitMQ Server
	      you want to install.
	    </li>
	    <li>
	      Contained in the tarball is a directory named
	      <code>rabbitmq-server-generic-unix-<i>version</i></code>. You
	      can <b>either</b> extract the tarball into
	      <code>/usr/lib/erlang/lib</code> directory (or wherever
	      your Erlang installation places its application and
	      library directory) <b>or</b> extract it elsewhere and
	      set the environment variable ERLANG_HOME to point to
	      your Erlang directory
	      (e.g. <code>/usr/lib/erlang</code>).
	    </li>
	    <li>
	      Within the <code>sbin</code> directory is a shell script
	      <code>rabbitmq-server</code> which may need
	      customisation for your installation. Environment
	      variables available for configuration are

	      <dl>
		<dt>RABBITMQ_MNESIA_BASE</dt>
		<dd>
		  Defaults to
		  <code>/var/lib/rabbitmq/mnesia</code>. Set this to
		  the directory where Mnesia database files should be
		  placed.
		</dd>

		<dt>RABBITMQ_LOG_BASE</dt>
		<dd>
		  Defaults to <code>/var/log/rabbitmq</code>. Log
		  files generated by the server will be placed in this
		  directory.
		</dd>

        <dt>RABBITMQ_NODENAME</dt>
        <dd>
          Defaults to <code>rabbit</code>. This can be useful
          if you want to run more than one node per machine -
          <b>RABBITMQ_NODENAME</b> should be unique per
          erlang-node-and-machine combination. See 
          <a href="clustering.html#single-machine">
          clustering on a single machine</a> for more.
        </dd>
        
        <dt>RABBITMQ_NODE_IP_ADDRESS</dt>
        <dd>
          Defaults to <code>0.0.0.0</code>. This can be changed 
          if you only want to bind to one network interface.
        </dd>
        
        <dt>RABBITMQ_NODE_PORT</dt>
        <dd>
          Defaults to <code>5672</code>.
        </dd>
        <dt>RABBITMQ_CLUSTER_CONFIG_FILE</dt>
        <dd>
          Defaults to
          <code>/etc/rabbitmq/rabbitmq_cluster.config</code>. If
          this file is present it is used by the server to
          auto-configure a RabbitMQ cluster. See the <a
          href="clustering.html">clustering guide</a>
          for details.
        </dd>
	      </dl>
	    </li>
	  </ul>
	</doc:subsection>

	<doc:subsection name="running-generic-unix">
	  <doc:heading>Running the Server</doc:heading>

	  <p>
	    Invoke the <code>rabbitmq-server</code> shell script.
	    This displays a banner message, and reports on progress in
	    the startup sequence, concluding with the message "broker
	    running", indicating that the RabbitMQ broker has been
	    started successfully. To shut down the server just
	    terminate the process. Alternatively, use the <a
	    href="admin-guide.html#stop">rabbitmqctl stop</a> command.
          </p>
          <p>
            You can also start the server in "detached" mode with
            <code>rabbitmq-server -detached</code>, in which case the
            server process is backgrounded immediately and nothing is
            written to the console.
          </p>
	</doc:subsection>
        
    <doc:subsection name="logging-generic-unix">
      <doc:heading>Logging</doc:heading>
      <p>
        Output from the server is sent to a
        <b>RABBITMQ_NODENAME</b>.log file in the
        <b>RABBITMQ_LOG_BASE</b> directory. Additional log data is
        written to <b>RABBITMQ_NODENAME</b>-sasl.log.
      </p>
      <p>
        In order to retain a complete log history the startup scripts,
        by default, append the contents to the corresponding <code>.1</code>
        files prior to starting the broker.
        You can easily set up log rotation process by creating 
        <code>logrotate</code> script as it is done for
        <a href="#logging-debian">Debian and RPM based distributions</a>.
      </p>
    </doc:subsection>
      </doc:section>

      <doc:section name="troubleshooting">
	<doc:heading>Troubleshooting</doc:heading>
        <p>
          If the server fails to start, examine the console output and
          the log files in the <b>RABBITMQ_LOG_BASE</b> directory for
          clues.  Chances are there is a configuration error, e.g. the
          mnesia directory cannot be created or the TCP port on which
          RabbitMQ tries to listen is already taken.
        </p>
        <p>
          When the server fails to start, usually a crash dump file
          <code>erl_crash.dump</code> is created in the directory
          where the server was started. This can provide very detailed
          information on the causes of a start up failure, but its
          analysis requires Erlang expertise.
        </p>
        <p>
          If the server is not behaving as expected during operation,
          examine the log files for clues and use the rabbitmqctl
          commands from the <a href="admin-guide.html">admin guide</a>
          to obtain further information on the server status.
        </p>
        <p>
          For problems encountered in the handling of AMQP traffic,
          the <a href="examples.html#tracer">AMQP capture and analysis
          tool</a> may help in the analysis.
        </p>
        <p>
          If all of the above fails, report the problem to <a
          href="mailto:support@rabbitmq.com">support@rabbitmq.com</a>
          and include the log files under <b>RABBITMQ_LOG_BASE</b> in
          your report.
        </p>

      </doc:section>

    </doc:div>
  </body>
</html>
