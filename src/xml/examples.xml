<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc">
  <head>
    <title>RabbitMQ - Examples</title>
  </head>
  <body>
    <doc:div>
      <p class="intro">
	This section describes some of the demos and example programs
	available for the RabbitMQ AMQP implementation.
      </p>

      <doc:toc class="compact">
	<doc:heading>Table of Contents</doc:heading>
      </doc:toc>

      <doc:section name="demo-server">
	<doc:heading>Publicly-accessible Demonstration Broker Service</doc:heading>
	<p>
	  <a href="http://www.lshift.net/">LShift</a> are hosting a
	  demonstration AMQP server that is freely available for
	  people to try out, perhaps for testing interoperation or
	  experimenting with WAN AMQP connections.
	</p>
	<p>
	  All supported RabbitMQ features are available on the server,
	  including persistent storage. While we intend to keep the
	  server running for long stretches, we will be tracking
	  RabbitMQ development, so reserve the right to restart it,
	  possibly erasing its database in the process from time to
	  time.
	</p>
	<p>
	  Here are the connection details:
	</p>
	<p>
	  <ul class="compact">
	    <li>Host: dev.rabbitmq.com</li>
	    <li>Port: 5672</li>
	    <li>Username: "guest"</li>
	    <li>Password: "guest"</li>
	    <li>Virtual Host: "/"</li>
	  </ul>
	</p>
	<p>
	  During debugging, you may wish to monitor the messages that
	  are being sent through the <code>amq.rabbitmq.log</code>
	  topic exchange. One way of doing this is to make use of the
	  <a
	  href="http://hg.rabbitmq.com/rabbitmq-xmpp/raw-file/default/doc/index.html">XMPP
	  IM gateway</a> we run on <code>dev.rabbitmq.com</code>, by
	  adding <code>amq.rabbitmq.log@dev.rabbitmq.com</code> to
	  your XMPP roster.
	</p>


<!--
- Consider web page showing what is in the test queue and have a
little JSON to write/read on the queue (type messages into a window
and hit 'send'.  have another window with a 'get' button.  below is
shown what is in the queue- so this will show people how it all works)
-->

      </doc:section>

<!--
      <doc:section name="manager">
	<doc:heading>RabbitMQ Management command-line client</doc:heading>

	<p>
	  The command-line management client for RabbitMQ makes use of
	  the Java client library's JSON-RPC-over-AMQP binding (see <a
	  href="api-guide.html#jsonrpc">the API guide</a>) to create
	  and delete users [etc].
	</p>
      </doc:section>
-->

      <doc:section name="bundled">
	<doc:heading>Bundled examples</doc:heading>
	<p>
	  The Java client library distribution is shipped with a
	  <code>rabbitmq-client-tests.jar</code>, containing several
	  small example programs for exercising the functionality of
	  the RabbitMQ server.  The source code for these examples is
	  in the <code>java/test/src</code> folder in the source
	  distribution.
        </p>
        <p>
          The script <code>runjava.<i>{</i>sh<i>,</i>bat<i>}</i></code> runs Java with
          the class path correctly configured for the examples, e.g.
          <code>runjava.sh com.rabbitmq.examples.TestMain</code> runs
          the <code>TestMain</code> functional tests.
        </p>
      </doc:section>
          
      <doc:section name="tracer">
	<doc:heading>AMQP Protocol Capture/Analysis Tool</doc:heading>
	<p>
	  There's a very basic, very simple AMQP protocol analyzer in
	  class <code>com.rabbitmq.tools.Tracer</code>. Invoke it with
	</p>
	<pre>runjava.sh com.rabbitmq.tools.Tracer <i>listenPort</i> <i>connectHost</i> <i>connectPort</i></pre>
	<p>
	  <dl>
	    <dt>listenPort</dt>
	    <dd>port to listen for incoming AMQP connections on - defaults to 5673.</dd>
	    <dt>connectHost</dt>
	    <dd>hostname to use when making an outbound connection in response to an incoming connection - defaults to localhost.</dd>
	    <dt>connectPort</dt>
	    <dd>port number to use when making an outbound connection - defaults to 5672.</dd>
	  </dl>
	</p>
      </doc:section>

      <doc:section name="experimental">
        <doc:heading>Experimental Code</doc:heading>
        <p>
          Some experimental code that uses and extends RabbitMQ is
          available <a href="download.html#experimental">here</a>.
        </p>
      </doc:section>
    </doc:div>
  </body>
</html>
