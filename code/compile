#!/usr/bin/env python

from __future__ import with_statement

import render
import sys
import os
import os.path
import shutil

def main():
    if len(sys.argv) < 3 or len(sys.argv) > 4:
        print "Usage: compile <in-dir> <out-dir> [<file>]"
        exit(1)
    in_dir = sys.argv[1]
    render.SITE_DIR = in_dir
    out_dir = sys.argv[2]
    if len(sys.argv) == 4:
        f = sys.argv[3]
        handle_file(in_dir, f, os.path.join(out_dir, f))
    else:
        for in_path, dirs, files in os.walk(in_dir):
            path = relpath(in_path, in_dir)
            out_path = os.path.join(out_dir, path)
            if not os.path.exists(out_path):
                os.makedirs(out_path)
                for f in files:
                    handle_file(in_dir,
                                os.path.normpath(os.path.join(path, f)),
                                os.path.join(out_path, f))
    print ""

def handle_file(in_dir, in_f, out_f):
    ext = os.path.splitext(in_f)[1].lower()
    if (ext == '.xml' and not blacklist(in_f)) or ext == '.md':
        render_file(in_f, out_f)
    elif ext == '.xsl' or ext.endswith('~'):
        pass
    else:
        shutil.copyfile(os.path.join(in_dir, in_f), out_f)
        sys.stdout.write(".")

def blacklist(f):
    return f.startswith('resources/specs/')

def render_file(in_f, out_f):
    rendered = render.render_page('/' + html_ext(in_f))
    with open(html_ext(out_f), 'w') as f:
        f.write(rendered)
    sys.stdout.write("#")

def html_ext(f):
    return os.path.splitext(f)[0] + '.html'


# os.path.relpath is not in 2.5. This is taken from
# http://www.saltycrane.com/blog/2010/03/ospathrelpath-source-code-python-25/

import posixpath

def relpath(path, start):
    """Return a relative version of a path"""
    if not path:
        raise ValueError("no path specified")
    start_list = posixpath.abspath(start).split(posixpath.sep)
    path_list = posixpath.abspath(path).split(posixpath.sep)
    # Work out how much of the filepath is shared by start and path.
    i = len(posixpath.commonprefix([start_list, path_list]))
    rel_list = [posixpath.pardir] * (len(start_list)-i) + path_list[i:]
    if not rel_list:
        return posixpath.curdir
    return posixpath.join(*rel_list)



if __name__ == "__main__":
    main()
